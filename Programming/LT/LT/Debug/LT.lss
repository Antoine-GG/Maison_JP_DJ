
LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000246  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd1  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ec  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009c7  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000033f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000286  00000000  00000000  00003604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f86  00000000  00000000  0000388a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004810  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001a4  000001a4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004908  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.SPI_MasterInit 0000000e  00000188  00000188  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SPI_MasterTransmit 00000034  00000114  00000114  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initUSART 0000002a  00000148  00000148  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.uartTransmitByte 0000000e  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000052  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  000001ac  000001ac  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001ae  000001ae  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000172  00000172  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001a8  000001a8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
   8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
   c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
  64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 08       	sbc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d4 e0       	ldi	r29, 0x04	; 4
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 b9 00 	jmp	0x172	; 0x172 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001a4 <__bad_interrupt>:
 1a4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_MasterInit:

00000188 <SPI_MasterInit>:

//SPI
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output SS,  */
	DDRB = (1<<PB3)|(1<<PB5)|(1<<PB2);
 188:	8c e2       	ldi	r24, 0x2C	; 44
 18a:	84 b9       	out	0x04, r24	; 4
	// set Port C pins for 3 ss	
	DDRD = (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 18c:	8c e1       	ldi	r24, 0x1C	; 28
 18e:	8a b9       	out	0x0a, r24	; 10
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 190:	81 e5       	ldi	r24, 0x51	; 81
 192:	8c bd       	out	0x2c, r24	; 44
 194:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

00000114 <SPI_MasterTransmit>:
}

void i2cSend(uint8_t data) {
	TWDR = data;
	TWCR = (_BV(TWINT) | _BV(TWEN));                  /* init and enable */
	i2cWaitForComplete();
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9c 61       	ori	r25, 0x1C	; 28
 118:	9b b9       	out	0x0b, r25	; 11
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <SPI_MasterTransmit+0x12>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <SPI_MasterTransmit+0xe>
 12a:	20 95       	com	r18
 12c:	29 23       	and	r18, r25
 12e:	2b b9       	out	0x0b, r18	; 11
 130:	ef ec       	ldi	r30, 0xCF	; 207
 132:	f7 e0       	ldi	r31, 0x07	; 7
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <SPI_MasterTransmit+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <SPI_MasterTransmit+0x26>
 13a:	00 00       	nop
 13c:	8e bd       	out	0x2e, r24	; 46
 13e:	0d b4       	in	r0, 0x2d	; 45
 140:	07 fe       	sbrs	r0, 7
 142:	fd cf       	rjmp	.-6      	; 0x13e <SPI_MasterTransmit+0x2a>
 144:	8e b5       	in	r24, 0x2e	; 46
 146:	08 95       	ret

Disassembly of section .text.initUSART:

00000148 <initUSART>:
 148:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
 14c:	83 e3       	ldi	r24, 0x33	; 51
 14e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
 15c:	e1 ec       	ldi	r30, 0xC1	; 193
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	88 61       	ori	r24, 0x18	; 24
 164:	80 83       	st	Z, r24
 166:	e2 ec       	ldi	r30, 0xC2	; 194
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	86 60       	ori	r24, 0x06	; 6
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

Disassembly of section .text.uartTransmitByte:

00000196 <uartTransmitByte>:
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
}
//transmettre un caractere
void uartTransmitByte(uint8_t data) {
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Attendre que le buffer de transmission soit vide */
 196:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 19a:	95 ff       	sbrs	r25, 5
 19c:	fc cf       	rjmp	.-8      	; 0x196 <uartTransmitByte>
	UDR0 = data;                      /* envoyer la donnï¿½e */
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 1a2:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
  c2:	0e 94 a4 00 	call	0x148	; 0x148 <initUSART>
  c6:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_MasterInit>
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	84 e3       	ldi	r24, 0x34	; 52
  ce:	9c e0       	ldi	r25, 0x0C	; 12
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0xe>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x18>
  da:	00 00       	nop
  dc:	c2 e0       	ldi	r28, 0x02	; 2
  de:	d1 e0       	ldi	r29, 0x01	; 1
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	0e 94 8a 00 	call	0x114	; 0x114 <SPI_MasterTransmit>
  e8:	63 e0       	ldi	r22, 0x03	; 3
  ea:	8c 81       	ldd	r24, Y+4	; 0x04
  ec:	0e 94 8a 00 	call	0x114	; 0x114 <SPI_MasterTransmit>
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	89 e5       	ldi	r24, 0x59	; 89
  f4:	0e 94 8a 00 	call	0x114	; 0x114 <SPI_MasterTransmit>
  f8:	8d 83       	std	Y+5, r24	; 0x05
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 cb 00 	call	0x196	; 0x196 <uartTransmitByte>
 100:	8a e0       	ldi	r24, 0x0A	; 10
 102:	0e 94 cb 00 	call	0x196	; 0x196 <uartTransmitByte>
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	97 e2       	ldi	r25, 0x27	; 39
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x48>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x4e>
 110:	00 00       	nop
 112:	e4 cf       	rjmp	.-56     	; 0xdc <main+0x1a>

Disassembly of section .text.__dummy_fini:

000001ac <_fini>:
 1ac:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ae <__funcs_on_exit>:
 1ae:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b0 <__simulator_exit>:
 1b0:	08 95       	ret

Disassembly of section .text.exit:

00000172 <exit>:
 172:	ec 01       	movw	r28, r24
 174:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__funcs_on_exit>
 178:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_fini>
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__simulator_exit>
 182:	ce 01       	movw	r24, r28
 184:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Exit>

Disassembly of section .text._Exit:

000001a8 <_Exit>:
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
