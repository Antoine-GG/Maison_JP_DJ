
LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000234  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000271  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011aa  00000000  00000000  00000321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000676  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000268  00000000  00000000  0000254c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a8  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000192  00000192  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.I2C_Init 0000000c  00000186  00000186  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SPI_MasterInit 0000000e  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_MasterTransmit 00000034  00000104  00000104  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initUSART 0000002a  00000138  00000138  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000042  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000162  00000162  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  54:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  58:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  5c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  60:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  64:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 06       	cpc	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d4 e0       	ldi	r29, 0x04	; 4
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 b1 00 	jmp	0x162	; 0x162 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000192 <__bad_interrupt>:
 192:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Init:

00000186 <I2C_Init>:
#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	//TWBR = 12;
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 186:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fc0b8>
 190:	08 95       	ret

Disassembly of section .text.SPI_MasterInit:

00000178 <SPI_MasterInit>:

//SPI
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output SS,  */
	DDRB = (1<<PB3)|(1<<PB5)|(1<<PB2);
 178:	8c e2       	ldi	r24, 0x2C	; 44
 17a:	84 b9       	out	0x04, r24	; 4
	// set Port C pins for 3 ss	
	DDRD = (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 17c:	8c e1       	ldi	r24, 0x1C	; 28
 17e:	8a b9       	out	0x0a, r24	; 10
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 180:	81 e5       	ldi	r24, 0x51	; 81
 182:	8c bd       	out	0x2c, r24	; 44
 184:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

00000104 <SPI_MasterTransmit>:
}
char SPI_MasterTransmit(char cData, uint8_t ss)
{
	//set all SS high
	PORTD |= (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	9c 61       	ori	r25, 0x1C	; 28
 108:	9b b9       	out	0x0b, r25	; 11
	/* Set le slave qu'on veut low */
	PORTD &= ~(1<<ss);
 10a:	9b b1       	in	r25, 0x0b	; 11
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <SPI_MasterTransmit+0x12>
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <SPI_MasterTransmit+0xe>
 11a:	20 95       	com	r18
 11c:	29 23       	and	r18, r25
 11e:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	e9 ef       	ldi	r30, 0xF9	; 249
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <SPI_MasterTransmit+0x20>
 128:	00 c0       	rjmp	.+0      	; 0x12a <SPI_MasterTransmit+0x26>
 12a:	00 00       	nop
	_delay_ms(1);
	/* Start transmission */
	SPDR = cData;
 12c:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 12e:	0d b4       	in	r0, 0x2d	; 45
 130:	07 fe       	sbrs	r0, 7
 132:	fd cf       	rjmp	.-6      	; 0x12e <SPI_MasterTransmit+0x2a>
	return SPDR;
 134:	8e b5       	in	r24, 0x2e	; 46
}
 136:	08 95       	ret

Disassembly of section .text.initUSART:

00000138 <initUSART>:

//init UART
void initUSART(void) {
	UBRR0H = 0;              /* baud rate  */
 138:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = 0x0C;           /* 9600 */
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0A |= (1 << U2X0);      /* mode asynchrone double vitesse */
 142:	e0 ec       	ldi	r30, 0xC0	; 192
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 61       	ori	r24, 0x18	; 24
 154:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
 156:	e2 ec       	ldi	r30, 0xC2	; 194
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	86 60       	ori	r24, 0x06	; 6
 15e:	80 83       	st	Z, r24
 160:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
		return data;
}

int main() {
	uint8_t received;
	SPI_MasterInit();
  c2:	0e 94 bc 00 	call	0x178	; 0x178 <SPI_MasterInit>
	initUSART();
  c6:	0e 94 9c 00 	call	0x138	; 0x138 <initUSART>
	I2C_Init();
  ca:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Init>
  ce:	2f e9       	ldi	r18, 0x9F	; 159
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x12>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x1c>
  de:	00 00       	nop
		
		//spi calls
		//Set U3 door lock status
		//SPI_MasterTransmit(status.lock, SLAVE3);
		//Set U4 light status
		SPI_MasterTransmit(status.light, SLAVE4);
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d1 e0       	ldi	r29, 0x01	; 1
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	0e 94 82 00 	call	0x104	; 0x104 <SPI_MasterTransmit>
		//POLL U5, get the keyboard char
		status.keyboardChar = SPI_MasterTransmit('Y', SLAVE5);
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	89 e5       	ldi	r24, 0x59	; 89
  f0:	0e 94 82 00 	call	0x104	; 0x104 <SPI_MasterTransmit>
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	81 ee       	ldi	r24, 0xE1	; 225
  f8:	94 e0       	ldi	r25, 0x04	; 4
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x38>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x3e>
 100:	00 00       	nop
 102:	ee cf       	rjmp	.-36     	; 0xe0 <main+0x1e>

Disassembly of section .text.__dummy_fini:

0000019a <_fini>:
 19a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019c <__funcs_on_exit>:
 19c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000019e <__simulator_exit>:
 19e:	08 95       	ret

Disassembly of section .text.exit:

00000162 <exit>:
 162:	ec 01       	movw	r28, r24
 164:	0e 94 ce 00 	call	0x19c	; 0x19c <__funcs_on_exit>
 168:	0e 94 cd 00 	call	0x19a	; 0x19a <_fini>
 16c:	ce 01       	movw	r24, r28
 16e:	0e 94 cf 00 	call	0x19e	; 0x19e <__simulator_exit>
 172:	ce 01       	movw	r24, r28
 174:	0e 94 cb 00 	call	0x196	; 0x196 <_Exit>

Disassembly of section .text._Exit:

00000196 <_Exit>:
 196:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
