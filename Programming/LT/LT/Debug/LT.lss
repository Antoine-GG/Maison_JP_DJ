
LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000296  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000002c5  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132d  00000000  00000000  0000039b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b9  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000702  00000000  00000000  00001f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000268  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d1  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001f4  000001f4  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000030f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.I2C_Init 0000000c  000001e8  000001e8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.SPI_MasterInit 0000000e  000001da  000001da  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.SPI_MasterTransmit 00000026  0000018c  0000018c  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.SPI_MasterReceive 00000028  00000164  00000164  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.pollSpiDevice 0000002e  0000010c  0000010c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SetSpiDevice 00000012  000001c8  000001c8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.initUSART 0000002a  0000013a  0000013a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    0000004a  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_fini 00000002  000001fc  000001fc  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  000001fe  000001fe  00000292  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  00000200  00000200  00000294  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  000001b2  000001b2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  000001f8  000001f8  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
   8:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
   c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  10:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  14:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  18:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  1c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  20:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  24:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  28:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  2c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  34:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  38:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  3c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  40:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  44:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  48:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  4c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  50:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  58:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  5c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  60:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>
  64:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 06       	cpc	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d4 e0       	ldi	r29, 0x04	; 4
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001f4 <__bad_interrupt>:
 1f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.I2C_Init:

000001e8 <I2C_Init>:
#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	//TWBR = 12;
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 1e8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fc0b8>
 1f2:	08 95       	ret

Disassembly of section .text.SPI_MasterInit:

000001da <SPI_MasterInit>:

//SPI
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output SS,  */
	DDRB = (1<<PB3)|(1<<PB5)|(1<<PB2);
 1da:	8c e2       	ldi	r24, 0x2C	; 44
 1dc:	84 b9       	out	0x04, r24	; 4
	// set Port C pins for 3 ss	
	DDRD = (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 1de:	8c e1       	ldi	r24, 0x1C	; 28
 1e0:	8a b9       	out	0x0a, r24	; 10
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1e2:	81 e5       	ldi	r24, 0x51	; 81
 1e4:	8c bd       	out	0x2c, r24	; 44
 1e6:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

0000018c <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData, uint8_t ss)
{
	//set all SS high
	PORTD |= (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 18c:	9b b1       	in	r25, 0x0b	; 11
 18e:	9c 61       	ori	r25, 0x1C	; 28
 190:	9b b9       	out	0x0b, r25	; 11
	/* Set SS low */
	PORTD &= ~(1<<ss);
 192:	9b b1       	in	r25, 0x0b	; 11
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <SPI_MasterTransmit+0x12>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <SPI_MasterTransmit+0xe>
 1a2:	20 95       	com	r18
 1a4:	29 23       	and	r18, r25
 1a6:	2b b9       	out	0x0b, r18	; 11
	/* Start transmission */
	SPDR = cData;
 1a8:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 1aa:	0d b4       	in	r0, 0x2d	; 45
 1ac:	07 fe       	sbrs	r0, 7
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <SPI_MasterTransmit+0x1e>
}
 1b0:	08 95       	ret

Disassembly of section .text.SPI_MasterReceive:

00000164 <SPI_MasterReceive>:
uint8_t SPI_MasterReceive(uint8_t ss)
{
	PORTD |= (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	9c 61       	ori	r25, 0x1C	; 28
 168:	9b b9       	out	0x0b, r25	; 11
	/* Set SS low */
	PORTB &= ~(1<<ss);
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <SPI_MasterReceive+0x12>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <SPI_MasterReceive+0xe>
 17a:	20 95       	com	r18
 17c:	29 23       	and	r18, r25
 17e:	25 b9       	out	0x05, r18	; 5
	/* Wait for reception complete */
	SPDR = 0x00;
 180:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
 182:	0d b4       	in	r0, 0x2d	; 45
 184:	07 fe       	sbrs	r0, 7
 186:	fd cf       	rjmp	.-6      	; 0x182 <SPI_MasterReceive+0x1e>
	/* Return Data Register */
	return SPDR;
 188:	8e b5       	in	r24, 0x2e	; 46
}
 18a:	08 95       	ret

Disassembly of section .text.pollSpiDevice:

0000010c <pollSpiDevice>:
uint8_t pollSpiDevice(uint8_t ss){
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
	uint8_t data;
	SPI_MasterTransmit(0xAE, ss);
 110:	68 2f       	mov	r22, r24
 112:	8e ea       	ldi	r24, 0xAE	; 174
 114:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	89 ef       	ldi	r24, 0xF9	; 249
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <pollSpiDevice+0x10>
 120:	00 c0       	rjmp	.+0      	; 0x122 <pollSpiDevice+0x16>
 122:	00 00       	nop
	_delay_ms(1);
	data = SPI_MasterReceive(ss);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 b2 00 	call	0x164	; 0x164 <SPI_MasterReceive>
 12a:	e9 ef       	ldi	r30, 0xF9	; 249
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <pollSpiDevice+0x22>
 132:	00 c0       	rjmp	.+0      	; 0x134 <pollSpiDevice+0x28>
 134:	00 00       	nop
	_delay_ms(1);
	return data;
}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

Disassembly of section .text.SetSpiDevice:

000001c8 <SetSpiDevice>:
void SetSpiDevice(uint8_t status, uint8_t ss){
	SPI_MasterTransmit(status, ss);
 1c8:	0e 94 c6 00 	call	0x18c	; 0x18c <SPI_MasterTransmit>
 1cc:	89 ef       	ldi	r24, 0xF9	; 249
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <SetSpiDevice+0x8>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <SetSpiDevice+0xe>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

Disassembly of section .text.initUSART:

0000013a <initUSART>:
	return;
}

//init UART
void initUSART(void) {
	UBRR0H = 0;              /* baud rate  */
 13a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = 0x0C;           /* 9600 */
 13e:	8c e0       	ldi	r24, 0x0C	; 12
 140:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0A |= (1 << U2X0);      /* mode asynchrone double vitesse */
 144:	e0 ec       	ldi	r30, 0xC0	; 192
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
 14e:	e1 ec       	ldi	r30, 0xC1	; 193
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 61       	ori	r24, 0x18	; 24
 156:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
 158:	e2 ec       	ldi	r30, 0xC2	; 194
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
		return data;
}

int main() {
	uint8_t received;
	SPI_MasterInit();
  c2:	0e 94 ed 00 	call	0x1da	; 0x1da <SPI_MasterInit>
	initUSART();
  c6:	0e 94 9d 00 	call	0x13a	; 0x13a <initUSART>
	I2C_Init();
  ca:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <I2C_Init>
  ce:	2f e9       	ldi	r18, 0x9F	; 159
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x12>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x1c>
  de:	00 00       	nop
		status.window1 = (received >> 1) & 0x01; // Shift right by 1 and mask with 0x01
		//POLL U2, get the door status;
		received = poll_I2cDevice(SLAVE2, 0x25);
		}
		if(useSPI){
		status.door = received & 0x01; //Mask the lsb
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d1 e0       	ldi	r29, 0x01	; 1
  e4:	1a 82       	std	Y+2, r1	; 0x02
		//spi calls
		//Set U3 door lock status
		SetSpiDevice(status.lock, SLAVE3);
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SetSpiDevice>
		//Set U4 light status
		SetSpiDevice(status.light, SLAVE4);
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <SetSpiDevice>
		//POLL U5, get the keyboard char
		status.keyboardChar = pollSpiDevice(SLAVE5);
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	0e 94 86 00 	call	0x10c	; 0x10c <pollSpiDevice>
  fc:	8d 83       	std	Y+5, r24	; 0x05
  fe:	83 ed       	ldi	r24, 0xD3	; 211
 100:	90 e3       	ldi	r25, 0x30	; 48
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x40>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x46>
 108:	00 00       	nop
 10a:	ea cf       	rjmp	.-44     	; 0xe0 <main+0x1e>

Disassembly of section .text.__dummy_fini:

000001fc <_fini>:
 1fc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001fe <__funcs_on_exit>:
 1fe:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000200 <__simulator_exit>:
 200:	08 95       	ret

Disassembly of section .text.exit:

000001b2 <exit>:
 1b2:	ec 01       	movw	r28, r24
 1b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__funcs_on_exit>
 1b8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_fini>
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 00 01 	call	0x200	; 0x200 <__EEPROM_REGION_LENGTH__>
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <_Exit>

Disassembly of section .text._Exit:

000001f8 <_Exit>:
 1f8:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
