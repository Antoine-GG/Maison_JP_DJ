
LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000374  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000003a3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017e3  00000000  00000000  00000481  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089a  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000842  00000000  00000000  000024fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000278  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000002d2  000002d2  00000366  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.initI2C 00000012  00000264  00000264  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2cWaitForComplete 0000000a  000002c0  000002c0  00000354  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2cStart 0000000c  000002b4  000002b4  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2cStop 00000008  000002ca  000002ca  0000035e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2cReadAck 00000010  00000276  00000276  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.i2cReadNoAck 00000010  00000286  00000286  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.i2cSend 00000010  00000296  00000296  0000032a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.SPI_MasterInit 0000000e  000002a6  000002a6  0000033a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.SPI_MasterTransmit 00000034  000001f0  000001f0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.initUSART 0000002a  00000224  00000224  000002b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.initIi2c 00000068  00000188  00000188  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.main    000000c6  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  000002da  000002da  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  000002dc  000002dc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  000002de  000002de  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  0000024e  0000024e  000002e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  000002d6  000002d6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
   8:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
   c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  10:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  18:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  1c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  20:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  24:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  28:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  2c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  30:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  34:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  38:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  3c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  40:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  44:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  48:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  4c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  50:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  54:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  58:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  5c:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  60:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>
  64:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 06       	cpc	r0, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d4 e0       	ldi	r29, 0x04	; 4
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 27 01 	jmp	0x24e	; 0x24e <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000002d2 <__bad_interrupt>:
 2d2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initI2C:

00000264 <initI2C>:
#include "i2c.h"

void initI2C(void) {
	TWBR = 32;                               /* set bit rate, see p. 242 */
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fc0b8>
	/* 8MHz / (16+2*TWBR*1) ~= 100kHz */
	TWCR |= (1 << TWEN);                                       /* enable */
 26a:	ec eb       	ldi	r30, 0xBC	; 188
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	84 60       	ori	r24, 0x04	; 4
 272:	80 83       	st	Z, r24
 274:	08 95       	ret

Disassembly of section .text.i2cWaitForComplete:

000002c0 <i2cWaitForComplete>:
}

void i2cWaitForComplete(void) {
	loop_until_bit_is_set(TWCR, TWINT);
 2c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 2c4:	88 23       	and	r24, r24
 2c6:	e4 f7       	brge	.-8      	; 0x2c0 <i2cWaitForComplete>
}
 2c8:	08 95       	ret

Disassembly of section .text.i2cStart:

000002b4 <i2cStart>:

void i2cStart(void) {
	TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTA));
 2b4:	84 ea       	ldi	r24, 0xA4	; 164
 2b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	i2cWaitForComplete();
 2ba:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2cWaitForComplete>
 2be:	08 95       	ret

Disassembly of section .text.i2cStop:

000002ca <i2cStop>:
}

void i2cStop(void) {
	TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTO));
 2ca:	84 e9       	ldi	r24, 0x94	; 148
 2cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 2d0:	08 95       	ret

Disassembly of section .text.i2cReadAck:

00000276 <i2cReadAck>:
}

uint8_t i2cReadAck(void) {
	TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWEA));
 276:	84 ec       	ldi	r24, 0xC4	; 196
 278:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	i2cWaitForComplete();
 27c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2cWaitForComplete>
	return (TWDR);
 280:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
}
 284:	08 95       	ret

Disassembly of section .text.i2cReadNoAck:

00000286 <i2cReadNoAck>:

uint8_t i2cReadNoAck(void) {
	TWCR = (_BV(TWINT) | _BV(TWEN));
 286:	84 e8       	ldi	r24, 0x84	; 132
 288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	i2cWaitForComplete();
 28c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2cWaitForComplete>
	return (TWDR);
 290:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
}
 294:	08 95       	ret

Disassembly of section .text.i2cSend:

00000296 <i2cSend>:

void i2cSend(uint8_t data) {
	TWDR = data;
 296:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
	TWCR = (_BV(TWINT) | _BV(TWEN));                  /* init and enable */
 29a:	84 e8       	ldi	r24, 0x84	; 132
 29c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	i2cWaitForComplete();
 2a0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <i2cWaitForComplete>
 2a4:	08 95       	ret

Disassembly of section .text.SPI_MasterInit:

000002a6 <SPI_MasterInit>:

//SPI
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output SS,  */
	DDRB = (1<<PB3)|(1<<PB5)|(1<<PB2);
 2a6:	8c e2       	ldi	r24, 0x2C	; 44
 2a8:	84 b9       	out	0x04, r24	; 4
	// set Port C pins for 3 ss	
	DDRD = (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 2aa:	8c e1       	ldi	r24, 0x1C	; 28
 2ac:	8a b9       	out	0x0a, r24	; 10
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 2ae:	81 e5       	ldi	r24, 0x51	; 81
 2b0:	8c bd       	out	0x2c, r24	; 44
 2b2:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000001f0 <SPI_MasterTransmit>:
}
char SPI_MasterTransmit(char cData, uint8_t ss)
{
	//set all SS high
	PORTD |= (1<<SLAVE3)|(1<<SLAVE4)|(1<<SLAVE5);
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	9c 61       	ori	r25, 0x1C	; 28
 1f4:	9b b9       	out	0x0b, r25	; 11
	/* Set le slave qu'on veut low */
	PORTD &= ~(1<<ss);
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	21 e0       	ldi	r18, 0x01	; 1
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <SPI_MasterTransmit+0xe>
 206:	20 95       	com	r18
 208:	29 23       	and	r18, r25
 20a:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	e9 ef       	ldi	r30, 0xF9	; 249
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 214:	00 c0       	rjmp	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 216:	00 00       	nop
	_delay_ms(1);
	/* Start transmission */
	SPDR = cData;
 218:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 21a:	0d b4       	in	r0, 0x2d	; 45
 21c:	07 fe       	sbrs	r0, 7
 21e:	fd cf       	rjmp	.-6      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	return SPDR;
 220:	8e b5       	in	r24, 0x2e	; 46
}
 222:	08 95       	ret

Disassembly of section .text.initUSART:

00000224 <initUSART>:

//init UART
void initUSART(void) {
	UBRR0H = 0;              /* baud rate  */
 224:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = 0x0C;           /* 9600 */
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0A |= (1 << U2X0);      /* mode asynchrone double vitesse */
 22e:	e0 ec       	ldi	r30, 0xC0	; 192
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
 238:	e1 ec       	ldi	r30, 0xC1	; 193
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	88 61       	ori	r24, 0x18	; 24
 240:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
 242:	e2 ec       	ldi	r30, 0xC2	; 194
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	86 60       	ori	r24, 0x06	; 6
 24a:	80 83       	st	Z, r24
 24c:	08 95       	ret

Disassembly of section .text.initIi2c:

00000188 <initIi2c>:
	_delay_us(4);
}
//ii2c
void initIi2c(){

	initI2C();
 188:	0e 94 32 01 	call	0x264	; 0x264 <initI2C>
	// DS1621 initialization,début
	i2cStart();
 18c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
	i2cSend(TEMP_W);
 190:	80 e9       	ldi	r24, 0x90	; 144
 192:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(access_config);
 196:	8c ea       	ldi	r24, 0xAC	; 172
 198:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(0x03); // mode , POL=1 , 1 Shot = 1
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cStop();
 1a2:	0e 94 65 01 	call	0x2ca	; 0x2ca <i2cStop>
 1a6:	81 ee       	ldi	r24, 0xE1	; 225
 1a8:	94 e0       	ldi	r25, 0x04	; 4
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <initIi2c+0x22>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <initIi2c+0x28>
 1b0:	00 00       	nop
	_delay_ms(5);
	// Setup de la température TH
	i2cStart();
 1b2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
	i2cSend(TEMP_W);
 1b6:	80 e9       	ldi	r24, 0x90	; 144
 1b8:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(0xA1);
 1bc:	81 ea       	ldi	r24, 0xA1	; 161
 1be:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(23);
 1c2:	87 e1       	ldi	r24, 0x17	; 23
 1c4:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(0b10000000);
 1c8:	80 e8       	ldi	r24, 0x80	; 128
 1ca:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	//1 ou 0	 pour la decimal
	i2cStop();
 1ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <i2cStop>
	//Setup de la température TL
	i2cStart();
 1d2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
	i2cSend(TEMP_W);
 1d6:	80 e9       	ldi	r24, 0x90	; 144
 1d8:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(0xA2);
 1dc:	82 ea       	ldi	r24, 0xA2	; 162
 1de:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(21);
 1e2:	85 e1       	ldi	r24, 0x15	; 21
 1e4:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
	i2cSend(0b00000000);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 1ee:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	0e 94 c4 00 	call	0x188	; 0x188 <initIi2c>
  c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SPI_MasterInit>
  ca:	0e 94 12 01 	call	0x224	; 0x224 <initUSART>
  ce:	2f e9       	ldi	r18, 0x9F	; 159
  d0:	86 e8       	ldi	r24, 0x86	; 134
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x12>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x1c>
  de:	00 00       	nop
  e0:	c0 e0       	ldi	r28, 0x00	; 0
  e2:	d1 e0       	ldi	r29, 0x01	; 1
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	8c 81       	ldd	r24, Y+4	; 0x04
  e8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_MasterTransmit>
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	89 e5       	ldi	r24, 0x59	; 89
  f0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_MasterTransmit>
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
  fa:	80 e9       	ldi	r24, 0x90	; 144
  fc:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 100:	8e ee       	ldi	r24, 0xEE	; 238
 102:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 106:	0e 94 65 01 	call	0x2ca	; 0x2ca <i2cStop>
 10a:	81 ee       	ldi	r24, 0xE1	; 225
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x4c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x52>
 114:	00 00       	nop
 116:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
 11a:	80 e9       	ldi	r24, 0x90	; 144
 11c:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 120:	8a ea       	ldi	r24, 0xAA	; 170
 122:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 126:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
 12a:	81 e9       	ldi	r24, 0x91	; 145
 12c:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 130:	0e 94 3b 01 	call	0x276	; 0x276 <i2cReadAck>
 134:	0e 94 43 01 	call	0x286	; 0x286 <i2cReadNoAck>
 138:	0e 94 65 01 	call	0x2ca	; 0x2ca <i2cStop>
 13c:	81 ee       	ldi	r24, 0xE1	; 225
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x7e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x84>
 146:	00 00       	nop
 148:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
 14c:	8c e3       	ldi	r24, 0x3C	; 60
 14e:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 152:	85 e2       	ldi	r24, 0x25	; 37
 154:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 158:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <i2cStart>
 15c:	8d e3       	ldi	r24, 0x3D	; 61
 15e:	0e 94 4b 01 	call	0x296	; 0x296 <i2cSend>
 162:	0e 94 3b 01 	call	0x276	; 0x276 <i2cReadAck>
 166:	0e 94 43 01 	call	0x286	; 0x286 <i2cReadNoAck>
 16a:	0e 94 65 01 	call	0x2ca	; 0x2ca <i2cStop>
 16e:	81 ee       	ldi	r24, 0xE1	; 225
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xb0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xb6>
 178:	00 00       	nop
 17a:	81 ee       	ldi	r24, 0xE1	; 225
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0xbc>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0xc2>
 184:	00 00       	nop
 186:	ac cf       	rjmp	.-168    	; 0xe0 <main+0x1e>

Disassembly of section .text.__dummy_fini:

000002da <_fini>:
 2da:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002dc <__funcs_on_exit>:
 2dc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002de <__simulator_exit>:
 2de:	08 95       	ret

Disassembly of section .text.exit:

0000024e <exit>:
 24e:	ec 01       	movw	r28, r24
 250:	0e 94 6e 01 	call	0x2dc	; 0x2dc <__funcs_on_exit>
 254:	0e 94 6d 01 	call	0x2da	; 0x2da <_fini>
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 6f 01 	call	0x2de	; 0x2de <__simulator_exit>
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Exit>

Disassembly of section .text._Exit:

000002d6 <_Exit>:
 2d6:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
