
LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae4  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071e  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000103  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000168  00000168  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.i2c_init 0000001a  00000112  00000112  00000186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.i2c_start 00000012  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_stop 00000014  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000056  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000174  00000174  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
   c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  10:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  14:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  18:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  1c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  48:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  4c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
  64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	e8 e6       	ldi	r30, 0x68	; 104
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	17 c0       	rjmp	.+46     	; 0xaa <__do_clear_bss+0x8>
  7c:	b5 91       	lpm	r27, Z+
  7e:	a5 91       	lpm	r26, Z+
  80:	35 91       	lpm	r19, Z+
  82:	25 91       	lpm	r18, Z+
  84:	05 91       	lpm	r16, Z+
  86:	07 fd       	sbrc	r16, 7
  88:	0c c0       	rjmp	.+24     	; 0xa2 <__do_clear_bss>
  8a:	95 91       	lpm	r25, Z+
  8c:	85 91       	lpm	r24, Z+
  8e:	ef 01       	movw	r28, r30
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0x20>
  9e:	fe 01       	movw	r30, r28
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__do_clear_bss+0x8>

000000a2 <__do_clear_bss>:
  a2:	1d 92       	st	X+, r1
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__do_clear_bss>
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f4 07       	cpc	r31, r20
  ae:	31 f7       	brne	.-52     	; 0x7c <__do_copy_data+0x8>
  b0:	0e 94 5e 00 	call	0xbc	; 0xbc <_etext>
  b4:	0c 94 96 00 	jmp	0x12c	; 0x12c <exit>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>

Disassembly of section .text:

00000168 <__bad_interrupt>:
 168:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

00000112 <i2c_init>:
volatile uint8_t windowState2 = 0; // État de la fenêtre de l'esclave 2
int iteration =0;

void i2c_init() {
	// SDA (PC4) and SCL (PC5) are configured as inputs with pull-up resistors.
	PORTC |= (1 << PC4) | (1 << PC5); // Enable pull-up resistors on SDA and SCL
 112:	88 b1       	in	r24, 0x08	; 8
 114:	80 63       	ori	r24, 0x30	; 48
 116:	88 b9       	out	0x08, r24	; 8
	
	TWSR = 0; // No clock prescaling
 118:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 12; // Set TWI bit rate to achieve 100 kHz I2C frequency
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT); // Enable I2C, generate START condition, and clear interrupt flag
 122:	84 ea       	ldi	r24, 0xA4	; 164
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	sei(); // Enable global interrupts
 128:	78 94       	sei
 12a:	08 95       	ret

Disassembly of section .text.i2c_start:

00000156 <i2c_start>:
void i2c_start() {
	uint8_t retries = 0;
	
	while (1) {
		// Initiate START condition
		TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 156:	84 ea       	ldi	r24, 0xA4	; 164
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		//if ((TWCR & (1 << TWINT))){
		//	break;
		//}
		
		// Check for START condition success
		if ((TWSR & 0xF8) == TW_START) {
 15c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	c1 f7       	brne	.-16     	; 0x156 <i2c_start>
		}
		
		// If START condition failed, increment retries and try again
		retries++;
	}
}
 166:	08 95       	ret

Disassembly of section .text.i2c_stop:

00000142 <i2c_stop>:

void i2c_stop() {
	TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
 142:	84 e9       	ldi	r24, 0x94	; 148
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <i2c_stop+0xa>
 150:	00 c0       	rjmp	.+0      	; 0x152 <i2c_stop+0x10>
 152:	00 00       	nop
 154:	08 95       	ret

Disassembly of section .text.main:

000000bc <main>:
	return TWDR;
}

int main() {
	
	i2c_init();
  bc:	0e 94 89 00 	call	0x112	; 0x112 <i2c_init>
  c0:	2f e9       	ldi	r18, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0xa>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x14>
  d0:	00 00       	nop
	_delay_ms(500); // Attendre pour laisser les ATmega328P esclaves s'initialiser
	DDRB |= (1 << PB0) | (1 << PB1);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	84 b9       	out	0x04, r24	; 4

	while (1) {
		// Demander l'état de la fenêtre de l'esclave 1
		i2c_start();
  d8:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_start>
		//i2c_write(0x30); // Écrire l'adresse de l'ATmega328P esclave 1 en mode lecture
		//windowState1 = i2c_read();
		i2c_stop();
  dc:	0e 94 a1 00 	call	0x142	; 0x142 <i2c_stop>
		//	} else {
		//	PORTB &= ~(1 << PB1);	// Éteindre la LED 1
		//}
		
		
			PORTB |= (1 << PB0);	// Allumer la LED 2 
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	2f e9       	ldi	r18, 0x9F	; 159
  e8:	86 e8       	ldi	r24, 0x86	; 134
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x30>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x3a>
  f6:	00 00       	nop
			_delay_ms(500);
			
			PORTB &= ~(1 << PB0);	// Éteindre la LED 2 
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	2f e9       	ldi	r18, 0x9F	; 159
 100:	86 e8       	ldi	r24, 0x86	; 134
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x48>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x52>
 10e:	00 00       	nop
 110:	e3 cf       	rjmp	.-58     	; 0xd8 <main+0x1c>

Disassembly of section .text.__dummy_fini:

00000170 <_fini>:
 170:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000172 <__funcs_on_exit>:
 172:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000174 <__simulator_exit>:
 174:	08 95       	ret

Disassembly of section .text.exit:

0000012c <exit>:
 12c:	ec 01       	movw	r28, r24
 12e:	0e 94 b9 00 	call	0x172	; 0x172 <__funcs_on_exit>
 132:	0e 94 b8 00 	call	0x170	; 0x170 <_fini>
 136:	ce 01       	movw	r24, r28
 138:	0e 94 ba 00 	call	0x174	; 0x174 <__simulator_exit>
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 b6 00 	call	0x16c	; 0x16c <_Exit>

Disassembly of section .text._Exit:

0000016c <_Exit>:
 16c:	0e 94 5c 00 	call	0xb8	; 0xb8 <_exit>
