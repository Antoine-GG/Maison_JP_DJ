
UART_2_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ad  00000000  00000000  000001df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e1  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000081  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.USART_Init 00000016  000000b6  000000b6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Receive 0000000e  000000e2  000000e2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000036  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.USART_Init:

000000b6 <USART_Init>:
// Définition des broches
#define LED_PIN PB0 // Broche 0 du port B pour la LED

void USART_Init(unsigned int ubrr) {
	// Configuration du registre UBRR pour la vitesse de communication
	UBRR0H = (unsigned char)(ubrr >> 8);
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Activation du récepteur et du transmetteur
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  be:	88 e1       	ldi	r24, 0x18	; 24
  c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Format de trame : 8 bits de données, 1 bit d'arrêt, pas de parité
	//UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);à
	UCSR0C = (1 << USBS0) | (3 << UCSZ00); // 8 data, 2 stop
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ca:	08 95       	ret

Disassembly of section .text.USART_Receive:

000000e2 <USART_Receive>:
}

unsigned char USART_Receive() {
	// Attente de données à recevoir
	while (!(UCSR0A & (1 << RXC0)));
  e2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e6:	88 23       	and	r24, r24
  e8:	e4 f7       	brge	.-8      	; 0xe2 <USART_Receive>
	
	// Récupération des données du tampon
	return UDR0;
  ea:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  ee:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:

int main(void) {
	// Initialisation de l'UART à 9600 bauds (même vitesse que l'émetteur)
	USART_Init(103); // 9600 bauds pour une fréquence de 1 MHz
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Init>
	
	// Configuration de la broche de la LED comme sortie
	DDRB |= (1 << LED_PIN);
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	84 b9       	out	0x04, r24	; 4
	
	while (1) {
		// Attente de données de l'émetteur
		char receivedData = USART_Receive();
  8e:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Receive>
		
		// Si 'A' est reçu, allumer la LED
		if (receivedData == 0b00000001) {
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
			PORTB |= (1 << LED_PIN); // Allumer la LED
  96:	85 b1       	in	r24, 0x05	; 5
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e3       	ldi	r18, 0x3F	; 63
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
			
			// Attendre un moment (vous pouvez ajuster la durée)
			_delay_ms(1000);
			
			PORTB &= ~(1 << LED_PIN); // Éteindre la LED
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	ec cf       	rjmp	.-40     	; 0x8e <main+0xe>

Disassembly of section .text.__dummy_fini:

000000f8 <_fini>:
  f8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000fa <__funcs_on_exit>:
  fa:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000fc <__simulator_exit>:
  fc:	08 95       	ret

Disassembly of section .text.exit:

000000cc <exit>:
  cc:	ec 01       	movw	r28, r24
  ce:	0e 94 7d 00 	call	0xfa	; 0xfa <__funcs_on_exit>
  d2:	0e 94 7c 00 	call	0xf8	; 0xf8 <_fini>
  d6:	ce 01       	movw	r24, r28
  d8:	0e 94 7e 00 	call	0xfc	; 0xfc <__simulator_exit>
  dc:	ce 01       	movw	r24, r28
  de:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Exit>

Disassembly of section .text._Exit:

000000f4 <_Exit>:
  f4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
