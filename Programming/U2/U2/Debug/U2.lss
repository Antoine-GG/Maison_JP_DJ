
U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000295  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ccb  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070b  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  000016c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000254  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000189  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001d6  000001d6  0000024a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 0000000c  000001ca  000001ca  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Slave_Listen 0000003e  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Slave_Transmit 00000050  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.I2C_Slave_Receive 00000046  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000060  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  000001de  000001de  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000001e0  000001e0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000001e2  000001e2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  000001b4  000001b4  00000228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000001da  000001da  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
   8:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
   c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  10:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  14:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  18:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  1c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  20:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  24:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  28:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  2c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  30:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  34:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  38:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  3c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  40:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  44:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  48:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  4c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  50:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  54:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  58:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  5c:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  60:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>
  64:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001d6 <__bad_interrupt>:
 1d6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Slave_Init:

000001ca <I2C_Slave_Init>:
 1ca:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
 1ce:	84 ec       	ldi	r24, 0xC4	; 196
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	08 95       	ret

Disassembly of section .text.I2C_Slave_Listen:

00000176 <I2C_Slave_Listen>:
 176:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17a:	88 23       	and	r24, r24
 17c:	e4 f7       	brge	.-8      	; 0x176 <I2C_Slave_Listen>
 17e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	80 36       	cpi	r24, 0x60	; 96
 186:	61 f0       	breq	.+24     	; 0x1a0 <I2C_Slave_Listen+0x2a>
 188:	88 36       	cpi	r24, 0x68	; 104
 18a:	61 f0       	breq	.+24     	; 0x1a4 <I2C_Slave_Listen+0x2e>
 18c:	88 3a       	cpi	r24, 0xA8	; 168
 18e:	61 f0       	breq	.+24     	; 0x1a8 <I2C_Slave_Listen+0x32>
 190:	80 3b       	cpi	r24, 0xB0	; 176
 192:	61 f0       	breq	.+24     	; 0x1ac <I2C_Slave_Listen+0x36>
 194:	80 37       	cpi	r24, 0x70	; 112
 196:	61 f0       	breq	.+24     	; 0x1b0 <I2C_Slave_Listen+0x3a>
 198:	88 37       	cpi	r24, 0x78	; 120
 19a:	69 f7       	brne	.-38     	; 0x176 <I2C_Slave_Listen>
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	08 95       	ret
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	08 95       	ret
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	08 95       	ret

Disassembly of section .text.I2C_Slave_Transmit:

000000e0 <I2C_Slave_Transmit>:
  e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  e4:	84 ec       	ldi	r24, 0xC4	; 196
  e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ee:	88 23       	and	r24, r24
  f0:	e4 f7       	brge	.-8      	; 0xea <I2C_Slave_Transmit+0xa>
  f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	80 3a       	cpi	r24, 0xA0	; 160
  fa:	39 f4       	brne	.+14     	; 0x10a <I2C_Slave_Transmit+0x2a>
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	08 95       	ret
 10a:	88 3b       	cpi	r24, 0xB8	; 184
 10c:	69 f0       	breq	.+26     	; 0x128 <I2C_Slave_Transmit+0x48>
 10e:	80 3c       	cpi	r24, 0xC0	; 192
 110:	39 f4       	brne	.+14     	; 0x120 <I2C_Slave_Transmit+0x40>
 112:	ec eb       	ldi	r30, 0xBC	; 188
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	80 83       	st	Z, r24
 11c:	8e ef       	ldi	r24, 0xFE	; 254
 11e:	08 95       	ret
 120:	88 3c       	cpi	r24, 0xC8	; 200
 122:	21 f4       	brne	.+8      	; 0x12c <I2C_Slave_Transmit+0x4c>
 124:	8d ef       	ldi	r24, 0xFD	; 253
 126:	08 95       	ret
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
 12c:	8c ef       	ldi	r24, 0xFC	; 252
 12e:	08 95       	ret

Disassembly of section .text.I2C_Slave_Receive:

00000130 <I2C_Slave_Receive>:
 130:	84 ec       	ldi	r24, 0xC4	; 196
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13a:	88 23       	and	r24, r24
 13c:	e4 f7       	brge	.-8      	; 0x136 <I2C_Slave_Receive+0x6>
 13e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	80 38       	cpi	r24, 0x80	; 128
 146:	11 f0       	breq	.+4      	; 0x14c <I2C_Slave_Receive+0x1c>
 148:	80 39       	cpi	r24, 0x90	; 144
 14a:	19 f4       	brne	.+6      	; 0x152 <I2C_Slave_Receive+0x22>
 14c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 150:	08 95       	ret
 152:	88 38       	cpi	r24, 0x88	; 136
 154:	11 f0       	breq	.+4      	; 0x15a <I2C_Slave_Receive+0x2a>
 156:	88 39       	cpi	r24, 0x98	; 152
 158:	19 f4       	brne	.+6      	; 0x160 <I2C_Slave_Receive+0x30>
 15a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 15e:	08 95       	ret
 160:	80 3a       	cpi	r24, 0xA0	; 160
 162:	39 f4       	brne	.+14     	; 0x172 <I2C_Slave_Receive+0x42>
 164:	ec eb       	ldi	r30, 0xBC	; 188
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	80 83       	st	Z, r24
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	08 95       	ret
 172:	8e ef       	ldi	r24, 0xFE	; 254
 174:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
int main(void)
{
	int drapeau=0;
	int8_t count = 0;
	uint8_t valeur=0b00000000;
	DDRB |=(1<<PB1);//PB1 en sortie  LED temoin de porte
  80:	84 b1       	in	r24, 0x04	; 4
  82:	82 60       	ori	r24, 0x02	; 2
  84:	84 b9       	out	0x04, r24	; 4
	PORTD|=(1<<PD7);//Resistance de Rappel activé pour le Bouton Poussoir PORTE
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8b b9       	out	0x0b, r24	; 11
	
	I2C_Slave_Init(Slave_Address);
  8c:	8a e5       	ldi	r24, 0x5A	; 90
  8e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <I2C_Slave_Init>

#define Slave_Address			0x5A

int main(void)
{
	int drapeau=0;
  92:	c0 e0       	ldi	r28, 0x00	; 0
  94:	d0 e0       	ldi	r29, 0x00	; 0
	I2C_Slave_Init(Slave_Address);
	
	while (1)
	{
		//Afficher l'etat de la porte sur la LED PB1
		if (bit_is_clear(PIND,PD7))
  96:	4f 99       	sbic	0x09, 7	; 9
  98:	04 c0       	rjmp	.+8      	; 0xa2 <main+0x22>
		{
			PORTB |=(1<<PB1) ; //allumer le temoin de la porte
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	03 c0       	rjmp	.+6      	; 0xa8 <main+0x28>
		} else
		{
			PORTB &=~(1<<PB1) ; //eteindre le temoin de la porte
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	85 b9       	out	0x05, r24	; 5
		}
		//lire trame i2c
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  a8:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Slave_Listen>
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <main+0x36>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	51 f0       	breq	.+20     	; 0xc8 <main+0x48>
  b4:	f0 cf       	rjmp	.-32     	; 0x96 <main+0x16>
			case 0://receive
			{
				do
				{
					
					count = I2C_Slave_Receive();/* Receive data byte*/
  b6:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Slave_Receive>
					if(count==0x35) drapeau=1;  // vérifier si c'est 0x35 (code) alors autoriser la transmission
  ba:	85 33       	cpi	r24, 0x35	; 53
  bc:	11 f4       	brne	.+4      	; 0xc2 <main+0x42>
  be:	c1 e0       	ldi	r28, 0x01	; 1
  c0:	d0 e0       	ldi	r29, 0x00	; 0
					
					} while (count != -1);			/* Receive until STOP/REPEATED START received */
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	c1 f7       	brne	.-16     	; 0xb6 <main+0x36>
  c6:	e7 cf       	rjmp	.-50     	; 0x96 <main+0x16>
				}
				
				case 1://transmit
				{
					int8_t Ack_status;
					if(drapeau==1){ //si bon code envoi l'état de PD7
  c8:	c1 30       	cpi	r28, 0x01	; 1
  ca:	d1 05       	cpc	r29, r1
  cc:	21 f7       	brne	.-56     	; 0x96 <main+0x16>
						do
						{   valeur=(PIND & 0b10000000);  //valeur de PD7
  ce:	89 b1       	in	r24, 0x09	; 9
							Ack_status = I2C_Slave_Transmit(valeur);	/* Send data byte */
  d0:	80 78       	andi	r24, 0x80	; 128
  d2:	0e 94 70 00 	call	0xe0	; 0xe0 <I2C_Slave_Transmit>
							
							} while (Ack_status == 0);		/* Send until Acknowledgment is received */
  d6:	88 23       	and	r24, r24
  d8:	d1 f3       	breq	.-12     	; 0xce <main+0x4e>
							
							drapeau=0;//reset pour lire une autre donnée
  da:	c0 e0       	ldi	r28, 0x00	; 0
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	db cf       	rjmp	.-74     	; 0x96 <main+0x16>

Disassembly of section .text.__dummy_fini:

000001de <_fini>:
 1de:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001e0 <__funcs_on_exit>:
 1e0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001e2 <__simulator_exit>:
 1e2:	08 95       	ret

Disassembly of section .text.exit:

000001b4 <exit>:
 1b4:	ec 01       	movw	r28, r24
 1b6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__funcs_on_exit>
 1ba:	0e 94 ef 00 	call	0x1de	; 0x1de <_fini>
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <__simulator_exit>
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 ed 00 	call	0x1da	; 0x1da <_Exit>

Disassembly of section .text._Exit:

000001da <_Exit>:
 1da:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
