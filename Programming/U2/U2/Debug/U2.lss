
U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000252  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c7b  00000000  00000000  000002ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000136  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001b0  000001b0  00000244  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 0000000c  000001a4  000001a4  00000238  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Slave_Listen 0000003e  00000108  00000108  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Slave_Receive 00000046  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initIOports 0000000e  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    0000003a  00000146  00000146  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.doorStatus 00000001  00800100  00800100  00000252  2**0
                  ALLOC
 20 .text.__dummy_fini 00000002  000001b8  000001b8  0000024c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001ba  000001ba  0000024e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001bc  000001bc  00000250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000180  00000180  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001b4  000001b4  00000248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
   c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
  64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  ba:	0c 94 c0 00 	jmp	0x180	; 0x180 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

000001b0 <__bad_interrupt>:
 1b0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Slave_Init:

000001a4 <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 1a4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 1a8:	84 ec       	ldi	r24, 0xC4	; 196
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ae:	08 95       	ret

Disassembly of section .text.I2C_Slave_Listen:

00000108 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 108:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10c:	88 23       	and	r24, r24
 10e:	e4 f7       	brge	.-8      	; 0x108 <I2C_Slave_Listen>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 110:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 114:	88 7f       	andi	r24, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 116:	80 36       	cpi	r24, 0x60	; 96
 118:	61 f0       	breq	.+24     	; 0x132 <I2C_Slave_Listen+0x2a>
 11a:	88 36       	cpi	r24, 0x68	; 104
 11c:	61 f0       	breq	.+24     	; 0x136 <I2C_Slave_Listen+0x2e>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 11e:	88 3a       	cpi	r24, 0xA8	; 168
 120:	61 f0       	breq	.+24     	; 0x13a <I2C_Slave_Listen+0x32>
 122:	80 3b       	cpi	r24, 0xB0	; 176
 124:	61 f0       	breq	.+24     	; 0x13e <I2C_Slave_Listen+0x36>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 126:	80 37       	cpi	r24, 0x70	; 112
 128:	61 f0       	breq	.+24     	; 0x142 <I2C_Slave_Listen+0x3a>
 12a:	88 37       	cpi	r24, 0x78	; 120
 12c:	69 f7       	brne	.-38     	; 0x108 <I2C_Slave_Listen>
		return 2;								/* If yes then return 2 to indicate ack returned */
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
 142:	82 e0       	ldi	r24, 0x02	; 2
		else
		continue;								/* Else continue */
	}
}
 144:	08 95       	ret

Disassembly of section .text.I2C_Slave_Receive:

000000c2 <I2C_Slave_Receive>:
}

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
  c2:	84 ec       	ldi	r24, 0xC4	; 196
  c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
  c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  cc:	88 23       	and	r24, r24
  ce:	e4 f7       	brge	.-8      	; 0xc8 <I2C_Slave_Receive+0x6>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
  d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d4:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
  d6:	80 38       	cpi	r24, 0x80	; 128
  d8:	11 f0       	breq	.+4      	; 0xde <I2C_Slave_Receive+0x1c>
  da:	80 39       	cpi	r24, 0x90	; 144
  dc:	19 f4       	brne	.+6      	; 0xe4 <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
  de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  e2:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
  e4:	88 38       	cpi	r24, 0x88	; 136
  e6:	11 f0       	breq	.+4      	; 0xec <I2C_Slave_Receive+0x2a>
  e8:	88 39       	cpi	r24, 0x98	; 152
  ea:	19 f4       	brne	.+6      	; 0xf2 <I2C_Slave_Receive+0x30>
	return TWDR;								/* If yes then return received data */
  ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  f0:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
  f2:	80 3a       	cpi	r24, 0xA0	; 160
  f4:	39 f4       	brne	.+14     	; 0x104 <I2C_Slave_Receive+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
  f6:	ec eb       	ldi	r30, 0xBC	; 188
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	80 83       	st	Z, r24
		return -1;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 104:	8e ef       	ldi	r24, 0xFE	; 254
}
 106:	08 95       	ret

Disassembly of section .text.initIOports:

00000196 <initIOports>:

volatile uint8_t doorStatus = 0;

void initIOports(){
	// Set PD7 as input pin
	DDRD &= ~(1 << PD7);
 196:	8a b1       	in	r24, 0x0a	; 10
 198:	8f 77       	andi	r24, 0x7F	; 127
 19a:	8a b9       	out	0x0a, r24	; 10
	//Set PB1 as output pin
	DDRB |= (1 << PB1);
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	84 b9       	out	0x04, r24	; 4
 1a2:	08 95       	ret

Disassembly of section .text.main:

00000146 <main>:

int main(void) {
	int drapeau=0;
	int8_t instructionCode = 0;

	I2C_Slave_Init(SLAVE_ADDRESS);
 146:	8a e5       	ldi	r24, 0x5A	; 90
 148:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Slave_Init>
	initIOports();
 14c:	0e 94 cb 00 	call	0x196	; 0x196 <initIOports>
	

	while (1) {
		//pick door status on pin PD7
		doorStatus = PIND & (1 << PD7);
 150:	89 b1       	in	r24, 0x09	; 9
 152:	80 78       	andi	r24, 0x80	; 128
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		//put door status out on PB1
		if(doorStatus == 0){
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	81 11       	cpse	r24, r1
 15e:	04 c0       	rjmp	.+8      	; 0x168 <main+0x22>
			PORTB &= ~(1 << PB1); //debug led for tension divider tweaks
 160:	85 b1       	in	r24, 0x05	; 5
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	85 b9       	out	0x05, r24	; 5
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0x28>
		}
		else{
			PORTB |= (1 << PB1); 
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	85 b9       	out	0x05, r24	; 5
		}
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
 16e:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Slave_Listen>
 172:	81 11       	cpse	r24, r1
 174:	ed cf       	rjmp	.-38     	; 0x150 <main+0xa>
			case 0://receive
			{
				do
				{
	
					instructionCode = I2C_Slave_Receive();/* Receive data byte*/
 176:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
					if(instructionCode==0xAE) drapeau=1;  // vérifier si c'est 0xAE (code) alors autoriser la transmission
				} while (instructionCode != -1);			/* Receive until STOP/REPEATED START received */
 17a:	8f 3f       	cpi	r24, 0xFF	; 255
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x30>
 17e:	e8 cf       	rjmp	.-48     	; 0x150 <main+0xa>

Disassembly of section .text.__dummy_fini:

000001b8 <_fini>:
 1b8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ba <__funcs_on_exit>:
 1ba:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001bc <__simulator_exit>:
 1bc:	08 95       	ret

Disassembly of section .text.exit:

00000180 <exit>:
 180:	ec 01       	movw	r28, r24
 182:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__funcs_on_exit>
 186:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_fini>
 18a:	ce 01       	movw	r24, r28
 18c:	0e 94 de 00 	call	0x1bc	; 0x1bc <__simulator_exit>
 190:	ce 01       	movw	r24, r28
 192:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Exit>

Disassembly of section .text._Exit:

000001b4 <_Exit>:
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
