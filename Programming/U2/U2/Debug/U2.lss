
U2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf3  00000000  00000000  000002ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072c  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043f  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000254  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000189  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001e0  000001e0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 0000000c  000001d4  000001d4  00000248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Slave_Listen 0000003e  00000172  00000172  000001e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Slave_Transmit 00000050  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.I2C_Slave_Receive 00000046  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initIOports 0000000e  000001c6  000001c6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    0000005c  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  000001e8  000001e8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001ea  000001ea  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001ec  000001ec  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  000001b0  000001b0  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001e4  000001e4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001e0 <__bad_interrupt>:
 1e0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Slave_Init:

000001d4 <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 1d4:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 1d8:	84 ec       	ldi	r24, 0xC4	; 196
 1da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1de:	08 95       	ret

Disassembly of section .text.I2C_Slave_Listen:

00000172 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Slave_Listen>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17e:	88 7f       	andi	r24, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 180:	80 36       	cpi	r24, 0x60	; 96
 182:	61 f0       	breq	.+24     	; 0x19c <I2C_Slave_Listen+0x2a>
 184:	88 36       	cpi	r24, 0x68	; 104
 186:	61 f0       	breq	.+24     	; 0x1a0 <I2C_Slave_Listen+0x2e>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 188:	88 3a       	cpi	r24, 0xA8	; 168
 18a:	61 f0       	breq	.+24     	; 0x1a4 <I2C_Slave_Listen+0x32>
 18c:	80 3b       	cpi	r24, 0xB0	; 176
 18e:	61 f0       	breq	.+24     	; 0x1a8 <I2C_Slave_Listen+0x36>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 190:	80 37       	cpi	r24, 0x70	; 112
 192:	61 f0       	breq	.+24     	; 0x1ac <I2C_Slave_Listen+0x3a>
 194:	88 37       	cpi	r24, 0x78	; 120
 196:	69 f7       	brne	.-38     	; 0x172 <I2C_Slave_Listen>
		return 2;								/* If yes then return 2 to indicate ack returned */
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	08 95       	ret
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
 1ac:	82 e0       	ldi	r24, 0x02	; 2
		else
		continue;								/* Else continue */
	}
}
 1ae:	08 95       	ret

Disassembly of section .text.I2C_Slave_Transmit:

000000dc <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
  dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
  e0:	84 ec       	ldi	r24, 0xC4	; 196
  e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
  e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ea:	88 23       	and	r24, r24
  ec:	e4 f7       	brge	.-8      	; 0xe6 <I2C_Slave_Transmit+0xa>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
  ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f2:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
  f4:	80 3a       	cpi	r24, 0xA0	; 160
  f6:	39 f4       	brne	.+14     	; 0x106 <I2C_Slave_Transmit+0x2a>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
		return -1;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	08 95       	ret
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
 106:	88 3b       	cpi	r24, 0xB8	; 184
 108:	69 f0       	breq	.+26     	; 0x124 <I2C_Slave_Transmit+0x48>
		return 0;									/* If yes then return 0 */
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
 10a:	80 3c       	cpi	r24, 0xC0	; 192
 10c:	39 f4       	brne	.+14     	; 0x11c <I2C_Slave_Transmit+0x40>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
		return -2;
 118:	8e ef       	ldi	r24, 0xFE	; 254
 11a:	08 95       	ret
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
 11c:	88 3c       	cpi	r24, 0xC8	; 200
 11e:	21 f4       	brne	.+8      	; 0x128 <I2C_Slave_Transmit+0x4c>
	return -3;									/* If yes then return -3 */
 120:	8d ef       	ldi	r24, 0xFD	; 253
 122:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
		return -1;
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
		return 0;									/* If yes then return 0 */
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret
		return -2;
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
 128:	8c ef       	ldi	r24, 0xFC	; 252
}
 12a:	08 95       	ret

Disassembly of section .text.I2C_Slave_Receive:

0000012c <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 12c:	84 ec       	ldi	r24, 0xC4	; 196
 12e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 132:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 136:	88 23       	and	r24, r24
 138:	e4 f7       	brge	.-8      	; 0x132 <I2C_Slave_Receive+0x6>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 13a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 13e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 140:	80 38       	cpi	r24, 0x80	; 128
 142:	11 f0       	breq	.+4      	; 0x148 <I2C_Slave_Receive+0x1c>
 144:	80 39       	cpi	r24, 0x90	; 144
 146:	19 f4       	brne	.+6      	; 0x14e <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
 148:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 14c:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 14e:	88 38       	cpi	r24, 0x88	; 136
 150:	11 f0       	breq	.+4      	; 0x156 <I2C_Slave_Receive+0x2a>
 152:	88 39       	cpi	r24, 0x98	; 152
 154:	19 f4       	brne	.+6      	; 0x15c <I2C_Slave_Receive+0x30>
	return TWDR;								/* If yes then return received data */
 156:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 15a:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 15c:	80 3a       	cpi	r24, 0xA0	; 160
 15e:	39 f4       	brne	.+14     	; 0x16e <I2C_Slave_Receive+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 68       	ori	r24, 0x80	; 128
 168:	80 83       	st	Z, r24
		return -1;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 16e:	8e ef       	ldi	r24, 0xFE	; 254
}
 170:	08 95       	ret

Disassembly of section .text.initIOports:

000001c6 <initIOports>:

#define SLAVE_ADDRESS 0x5A//addresse i2c de U2

void initIOports(){
	// Set PD7 as input pin
	DDRD &= ~(1 << PD6);
 1c6:	8a b1       	in	r24, 0x0a	; 10
 1c8:	8f 7b       	andi	r24, 0xBF	; 191
 1ca:	8a b9       	out	0x0a, r24	; 10
	//Set PB1 as output pin
	DDRB |= (1 << PB1);
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	84 b9       	out	0x04, r24	; 4
 1d2:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
int main(void) {
	int drapeau=0;
	uint8_t doorStatus =0;
	int8_t instructionCode = 0;

	I2C_Slave_Init(SLAVE_ADDRESS);
  80:	8a e5       	ldi	r24, 0x5A	; 90
  82:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <I2C_Slave_Init>
	initIOports();
  86:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <initIOports>
	//Set PB1 as output pin
	DDRB |= (1 << PB1);
}

int main(void) {
	int drapeau=0;
  8a:	00 e0       	ldi	r16, 0x00	; 0
  8c:	10 e0       	ldi	r17, 0x00	; 0
	

	while (1) {
		//read pin PD6
		doorStatus =0;
		doorStatus = PIND & (1 << PD6);
  8e:	89 b1       	in	r24, 0x09	; 9
		//put door status out on PB1
		if(doorStatus == 0){
  90:	c8 2f       	mov	r28, r24
  92:	c0 74       	andi	r28, 0x40	; 64
  94:	86 fd       	sbrc	r24, 6
  96:	04 c0       	rjmp	.+8      	; 0xa0 <main+0x20>
			PORTB &= ~(1 << PB1); //debug led for tension divider tweaks
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <main+0x26>
		}
		else{
			PORTB |= (1 << PB1); 
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	85 b9       	out	0x05, r24	; 5
		}
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  a6:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Slave_Listen>
  aa:	88 23       	and	r24, r24
  ac:	19 f0       	breq	.+6      	; 0xb4 <main+0x34>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	51 f0       	breq	.+20     	; 0xc6 <main+0x46>
  b2:	ed cf       	rjmp	.-38     	; 0x8e <main+0xe>
			case 0://receive
			{
				do
				{
	
					instructionCode = I2C_Slave_Receive();/* Receive data byte*/
  b4:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Slave_Receive>
					if(instructionCode==0x25)drapeau=1;  // vérifier si c'est 0xAE (code) alors autoriser la transmission
  b8:	85 32       	cpi	r24, 0x25	; 37
  ba:	11 f4       	brne	.+4      	; 0xc0 <main+0x40>
  bc:	01 e0       	ldi	r16, 0x01	; 1
  be:	10 e0       	ldi	r17, 0x00	; 0
				} while (instructionCode != -1);			/* Receive until STOP/REPEATED START received */
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	c1 f7       	brne	.-16     	; 0xb4 <main+0x34>
  c4:	e4 cf       	rjmp	.-56     	; 0x8e <main+0xe>
			}
			
			case 1://transmit
			{
				int8_t Ack_status;
		        if(drapeau==1){ //si bon code envoi l'état de PB0
  c6:	01 30       	cpi	r16, 0x01	; 1
  c8:	11 05       	cpc	r17, r1
  ca:	09 f7       	brne	.-62     	; 0x8e <main+0xe>
				do
					{   
						Ack_status = I2C_Slave_Transmit(doorStatus);	/* Send data byte */
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Slave_Transmit>
				
					} while (Ack_status == 0);		/* Send until Acknowledgment is received */
  d2:	88 23       	and	r24, r24
  d4:	d9 f3       	breq	.-10     	; 0xcc <main+0x4c>
				
					drapeau=0;//reset pour lire une autre donnée
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	d9 cf       	rjmp	.-78     	; 0x8e <main+0xe>

Disassembly of section .text.__dummy_fini:

000001e8 <_fini>:
 1e8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ea <__funcs_on_exit>:
 1ea:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ec <__simulator_exit>:
 1ec:	08 95       	ret

Disassembly of section .text.exit:

000001b0 <exit>:
 1b0:	ec 01       	movw	r28, r24
 1b2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__funcs_on_exit>
 1b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fini>
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__simulator_exit>
 1c0:	ce 01       	movw	r24, r28
 1c2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Exit>

Disassembly of section .text._Exit:

000001e4 <_Exit>:
 1e4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
