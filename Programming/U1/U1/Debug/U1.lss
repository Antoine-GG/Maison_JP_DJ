
U1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cdd  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000716  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000174  00000000  00000000  00001d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 0000000c  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Slave_Listen 0000003e  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Slave_Receive 00000046  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initIOports 0000000e  00000162  00000162  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000048  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  00000184  00000184  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000188  00000188  000001fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000014c  0000014c  000001c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000180  00000180  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
   8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
   c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  10:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  38:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  4c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
  64:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000017c <__bad_interrupt>:
 17c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.I2C_Slave_Init:

00000170 <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 170:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7fc0ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 174:	84 ec       	ldi	r24, 0xC4	; 196
 176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 17a:	08 95       	ret

Disassembly of section .text.I2C_Slave_Listen:

0000010e <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 10e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
 112:	88 23       	and	r24, r24
 114:	e4 f7       	brge	.-8      	; 0x10e <I2C_Slave_Listen>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 116:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 11a:	88 7f       	andi	r24, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 11c:	80 36       	cpi	r24, 0x60	; 96
 11e:	61 f0       	breq	.+24     	; 0x138 <I2C_Slave_Listen+0x2a>
 120:	88 36       	cpi	r24, 0x68	; 104
 122:	61 f0       	breq	.+24     	; 0x13c <I2C_Slave_Listen+0x2e>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 124:	88 3a       	cpi	r24, 0xA8	; 168
 126:	61 f0       	breq	.+24     	; 0x140 <I2C_Slave_Listen+0x32>
 128:	80 3b       	cpi	r24, 0xB0	; 176
 12a:	61 f0       	breq	.+24     	; 0x144 <I2C_Slave_Listen+0x36>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 12c:	80 37       	cpi	r24, 0x70	; 112
 12e:	61 f0       	breq	.+24     	; 0x148 <I2C_Slave_Listen+0x3a>
 130:	88 37       	cpi	r24, 0x78	; 120
 132:	69 f7       	brne	.-38     	; 0x10e <I2C_Slave_Listen>
		return 2;								/* If yes then return 2 to indicate ack returned */
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
 148:	82 e0       	ldi	r24, 0x02	; 2
		else
		continue;								/* Else continue */
	}
}
 14a:	08 95       	ret

Disassembly of section .text.I2C_Slave_Receive:

000000c8 <I2C_Slave_Receive>:
}

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
  c8:	84 ec       	ldi	r24, 0xC4	; 196
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
  ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
  d2:	88 23       	and	r24, r24
  d4:	e4 f7       	brge	.-8      	; 0xce <I2C_Slave_Receive+0x6>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
  d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
  da:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
  dc:	80 38       	cpi	r24, 0x80	; 128
  de:	11 f0       	breq	.+4      	; 0xe4 <I2C_Slave_Receive+0x1c>
  e0:	80 39       	cpi	r24, 0x90	; 144
  e2:	19 f4       	brne	.+6      	; 0xea <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
  e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
  e8:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
  ea:	88 38       	cpi	r24, 0x88	; 136
  ec:	11 f0       	breq	.+4      	; 0xf2 <I2C_Slave_Receive+0x2a>
  ee:	88 39       	cpi	r24, 0x98	; 152
  f0:	19 f4       	brne	.+6      	; 0xf8 <I2C_Slave_Receive+0x30>
	return TWDR;								/* If yes then return received data */
  f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
  f6:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
  f8:	80 3a       	cpi	r24, 0xA0	; 160
  fa:	39 f4       	brne	.+14     	; 0x10a <I2C_Slave_Receive+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
		return -1;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 10a:	8e ef       	ldi	r24, 0xFE	; 254
}
 10c:	08 95       	ret

Disassembly of section .text.initIOports:

00000162 <initIOports>:

#define SLAVE_ADDRESS 0x3C//addresse i2c de U2

void initIOports(){
	// Set PD7 and PD6 as input pin
	DDRD &= ~((1 << PD7)|(1 << PD6));
 162:	8a b1       	in	r24, 0x0a	; 10
 164:	8f 73       	andi	r24, 0x3F	; 63
 166:	8a b9       	out	0x0a, r24	; 10
	//Set PB1 and PB2 as output pins
	DDRB |= ((1 << PB1)|(1 << PB2));
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	86 60       	ori	r24, 0x06	; 6
 16c:	84 b9       	out	0x04, r24	; 4
 16e:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
}

int main(void) {
	initIOports();
  80:	0e 94 b1 00 	call	0x162	; 0x162 <initIOports>
	int8_t instructionCode = 0;
	uint8_t window1 = 0;
	uint8_t window2 = 0;
	uint8_t windows = 0;

	I2C_Slave_Init(SLAVE_ADDRESS);
  84:	8c e3       	ldi	r24, 0x3C	; 60
  86:	0e 94 b8 00 	call	0x170	; 0x170 <I2C_Slave_Init>
	initIOports();
  8a:	0e 94 b1 00 	call	0x162	; 0x162 <initIOports>
	

	while (1) {
		//pick door status on pin PD7
		window2 = PIND & (1 << PD7);
  8e:	89 b1       	in	r24, 0x09	; 9
  90:	80 78       	andi	r24, 0x80	; 128
		//put door status out on PB1
		window1 = PIND & (1 << PD6);

		if(window1 == 0){
  92:	4e 99       	sbic	0x09, 6	; 9
  94:	04 c0       	rjmp	.+8      	; 0x9e <main+0x1e>
			PORTB &= ~(1 << PB1); //debug led for tension divider tweaks
  96:	95 b1       	in	r25, 0x05	; 5
  98:	9d 7f       	andi	r25, 0xFD	; 253
  9a:	95 b9       	out	0x05, r25	; 5
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <main+0x24>
		}
		else{
			PORTB |= (1 << PB1); 
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	92 60       	ori	r25, 0x02	; 2
  a2:	95 b9       	out	0x05, r25	; 5
		}
		if(window2 == 0){
  a4:	81 11       	cpse	r24, r1
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <main+0x30>
			PORTB &= ~(1 << PB2); //debug led for tension divider tweaks
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	85 b9       	out	0x05, r24	; 5
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x36>
		}
		else{
			PORTB |= (1 << PB2); 
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	85 b9       	out	0x05, r24	; 5
		}
		windows = (window1 << 1) | window2;
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  b6:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Slave_Listen>
  ba:	81 11       	cpse	r24, r1
  bc:	e8 cf       	rjmp	.-48     	; 0x8e <main+0xe>
			case 0://receive
			{
				do
				{
	
					instructionCode = I2C_Slave_Receive();/* Receive data byte*/
  be:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_Slave_Receive>
					if(instructionCode==0xAE) drapeau=1;  // vérifier si c'est 0xAE (code) alors autoriser la transmission
				} while (instructionCode != -1);			/* Receive until STOP/REPEATED START received */
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	e3 cf       	rjmp	.-58     	; 0x8e <main+0xe>

Disassembly of section .text.__dummy_fini:

00000184 <_fini>:
 184:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000186 <__funcs_on_exit>:
 186:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000188 <__simulator_exit>:
 188:	08 95       	ret

Disassembly of section .text.exit:

0000014c <exit>:
 14c:	ec 01       	movw	r28, r24
 14e:	0e 94 c3 00 	call	0x186	; 0x186 <__funcs_on_exit>
 152:	0e 94 c2 00 	call	0x184	; 0x184 <_fini>
 156:	ce 01       	movw	r24, r28
 158:	0e 94 c4 00 	call	0x188	; 0x188 <__simulator_exit>
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 c0 00 	call	0x180	; 0x180 <_Exit>

Disassembly of section .text._Exit:

00000180 <_Exit>:
 180:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
