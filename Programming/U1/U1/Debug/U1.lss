
U1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002ff  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbf  00000000  00000000  000003a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000790  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c5  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000022e  0000022e  000002c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initI2Cslave 0000001c  000001ee  000001ee  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.initUSART 0000002a  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.transmitByte 0000000e  00000220  00000220  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_24 0000008c  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initIOports 00000026  000001c8  000001c8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000050  0000014e  0000014e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.windows  00000001  00800100  00800100  000002d0  2**0
                  ALLOC
 21 .bss.variableValue 00000001  00800101  00800101  000002d0  2**0
                  ALLOC
 22 .bss.window2  00000001  00800102  00800102  000002d0  2**0
                  ALLOC
 23 .bss.window1  00000001  00800103  00800103  000002d0  2**0
                  ALLOC
 24 .text.__dummy_fini 00000002  00000236  00000236  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  00000238  00000238  000002cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  0000023a  0000023a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  0000020a  0000020a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  00000232  00000232  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   8:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
   c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  10:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  14:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  1c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  20:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  24:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  28:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  30:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  38:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  3c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  40:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  44:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  48:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  4c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  50:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  54:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  58:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  5c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  ba:	0c 94 05 01 	jmp	0x20a	; 0x20a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000022e <__bad_interrupt>:
 22e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.initI2Cslave:

000001ee <initI2Cslave>:
volatile uint8_t variableValue = 0;
uint8_t windows =0;

void initI2Cslave(void) {
	//mode slave
	cli();
 1ee:	f8 94       	cli
	TWAR = (SLAVE_ADDRESS << 1); //set l'adresse slave
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWBR = 2;                               /* set bit rate, */
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	/* 8MHz / (16+2*TWBR*1) ~= 100kHz */
	TWCR |= (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);; // Enable I2C, enable ACK, enable interrupt;
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	85 6c       	ori	r24, 0xC5	; 197
 204:	80 83       	st	Z, r24
	sei();  // Enable global interrupts
 206:	78 94       	sei
 208:	08 95       	ret

Disassembly of section .text.initUSART:

0000019e <initUSART>:
}


//Were using UART for debug
void initUSART(void) {
	UBRR0H = 0;              /* baud rate  */
 19e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x0C;           /* 9600 */
 1a2:	8c e0       	ldi	r24, 0x0C	; 12
 1a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0A |= (1 << U2X0);      /* mode asynchrone double vitesse */
 1a8:	e0 ec       	ldi	r30, 0xC0	; 192
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0); //| (1 << RXEN0);    /* Activer emission et reception  USART */
 1b2:	e1 ec       	ldi	r30, 0xC1	; 193
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
 1bc:	e2 ec       	ldi	r30, 0xC2	; 194
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	86 60       	ori	r24, 0x06	; 6
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

Disassembly of section .text.transmitByte:

00000220 <transmitByte>:
}
//transmettre un caractère
void transmitByte(uint8_t data) {
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Attendre que le buffer de transmission soit vide */
 220:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 224:	95 ff       	sbrs	r25, 5
 226:	fc cf       	rjmp	.-8      	; 0x220 <transmitByte>
	UDR0 = data;                      /* envoyer la donnée */
 228:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 22c:	08 95       	ret

Disassembly of section .text.__vector_24:

000000c2 <__vector_24>:
}

void i2cSend(uint8_t data) {
	TWDR = data;
	TWCR = (1 <<TWINT) | (1 <<TWEN);                  /* init and enable */
	i2cWaitForComplete();
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	cf 93       	push	r28
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
  e6:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ea:	c8 7f       	andi	r28, 0xF8	; 248
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 10 01 	call	0x220	; 0x220 <transmitByte>
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	c0 3a       	cpi	r28, 0xA0	; 160
  fa:	91 f0       	breq	.+36     	; 0x120 <__vector_24+0x5e>
  fc:	28 f4       	brcc	.+10     	; 0x108 <__vector_24+0x46>
  fe:	c0 36       	cpi	r28, 0x60	; 96
 100:	79 f0       	breq	.+30     	; 0x120 <__vector_24+0x5e>
 102:	c0 38       	cpi	r28, 0x80	; 128
 104:	51 f4       	brne	.+20     	; 0x11a <__vector_24+0x58>
 106:	0c c0       	rjmp	.+24     	; 0x120 <__vector_24+0x5e>
 108:	c8 3a       	cpi	r28, 0xA8	; 168
 10a:	11 f0       	breq	.+4      	; 0x110 <__vector_24+0x4e>
 10c:	c8 3b       	cpi	r28, 0xB8	; 184
 10e:	29 f4       	brne	.+10     	; 0x11a <__vector_24+0x58>
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <variableValue>
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 118:	03 c0       	rjmp	.+6      	; 0x120 <__vector_24+0x5e>
 11a:	85 ec       	ldi	r24, 0xC5	; 197
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 68       	ori	r24, 0x80	; 128
 128:	80 83       	st	Z, r24
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	cf 91       	pop	r28
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

Disassembly of section .text.initIOports:

000001c8 <initIOports>:
}

void initIOports(){

	// Set PC4 and PC5 as output pin for debug
	DDRC |= (1 << PC3);
 1c8:	87 b1       	in	r24, 0x07	; 7
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC2);
 1ce:	87 b1       	in	r24, 0x07	; 7
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC1);
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1 << PB0);
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	84 b9       	out	0x04, r24	; 4

	// Set PD6 and PD7 as input pins
	DDRD &= ~(1 << PD6);
 1e0:	8a b1       	in	r24, 0x0a	; 10
 1e2:	8f 7b       	andi	r24, 0xBF	; 191
 1e4:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD7);
 1e6:	8a b1       	in	r24, 0x0a	; 10
 1e8:	8f 77       	andi	r24, 0x7F	; 127
 1ea:	8a b9       	out	0x0a, r24	; 10
 1ec:	08 95       	ret

Disassembly of section .text.main:

0000014e <main>:
}

void i2cSend(uint8_t data) {
	TWDR = data;
	TWCR = (1 <<TWINT) | (1 <<TWEN);                  /* init and enable */
	i2cWaitForComplete();
 14e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <initI2Cslave>
 152:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <initIOports>
 156:	0e 94 cf 00 	call	0x19e	; 0x19e <initUSART>
 15a:	89 b1       	in	r24, 0x09	; 9
 15c:	80 74       	andi	r24, 0x40	; 64
 15e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <window1>
 162:	89 b1       	in	r24, 0x09	; 9
 164:	80 78       	andi	r24, 0x80	; 128
 166:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <window2>
 16a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <window1>
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 172:	28 2b       	or	r18, r24
 174:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 178:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <window2>
 17c:	89 2f       	mov	r24, r25
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	82 2b       	or	r24, r18
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 18a:	87 ea       	ldi	r24, 0xA7	; 167
 18c:	91 e6       	ldi	r25, 0x61	; 97
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <main+0x40>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x46>
 194:	00 00       	nop
 196:	81 e3       	ldi	r24, 0x31	; 49
 198:	0e 94 10 01 	call	0x220	; 0x220 <transmitByte>
 19c:	de cf       	rjmp	.-68     	; 0x15a <main+0xc>

Disassembly of section .text.__dummy_fini:

00000236 <_fini>:
 236:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000238 <__funcs_on_exit>:
 238:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000023a <__simulator_exit>:
 23a:	08 95       	ret

Disassembly of section .text.exit:

0000020a <exit>:
 20a:	ec 01       	movw	r28, r24
 20c:	0e 94 1c 01 	call	0x238	; 0x238 <__funcs_on_exit>
 210:	0e 94 1b 01 	call	0x236	; 0x236 <_fini>
 214:	ce 01       	movw	r24, r28
 216:	0e 94 1d 01 	call	0x23a	; 0x23a <__simulator_exit>
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 19 01 	call	0x232	; 0x232 <_Exit>

Disassembly of section .text._Exit:

00000232 <_Exit>:
 232:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
