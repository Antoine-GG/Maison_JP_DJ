
U1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ca4  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044f  00000000  00000000  00001717  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000241  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000136  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000206  00000206  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.I2C_Slave_Init 0000000c  000001fa  000001fa  0000028e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.I2C_Slave_Listen 0000003e  00000180  00000180  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.I2C_Slave_Receive 00000046  0000013a  0000013a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.initIOports 00000026  000001be  000001be  00000252  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000078  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss.windows  00000001  00800100  00800100  000002a8  2**0
                  ALLOC
 20 .bss.window2  00000001  00800101  00800101  000002a8  2**0
                  ALLOC
 21 .bss.window1  00000001  00800102  00800102  000002a8  2**0
                  ALLOC
 22 .text.__dummy_fini 00000002  0000020e  0000020e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  00000210  00000210  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  00000212  00000212  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  000001e4  000001e4  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  0000020a  0000020a  0000029e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
   8:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
   c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  10:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  14:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  18:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  1c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  20:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  24:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  28:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  2c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  30:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  34:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  38:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  3c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  40:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  44:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  48:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  4c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  50:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  54:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  58:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  60:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>
  64:	0c 94 03 01 	jmp	0x206	; 0x206 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 03       	mulsu	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000206 <__bad_interrupt>:
 206:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.I2C_Slave_Init:

000001fa <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
 1fa:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
 1fe:	84 ec       	ldi	r24, 0xC4	; 196
 200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 204:	08 95       	ret

Disassembly of section .text.I2C_Slave_Listen:

00000180 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 184:	88 23       	and	r24, r24
 186:	e4 f7       	brge	.-8      	; 0x180 <I2C_Slave_Listen>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18c:	88 7f       	andi	r24, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 18e:	80 36       	cpi	r24, 0x60	; 96
 190:	61 f0       	breq	.+24     	; 0x1aa <I2C_Slave_Listen+0x2a>
 192:	88 36       	cpi	r24, 0x68	; 104
 194:	61 f0       	breq	.+24     	; 0x1ae <I2C_Slave_Listen+0x2e>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 196:	88 3a       	cpi	r24, 0xA8	; 168
 198:	61 f0       	breq	.+24     	; 0x1b2 <I2C_Slave_Listen+0x32>
 19a:	80 3b       	cpi	r24, 0xB0	; 176
 19c:	61 f0       	breq	.+24     	; 0x1b6 <I2C_Slave_Listen+0x36>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 19e:	80 37       	cpi	r24, 0x70	; 112
 1a0:	61 f0       	breq	.+24     	; 0x1ba <I2C_Slave_Listen+0x3a>
 1a2:	88 37       	cpi	r24, 0x78	; 120
 1a4:	69 f7       	brne	.-38     	; 0x180 <I2C_Slave_Listen>
		return 2;								/* If yes then return 2 to indicate ack returned */
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
 1ba:	82 e0       	ldi	r24, 0x02	; 2
		else
		continue;								/* Else continue */
	}
}
 1bc:	08 95       	ret

Disassembly of section .text.I2C_Slave_Receive:

0000013a <I2C_Slave_Receive>:
}

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 13a:	84 ec       	ldi	r24, 0xC4	; 196
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 140:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 144:	88 23       	and	r24, r24
 146:	e4 f7       	brge	.-8      	; 0x140 <I2C_Slave_Receive+0x6>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 148:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 14c:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 14e:	80 38       	cpi	r24, 0x80	; 128
 150:	11 f0       	breq	.+4      	; 0x156 <I2C_Slave_Receive+0x1c>
 152:	80 39       	cpi	r24, 0x90	; 144
 154:	19 f4       	brne	.+6      	; 0x15c <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
 156:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 15a:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 15c:	88 38       	cpi	r24, 0x88	; 136
 15e:	11 f0       	breq	.+4      	; 0x164 <I2C_Slave_Receive+0x2a>
 160:	88 39       	cpi	r24, 0x98	; 152
 162:	19 f4       	brne	.+6      	; 0x16a <I2C_Slave_Receive+0x30>
	return TWDR;								/* If yes then return received data */
 164:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 168:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 16a:	80 3a       	cpi	r24, 0xA0	; 160
 16c:	39 f4       	brne	.+14     	; 0x17c <I2C_Slave_Receive+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 16e:	ec eb       	ldi	r30, 0xBC	; 188
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 68       	ori	r24, 0x80	; 128
 176:	80 83       	st	Z, r24
		return -1;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 17c:	8e ef       	ldi	r24, 0xFE	; 254
}
 17e:	08 95       	ret

Disassembly of section .text.initIOports:

000001be <initIOports>:
volatile uint8_t window2 = 0;
uint8_t windows = 0;

void initIOports(){
	// Set PD6 and PD7 as input pins
	DDRD &= ~(1 << PD6);
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	8f 7b       	andi	r24, 0xBF	; 191
 1c2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << PD7);
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	8f 77       	andi	r24, 0x7F	; 127
 1c8:	8a b9       	out	0x0a, r24	; 10
	//set PD6 and PD7 as pull up
	PORTD |= (1 << PD6);
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << PD7);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	8b b9       	out	0x0b, r24	; 11
	//Set PB1 and PB2 as output pin
	DDRB |= (1 << PB1);
 1d6:	84 b1       	in	r24, 0x04	; 4
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB2);
 1dc:	84 b1       	in	r24, 0x04	; 4
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	84 b9       	out	0x04, r24	; 4
 1e2:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:

int main(void) {
	int drapeau=0;
	int8_t instructionCode = 0;

	I2C_Slave_Init(SLAVE_ADDRESS);
  c2:	8c e3       	ldi	r24, 0x3C	; 60
  c4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <I2C_Slave_Init>
	initIOports();	
  c8:	0e 94 df 00 	call	0x1be	; 0x1be <initIOports>

	while (1) {
		//pick window states and concat them to send
		//read PD6 and PD7
		window1 = PIND & (1 << PD6);
  cc:	89 b1       	in	r24, 0x09	; 9
  ce:	80 74       	andi	r24, 0x40	; 64
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <window1>

		//set PB2 as window1
		if(window1 == 1){
  d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <window1>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	21 f4       	brne	.+8      	; 0xe4 <main+0x22>
			PORTB &= ~(1 << PB2); //debug led for tension divider tweaks
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x28>
		}
		else{
			PORTB |= (1 << PB2); 
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	84 60       	ori	r24, 0x04	; 4
  e8:	85 b9       	out	0x05, r24	; 5
		}	
		window2 = PIND & (1 << PD7);
  ea:	89 b1       	in	r24, 0x09	; 9
  ec:	80 78       	andi	r24, 0x80	; 128
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <window2>
		//set PB1 as window2
		if(window2 == 1){
  f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <window2>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	21 f4       	brne	.+8      	; 0x102 <main+0x40>
			PORTB &= ~(1 << PB1); //debug led for tension divider tweaks
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	8d 7f       	andi	r24, 0xFD	; 253
  fe:	85 b9       	out	0x05, r24	; 5
 100:	03 c0       	rjmp	.+6      	; 0x108 <main+0x46>
		}
		else{
			PORTB |= (1 << PB1); 
 102:	85 b1       	in	r24, 0x05	; 5
 104:	82 60       	ori	r24, 0x02	; 2
 106:	85 b9       	out	0x05, r24	; 5
		}
		windows |= (window1 << 0);
 108:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <window1>
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	28 2b       	or	r18, r24
 112:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		windows |= (window2 << 1);
 116:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <window2>
 11a:	89 2f       	mov	r24, r25
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 2b       	or	r24, r18
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
 128:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_Slave_Listen>
 12c:	81 11       	cpse	r24, r1
 12e:	ce cf       	rjmp	.-100    	; 0xcc <main+0xa>
			case 0://receive
			{
				do
				{
	
					instructionCode = I2C_Slave_Receive();/* Receive data byte*/
 130:	0e 94 9d 00 	call	0x13a	; 0x13a <I2C_Slave_Receive>
					if(instructionCode==0xAE) drapeau=1;  // vérifier si c'est 0xAE (code) alors autoriser la transmission
				} while (instructionCode != -1);			/* Receive until STOP/REPEATED START received */
 134:	8f 3f       	cpi	r24, 0xFF	; 255
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x6e>
 138:	c9 cf       	rjmp	.-110    	; 0xcc <main+0xa>

Disassembly of section .text.__dummy_fini:

0000020e <_fini>:
 20e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000210 <__funcs_on_exit>:
 210:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000212 <__simulator_exit>:
 212:	08 95       	ret

Disassembly of section .text.exit:

000001e4 <exit>:
 1e4:	ec 01       	movw	r28, r24
 1e6:	0e 94 08 01 	call	0x210	; 0x210 <__funcs_on_exit>
 1ea:	0e 94 07 01 	call	0x20e	; 0x20e <_fini>
 1ee:	ce 01       	movw	r24, r28
 1f0:	0e 94 09 01 	call	0x212	; 0x212 <__simulator_exit>
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 05 01 	call	0x20a	; 0x20a <_Exit>

Disassembly of section .text._Exit:

0000020a <_Exit>:
 20a:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
