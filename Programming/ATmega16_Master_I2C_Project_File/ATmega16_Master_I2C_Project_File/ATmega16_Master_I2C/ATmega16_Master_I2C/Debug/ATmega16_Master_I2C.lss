
ATmega16_Master_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002bc  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007ef  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003d8  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004c1  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000174  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002b3  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000050f  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <string.h>							/* Include string header file */
#include "I2C_Master_H_file.h"				/* Include I2C header file */
#include "LCD_16x2_H_file.h"				/* Include LCD header file */

int main(void)
{
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	2a 97       	sbiw	r28, 0x0a	; 10
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
	char array[10] = "test";				/* Declare array to be print */
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	e0 e6       	ldi	r30, 0x60	; 96
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	de 01       	movw	r26, r28
  aa:	11 96       	adiw	r26, 0x01	; 1
  ac:	01 90       	ld	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	8a 95       	dec	r24
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2a>
  b4:	fe 01       	movw	r30, r28
  b6:	36 96       	adiw	r30, 0x06	; 6
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	df 01       	movw	r26, r30
  bc:	1d 92       	st	X+, r1
  be:	8a 95       	dec	r24
  c0:	e9 f7       	brne	.-6      	; 0xbc <main+0x3a>
	LCD_Init();								/* Initialize LCD */
  c2:	0e 94 46 01 	call	0x28c	; 0x28c <LCD_Init>
	I2C_Init();								/* Initialize I2C */
  c6:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Init>
	I2C_Start(0xA0);						/* Start I2C with device write address */
  ca:	80 ea       	ldi	r24, 0xA0	; 160
  cc:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Start>
	I2C_Write(0x00);						/* Write start memory address for data write */
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Write>
  d6:	fe 01       	movw	r30, r28
  d8:	31 96       	adiw	r30, 0x01	; 1
  da:	6f 01       	movw	r12, r30
	for (int i = 0; i<strlen(array); i++)	/* Write array data */
  dc:	00 e0       	ldi	r16, 0x00	; 0
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	7f 01       	movw	r14, r30
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <main+0x70>
		{
			I2C_Write(array[i]); 
  e4:	d6 01       	movw	r26, r12
  e6:	8d 91       	ld	r24, X+
  e8:	6d 01       	movw	r12, r26
  ea:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Write>
	char array[10] = "test";				/* Declare array to be print */
	LCD_Init();								/* Initialize LCD */
	I2C_Init();								/* Initialize I2C */
	I2C_Start(0xA0);						/* Start I2C with device write address */
	I2C_Write(0x00);						/* Write start memory address for data write */
	for (int i = 0; i<strlen(array); i++)	/* Write array data */
  ee:	0f 5f       	subi	r16, 0xFF	; 255
  f0:	1f 4f       	sbci	r17, 0xFF	; 255
  f2:	f7 01       	movw	r30, r14
  f4:	01 90       	ld	r0, Z+
  f6:	00 20       	and	r0, r0
  f8:	e9 f7       	brne	.-6      	; 0xf4 <main+0x72>
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	ee 19       	sub	r30, r14
  fe:	ff 09       	sbc	r31, r15
 100:	0e 17       	cp	r16, r30
 102:	1f 07       	cpc	r17, r31
 104:	78 f3       	brcs	.-34     	; 0xe4 <main+0x62>
		{
			I2C_Write(array[i]); 
		}
	I2C_Stop();								/* Stop I2C */
 106:	0e 94 fd 00 	call	0x1fa	; 0x1fa <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	ef e1       	ldi	r30, 0x1F	; 31
 10c:	fe e4       	ldi	r31, 0x4E	; 78
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x8c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x92>
 114:	00 00       	nop
	_delay_ms(10);
	I2C_Start(0xA0);						/* Start I2C with device write address */
 116:	80 ea       	ldi	r24, 0xA0	; 160
 118:	0e 94 c3 00 	call	0x186	; 0x186 <I2C_Start>
	I2C_Write(0x00);						/* Write start memory address */
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 03 01 	call	0x206	; 0x206 <I2C_Write>
	I2C_Repeated_Start(0xA1);				/* Repeat start I2C with device read address */
 122:	81 ea       	ldi	r24, 0xA1	; 161
 124:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Repeated_Start>
	for (int i = 0; i<strlen(array); i++)	/* Read data with acknowledgment(ack) */
 128:	00 e0       	ldi	r16, 0x00	; 0
 12a:	10 e0       	ldi	r17, 0x00	; 0
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	7c 01       	movw	r14, r24
 132:	06 c0       	rjmp	.+12     	; 0x140 <main+0xbe>
		{
			LCD_Char(I2C_Read_Ack());
 134:	0e 94 15 01 	call	0x22a	; 0x22a <I2C_Read_Ack>
 138:	0e 94 34 01 	call	0x268	; 0x268 <LCD_Char>
	I2C_Stop();								/* Stop I2C */
	_delay_ms(10);
	I2C_Start(0xA0);						/* Start I2C with device write address */
	I2C_Write(0x00);						/* Write start memory address */
	I2C_Repeated_Start(0xA1);				/* Repeat start I2C with device read address */
	for (int i = 0; i<strlen(array); i++)	/* Read data with acknowledgment(ack) */
 13c:	0f 5f       	subi	r16, 0xFF	; 255
 13e:	1f 4f       	sbci	r17, 0xFF	; 255
 140:	f7 01       	movw	r30, r14
 142:	01 90       	ld	r0, Z+
 144:	00 20       	and	r0, r0
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0xc0>
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	ee 19       	sub	r30, r14
 14c:	ff 09       	sbc	r31, r15
 14e:	0e 17       	cp	r16, r30
 150:	1f 07       	cpc	r17, r31
 152:	80 f3       	brcs	.-32     	; 0x134 <main+0xb2>
		{
			LCD_Char(I2C_Read_Ack());
		}
	I2C_Read_Nack();						/* Read flush data with nack */
 154:	0e 94 1c 01 	call	0x238	; 0x238 <I2C_Read_Nack>
	I2C_Stop();								/* Stop I2C */
 158:	0e 94 fd 00 	call	0x1fa	; 0x1fa <I2C_Stop>
	return 0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	2a 96       	adiw	r28, 0x0a	; 10
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	cf 90       	pop	r12
 17c:	08 95       	ret

0000017e <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 17e:	11 b8       	out	0x01, r1	; 1
 180:	80 e2       	ldi	r24, 0x20	; 32
 182:	80 b9       	out	0x00, r24	; 0
 184:	08 95       	ret

00000186 <I2C_Start>:


uint8_t I2C_Start(char write_address)						/* I2C start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 186:	94 ea       	ldi	r25, 0xA4	; 164
 188:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <I2C_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 190:	91 b1       	in	r25, 0x01	; 1
 192:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	71 f4       	brne	.+28     	; 0x1b4 <I2C_Start+0x2e>
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
 198:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 19a:	84 e8       	ldi	r24, 0x84	; 132
 19c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 19e:	06 b6       	in	r0, 0x36	; 54
 1a0:	07 fe       	sbrs	r0, 7
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <I2C_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
 1a4:	81 b1       	in	r24, 0x01	; 1
 1a6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
 1a8:	88 31       	cpi	r24, 0x18	; 24
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <I2C_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
 1ac:	80 32       	cpi	r24, 0x20	; 32
 1ae:	31 f4       	brne	.+12     	; 0x1bc <I2C_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
	return 0;												/* If not then return 0 to indicate start condition fail */
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	08 95       	ret
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 1bc:	83 e0       	ldi	r24, 0x03	; 3
}
 1be:	08 95       	ret

000001c0 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 1c0:	94 ea       	ldi	r25, 0xA4	; 164
 1c2:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 1c4:	06 b6       	in	r0, 0x36	; 54
 1c6:	07 fe       	sbrs	r0, 7
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1ca:	91 b1       	in	r25, 0x01	; 1
 1cc:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 1ce:	90 31       	cpi	r25, 0x10	; 16
 1d0:	71 f4       	brne	.+28     	; 0x1ee <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
 1d2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 1d8:	06 b6       	in	r0, 0x36	; 54
 1da:	07 fe       	sbrs	r0, 7
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1de:	81 b1       	in	r24, 0x01	; 1
 1e0:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 1e2:	80 34       	cpi	r24, 0x40	; 64
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 1e6:	80 32       	cpi	r24, 0x20	; 32
 1e8:	31 f4       	brne	.+12     	; 0x1f6 <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
 1f6:	83 e0       	ldi	r24, 0x03	; 3
}
 1f8:	08 95       	ret

000001fa <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 1fa:	84 e9       	ldi	r24, 0x94	; 148
 1fc:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
 1fe:	06 b6       	in	r0, 0x36	; 54
 200:	04 fc       	sbrc	r0, 4
 202:	fd cf       	rjmp	.-6      	; 0x1fe <I2C_Stop+0x4>
}
 204:	08 95       	ret

00000206 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 206:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 20c:	06 b6       	in	r0, 0x36	; 54
 20e:	07 fe       	sbrs	r0, 7
 210:	fd cf       	rjmp	.-6      	; 0x20c <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 212:	81 b1       	in	r24, 0x01	; 1
 214:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 216:	88 32       	cpi	r24, 0x28	; 40
 218:	21 f0       	breq	.+8      	; 0x222 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 21a:	80 33       	cpi	r24, 0x30	; 48
 21c:	21 f4       	brne	.+8      	; 0x226 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 226:	82 e0       	ldi	r24, 0x02	; 2
}
 228:	08 95       	ret

0000022a <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 22a:	84 ec       	ldi	r24, 0xC4	; 196
 22c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 22e:	06 b6       	in	r0, 0x36	; 54
 230:	07 fe       	sbrs	r0, 7
 232:	fd cf       	rjmp	.-6      	; 0x22e <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
 234:	83 b1       	in	r24, 0x03	; 3
}	
 236:	08 95       	ret

00000238 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 238:	84 e8       	ldi	r24, 0x84	; 132
 23a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 23c:	06 b6       	in	r0, 0x36	; 54
 23e:	07 fe       	sbrs	r0, 7
 240:	fd cf       	rjmp	.-6      	; 0x23c <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
 242:	83 b1       	in	r24, 0x03	; 3
}	
 244:	08 95       	ret

00000246 <LCD_Command>:
#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */	
 246:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port = (0<<RS)|(0<<RW)|(1<<EN);		/* Make rs LOW (command reg.), rw LOW (Write), en HIGH (Enable) */
 248:	84 e0       	ldi	r24, 0x04	; 4
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	8f ec       	ldi	r24, 0xCF	; 207
 24e:	97 e0       	ldi	r25, 0x07	; 7
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Command+0xa>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Command+0x10>
 256:	00 00       	nop
	_delay_ms(1);									/* Wait a ms to enable pulse and data latch */
	LCD_Command_Port = (0<<RS)|(0<<RW)|(0<<EN);		/* Make rs LOW (command reg.), rw LOW (Write), en LOW (Disable) */
 258:	15 ba       	out	0x15, r1	; 21
 25a:	8f e0       	ldi	r24, 0x0F	; 15
 25c:	97 e2       	ldi	r25, 0x27	; 39
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_Command+0x18>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_Command+0x1e>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <LCD_Char>:
	_delay_ms(5);									/* Wait little bit to get internal LCD data operation done */
}

void LCD_Char (char char_data)						/* LCD data write function */
{
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
 268:	88 bb       	out	0x18, r24	; 24
	LCD_Command_Port = (1<<RS)|(0<<RW)|(1<<EN);		/* Make rs HIGH (data reg.), rw LOW (Write), en HIGH (Enable) */
 26a:	84 e1       	ldi	r24, 0x14	; 20
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	8f ec       	ldi	r24, 0xCF	; 207
 270:	97 e0       	ldi	r25, 0x07	; 7
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_Char+0xa>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Char+0x10>
 278:	00 00       	nop
	_delay_ms(1);									/* Wait a ms to enable pulse and data latch */
	LCD_Command_Port = (1<<RS)|(0<<RW)|(0<<EN);		/* Make rs HIGH (data reg.), rw LOW (Write), en HIGH (Disable) */
 27a:	80 e1       	ldi	r24, 0x10	; 16
 27c:	85 bb       	out	0x15, r24	; 21
 27e:	8f e0       	ldi	r24, 0x0F	; 15
 280:	97 e2       	ldi	r25, 0x27	; 39
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Char+0x1a>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Char+0x20>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <LCD_Init>:
	_delay_ms(5);									/* Wait little bit to get internal LCD data operation done */
}

void LCD_Init (void)								/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;							/* Make LCD command port direction as o/p */
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
 290:	87 bb       	out	0x17, r24	; 23
 292:	8f e3       	ldi	r24, 0x3F	; 63
 294:	9c e9       	ldi	r25, 0x9C	; 156
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Init+0xa>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Init+0x10>
 29c:	00 00       	nop
	
	_delay_ms(20);									/* LCD Initialization time must to get things ready should always >15ms */
	LCD_Command (0x38);								/* Initialization of 16X2 LCD in 8bit mode */
 29e:	88 e3       	ldi	r24, 0x38	; 56
 2a0:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD */
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Command>
	LCD_Command (0x0C);								/* Cursor OFF */
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
 2b0:	80 e8       	ldi	r24, 0x80	; 128
 2b2:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Command>
 2b6:	08 95       	ret

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
