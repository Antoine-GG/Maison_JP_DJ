
UART_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098e  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c7  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025f  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000ec  000000ec  00000160  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.USART_Init 00000016  000000b2  000000b2  00000126  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.USART_Transmit 0000000e  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000032  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.USART_Init:

000000b2 <USART_Init>:
// Définition des broches
#define BUTTON_PIN PD2 // Broche 2 du port D pour le bouton

void USART_Init(unsigned int ubrr) {
	// Configuration du registre UBRR pour la vitesse de communication
	UBRR0H = (unsigned char)(ubrr >> 8);
  b2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Activation du récepteur et du transmetteur
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Format de trame : 8 bits de données, 1 bit d'arrêt, pas de parité
	//UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
	UCSR0C = (1 << USBS0) | (3 << UCSZ00); // 8 data, 2 stop
  c0:	8e e0       	ldi	r24, 0x0E	; 14
  c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  c6:	08 95       	ret

Disassembly of section .text.USART_Transmit:

000000de <USART_Transmit>:
}

void USART_Transmit(unsigned char data) {
	// Attente que le tampon de transmission soit vide
	while (!(UCSR0A & (1 << UDRE0)));
  de:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e2:	95 ff       	sbrs	r25, 5
  e4:	fc cf       	rjmp	.-8      	; 0xde <USART_Transmit>
	
	// Écriture des données dans le tampon, ce qui les envoie
	UDR0 = data;
  e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ea:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
}

int main(void) {
	// Initialisation de l'UART à 9600 bauds (vous pouvez ajuster la vitesse si nécessaire)
	USART_Init(103); // 9600 bauds pour une fréquence de 1 MHz
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 59 00 	call	0xb2	; 0xb2 <USART_Init>
	
	// Configuration de la broche du bouton comme entrée
	DDRD &= ~(1 << BUTTON_PIN);
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	8a b9       	out	0x0a, r24	; 10
	// Activation de la résistance de tirage pour le bouton
	PORTD |= (1 << BUTTON_PIN);
  8e:	8b b1       	in	r24, 0x0b	; 11
  90:	84 60       	ori	r24, 0x04	; 4
  92:	8b b9       	out	0x0b, r24	; 11
	
	while (1) {
		// Vérification si le bouton est pressé
		if (!(PIND & (1 << BUTTON_PIN))) {
  94:	4a 99       	sbic	0x09, 2	; 9
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x14>
			// Envoyer un caractère ('A' dans cet exemple)
			USART_Transmit(0b00000001);
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 6f 00 	call	0xde	; 0xde <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f e9       	ldi	r18, 0x9F	; 159
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
  b0:	f1 cf       	rjmp	.-30     	; 0x94 <main+0x14>

Disassembly of section .text.__dummy_fini:

000000f4 <_fini>:
  f4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000f6 <__funcs_on_exit>:
  f6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000f8 <__simulator_exit>:
  f8:	08 95       	ret

Disassembly of section .text.exit:

000000c8 <exit>:
  c8:	ec 01       	movw	r28, r24
  ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <__funcs_on_exit>
  ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <_fini>
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <__simulator_exit>
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 78 00 	call	0xf0	; 0xf0 <_Exit>

Disassembly of section .text._Exit:

000000f0 <_Exit>:
  f0:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
