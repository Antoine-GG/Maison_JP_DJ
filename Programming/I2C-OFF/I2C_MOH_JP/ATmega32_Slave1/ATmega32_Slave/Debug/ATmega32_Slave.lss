
ATmega32_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088b  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071f  00000000  00000000  00000b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048a  00000000  00000000  0000128e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000487  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016d  00000000  00000000  00001c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
{
	int drapeau=0;
	int8_t count = 0;
	uint8_t valeur=0b00000000;
	
	DDRB |=(1<<PB2);//temoin fenetre 2
  80:	22 9a       	sbi	0x04, 2	; 4
	DDRB |=(1<<PB1);//temoin fenetre 1
  82:	21 9a       	sbi	0x04, 1	; 4
	
	PORTD|=(1<<PD6);//Resistance de Rappel activé pour le Bouton Poussoir FENETRE 1
  84:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD|=(1<<PD7);//Resistance de Rappel activé pour le Bouton Poussoir FENETRE 2
  86:	5f 9a       	sbi	0x0b, 7	; 11
	
	
	I2C_Slave_Init(Slave_Address);
  88:	8c e3       	ldi	r24, 0x3C	; 60
  8a:	0e 94 76 00 	call	0xec	; 0xec <I2C_Slave_Init>

#define Slave_Address			0x3C

int main(void)
{
	int drapeau=0;
  8e:	c0 e0       	ldi	r28, 0x00	; 0
  90:	d0 e0       	ldi	r29, 0x00	; 0
			{
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
  92:	01 e0       	ldi	r16, 0x01	; 1
  94:	10 e0       	ldi	r17, 0x00	; 0
					{   valeur=(PIND & 0b11000000);  //valeur de PD7, et PD6
						Ack_status = I2C_Slave_Transmit(valeur);	/* Send data byte */
				
					} while (Ack_status == 0);		/* Send until Acknowledgment is received */
				
					drapeau=0;//reset pour lire une autre donnée
  96:	e1 2c       	mov	r14, r1
  98:	f1 2c       	mov	r15, r1
	I2C_Slave_Init(Slave_Address);
		
	while (1)
	{
		//afficher les etats des fenetres sur les leds
		if (bit_is_clear(PIND,PD7))
  9a:	4f 99       	sbic	0x09, 7	; 9
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <main+0x22>
		{
			PORTB |=(1<<PB2) ; //allumer le temoin de la fenetre 2
  9e:	2a 9a       	sbi	0x05, 2	; 5
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <main+0x24>
		} else
		{
			PORTB &=~(1<<PB2) ; //eteindre le temoin de la fenetre 2
  a2:	2a 98       	cbi	0x05, 2	; 5
		}
		
		if (bit_is_clear(PIND,PD6))
  a4:	4e 99       	sbic	0x09, 6	; 9
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x2c>
		{
			PORTB |=(1<<PB1) ; //allumer le temoin de la fenetre 1
  a8:	29 9a       	sbi	0x05, 1	; 5
  aa:	01 c0       	rjmp	.+2      	; 0xae <main+0x2e>
		} else
		{
			PORTB &=~(1<<PB1) ; //eteindre le temoin de la fenetre 1
  ac:	29 98       	cbi	0x05, 1	; 5
		}
		switch(I2C_Slave_Listen())				/* Check for any SLA+W or SLA+R */
  ae:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Slave_Listen>
  b2:	88 23       	and	r24, r24
  b4:	19 f0       	breq	.+6      	; 0xbc <main+0x3c>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	49 f0       	breq	.+18     	; 0xcc <main+0x4c>
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x1a>
			case 0://receive
			{
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
  bc:	0e 94 c0 00 	call	0x180	; 0x180 <I2C_Slave_Receive>
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
  c0:	85 32       	cpi	r24, 0x25	; 37
  c2:	81 f0       	breq	.+32     	; 0xe4 <main+0x64>
					PORTD=count;
  c4:	8b b9       	out	0x0b, r24	; 11
				} while (count != -1);			/* Receive until STOP/REPEATED START received */
  c6:	8f 3f       	cpi	r24, 0xFF	; 255
  c8:	c9 f7       	brne	.-14     	; 0xbc <main+0x3c>
  ca:	e7 cf       	rjmp	.-50     	; 0x9a <main+0x1a>
			}
			
			case 1://transmit
			{
				int8_t Ack_status;
		        if(drapeau==1){ //si bon code envoi l'état de PD7 et PD6
  cc:	c1 30       	cpi	r28, 0x01	; 1
  ce:	d1 05       	cpc	r29, r1
  d0:	21 f7       	brne	.-56     	; 0x9a <main+0x1a>
				do
					{   valeur=(PIND & 0b11000000);  //valeur de PD7, et PD6
  d2:	89 b1       	in	r24, 0x09	; 9
						Ack_status = I2C_Slave_Transmit(valeur);	/* Send data byte */
  d4:	80 7c       	andi	r24, 0xC0	; 192
  d6:	0e 94 97 00 	call	0x12e	; 0x12e <I2C_Slave_Transmit>
				
					} while (Ack_status == 0);		/* Send until Acknowledgment is received */
  da:	88 23       	and	r24, r24
  dc:	d1 f3       	breq	.-12     	; 0xd2 <main+0x52>
				
					drapeau=0;//reset pour lire une autre donnée
  de:	ce 2d       	mov	r28, r14
  e0:	df 2d       	mov	r29, r15
  e2:	db cf       	rjmp	.-74     	; 0x9a <main+0x1a>
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
					PORTD=count;
  e4:	8b b9       	out	0x0b, r24	; 11
			{
				do
				{
	
					count = I2C_Slave_Receive();/* Receive data byte*/
					if(count==0x25) drapeau=1;  // vérifier si c'est 0x25 (code) alors autoriser la transmission
  e6:	c0 2f       	mov	r28, r16
  e8:	d1 2f       	mov	r29, r17
  ea:	e8 cf       	rjmp	.-48     	; 0xbc <main+0x3c>

000000ec <I2C_Slave_Init>:

#include "I2C_Slave_H_File.h"

void I2C_Slave_Init(uint8_t slave_address)
{
	TWAR = slave_address;						/* Assign address in TWI address register */
  ec:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7fc0ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
  f0:	84 ec       	ldi	r24, 0xC4	; 196
  f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
  f6:	08 95       	ret

000000f8 <I2C_Slave_Listen>:
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
  fc:	a9 eb       	ldi	r26, 0xB9	; 185
  fe:	b0 e0       	ldi	r27, 0x00	; 0
int8_t I2C_Slave_Listen()
{
	while(1)
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <I2C_Slave_Listen+0x8>
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
 106:	8c 91       	ld	r24, X
 108:	98 2f       	mov	r25, r24
 10a:	98 7f       	andi	r25, 0xF8	; 248
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	80 36       	cpi	r24, 0x60	; 96
 110:	41 f0       	breq	.+16     	; 0x122 <I2C_Slave_Listen+0x2a>
		return 0;								/* If yes then return 0 to indicate ack returned */
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
 112:	98 3a       	cpi	r25, 0xA8	; 168
 114:	41 f0       	breq	.+16     	; 0x126 <I2C_Slave_Listen+0x2e>
 116:	90 3b       	cpi	r25, 0xB0	; 176
 118:	41 f0       	breq	.+16     	; 0x12a <I2C_Slave_Listen+0x32>
		return 1;								/* If yes then return 1 to indicate ack returned */
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
 11a:	80 37       	cpi	r24, 0x70	; 112
 11c:	89 f7       	brne	.-30     	; 0x100 <I2C_Slave_Listen+0x8>
		return 2;								/* If yes then return 2 to indicate ack returned */
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	08 95       	ret
	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
		status = TWSR & 0xF8;					/* Read TWI status register with masking lower three bits */
		if (status == 0x60 || status == 0x68)	/* Check weather own SLA+W received & ack returned (TWEA = 1) */
		return 0;								/* If yes then return 0 to indicate ack returned */
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 95       	ret
		if (status == 0xA8 || status == 0xB0)	/* Check weather own SLA+R received & ack returned (TWEA = 1) */
		return 1;								/* If yes then return 1 to indicate ack returned */
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
		return 2;								/* If yes then return 2 to indicate ack returned */
		else
		continue;								/* Else continue */
	}
}
 12c:	08 95       	ret

0000012e <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
 12e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
 132:	84 ec       	ldi	r24, 0xC4	; 196
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <I2C_Slave_Transmit+0xe>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 142:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 146:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 148:	80 3a       	cpi	r24, 0xA0	; 160
 14a:	39 f4       	brne	.+14     	; 0x15a <I2C_Slave_Transmit+0x2c>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
 14c:	ec eb       	ldi	r30, 0xBC	; 188
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 68       	ori	r24, 0x80	; 128
 154:	80 83       	st	Z, r24
		return -1;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	08 95       	ret
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
 15a:	88 3b       	cpi	r24, 0xB8	; 184
 15c:	69 f0       	breq	.+26     	; 0x178 <I2C_Slave_Transmit+0x4a>
		return 0;									/* If yes then return 0 */
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
 15e:	80 3c       	cpi	r24, 0xC0	; 192
 160:	39 f4       	brne	.+14     	; 0x170 <I2C_Slave_Transmit+0x42>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
 162:	ec eb       	ldi	r30, 0xBC	; 188
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	80 83       	st	Z, r24
		return -2;
 16c:	8e ef       	ldi	r24, 0xFE	; 254
 16e:	08 95       	ret
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
 170:	88 3c       	cpi	r24, 0xC8	; 200
 172:	21 f0       	breq	.+8      	; 0x17c <I2C_Slave_Transmit+0x4e>
	return -3;									/* If yes then return -3 */
	else										/* else return -4 */
	return -4;
 174:	8c ef       	ldi	r24, 0xFC	; 252
 176:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
		return -1;
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
		return 0;									/* If yes then return 0 */
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
		return -2;
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
	return -3;									/* If yes then return -3 */
 17c:	8d ef       	ldi	r24, 0xFD	; 253
	else										/* else return -4 */
	return -4;
}
 17e:	08 95       	ret

00000180 <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
 180:	84 ec       	ldi	r24, 0xC4	; 196
 182:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
 186:	ec eb       	ldi	r30, 0xBC	; 188
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 23       	and	r24, r24
 18e:	ec f7       	brge	.-6      	; 0x18a <I2C_Slave_Receive+0xa>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
 190:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
 194:	98 2f       	mov	r25, r24
 196:	98 7e       	andi	r25, 0xE8	; 232
 198:	90 38       	cpi	r25, 0x80	; 128
 19a:	19 f4       	brne	.+6      	; 0x1a2 <I2C_Slave_Receive+0x22>
	return TWDR;								/* If yes then return received data */
 19c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 1a0:	08 95       	ret
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
 1a2:	98 38       	cpi	r25, 0x88	; 136
 1a4:	19 f4       	brne	.+6      	; 0x1ac <I2C_Slave_Receive+0x2c>
	return TWDR;								/* If yes then return received data */
 1a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
 1aa:	08 95       	ret
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
 1ac:	88 7f       	andi	r24, 0xF8	; 248
 1ae:	80 3a       	cpi	r24, 0xA0	; 160
 1b0:	39 f4       	brne	.+14     	; 0x1c0 <I2C_Slave_Receive+0x40>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
 1b2:	ec eb       	ldi	r30, 0xBC	; 188
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
		return -1;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	08 95       	ret
	}
	else
	return -2;									/* Else return 1 */
 1c0:	8e ef       	ldi	r24, 0xFE	; 254
}
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
