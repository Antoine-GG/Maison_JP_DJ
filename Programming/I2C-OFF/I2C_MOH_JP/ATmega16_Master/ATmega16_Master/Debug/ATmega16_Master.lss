
ATmega16_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b74  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f5  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000887  00000000  00000000  00001e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000845  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ef  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a26  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003f69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
   c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  28:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  2c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  5c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__ftoa_engine+0xf4>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <dtoa_prf+0x94>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <__EEPROM_REGION_LENGTH__+0x1e0>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <initUSART+0x12>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <printString+0x24>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d4 e0       	ldi	r29, 0x04	; 4
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
 172:	0c 94 76 05 	jmp	0xaec	; 0xaec <_exit>

00000176 <__bad_interrupt>:
 176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <initUSART>:
	UDR0 = data;                      // envoyer la donnée 
}
uint8_t receiveByte(void) {
	while ( !( UCSR0A & (1<<RXC0)) ); // Attendre que le buffer de réception soit plein 
	return UDR0;                                // retourner la valeur lue 
}
 17a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
 17e:	87 e6       	ldi	r24, 0x67	; 103
 180:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
 184:	e1 ec       	ldi	r30, 0xC1	; 193
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 61       	ori	r24, 0x18	; 24
 18c:	80 83       	st	Z, r24
 18e:	e2 ec       	ldi	r30, 0xC2	; 194
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	86 60       	ori	r24, 0x06	; 6
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <transmitByte>:
 19a:	e0 ec       	ldi	r30, 0xC0	; 192
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	90 81       	ld	r25, Z
 1a0:	95 ff       	sbrs	r25, 5
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <transmitByte+0x4>
 1a4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 1a8:	08 95       	ret

000001aa <printString>:
void printString(const char myString[]) {
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	while (myString[i]) {
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	59 f0       	breq	.+22     	; 0x1ce <printString+0x24>
 1b8:	8f 01       	movw	r16, r30
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
		transmitByte(myString[i]);
 1bc:	0e 94 cd 00 	call	0x19a	; 0x19a <transmitByte>
		i++;
 1c0:	cf 5f       	subi	r28, 0xFF	; 255
	while ( !( UCSR0A & (1<<RXC0)) ); // Attendre que le buffer de réception soit plein 
	return UDR0;                                // retourner la valeur lue 
}
void printString(const char myString[]) {
	uint8_t i = 0;
	while (myString[i]) {
 1c2:	f8 01       	movw	r30, r16
 1c4:	ec 0f       	add	r30, r28
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f7 cf       	rjmp	.-18     	; 0x1bc <printString+0x12>
		transmitByte(myString[i]);
		i++;
	}
}
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	08 95       	ret

000001d6 <main>:
//-------------------------------------------------------------------------------------------------------

int main()
{  
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	00 d0       	rcall	.+0      	; 0x1dc <main+0x6>
 1dc:	00 d0       	rcall	.+0      	; 0x1de <main+0x8>
 1de:	00 d0       	rcall	.+0      	; 0x1e0 <main+0xa>
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
   char valPorte;
   char aff[6];
   double temperature;
   int8_t tmp_msb,tmp_lsb;
  // declarations des ports utiliser pour temoins des capteurs
   DDRC|=(1<<PC0)|(1<<PC1)|(1<<PC2);
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	87 60       	ori	r24, 0x07	; 7
 1e8:	87 b9       	out	0x07, r24	; 7
   PORTC &=~(1<<PC0); //Temoin Porte
 1ea:	40 98       	cbi	0x08, 0	; 8
   PORTC &=~(1<<PC1); //Temoin Fenetre 1
 1ec:	41 98       	cbi	0x08, 1	; 8
   PORTC &=~(1<<PC2); // Temoin Fenetre 2
 1ee:	42 98       	cbi	0x08, 2	; 8
 
	I2C_Init();								// Initialize I2C 
 1f0:	0e 94 0f 02 	call	0x41e	; 0x41e <I2C_Init>
	initUSART();                            //Initialiser UART
 1f4:	0e 94 bd 00 	call	0x17a	; 0x17a <initUSART>
    
	// DS1621 initialisation,début------
	
    I2C_Start_Wait(TEMP_W);  //Start I2C communication with SLA+W 
 1f8:	80 e9       	ldi	r24, 0x90	; 144
 1fa:	0e 94 47 02 	call	0x48e	; 0x48e <I2C_Start_Wait>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	97 e2       	ldi	r25, 0x27	; 39
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 206:	00 c0       	rjmp	.+0      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 208:	00 00       	nop
	 _delay_ms(5);
    I2C_Write(access_config);
 20a:	8c ea       	ldi	r24, 0xAC	; 172
 20c:	0e 94 83 02 	call	0x506	; 0x506 <I2C_Write>
 210:	8f e0       	ldi	r24, 0x0F	; 15
 212:	97 e2       	ldi	r25, 0x27	; 39
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 218:	00 c0       	rjmp	.+0      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 21a:	00 00       	nop
	 _delay_ms(5);
    I2C_Write(0x03);    // execution en mode ordre de conversion
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	0e 94 83 02 	call	0x506	; 0x506 <I2C_Write>
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	97 e2       	ldi	r25, 0x27	; 39
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 22c:	00 00       	nop
	 _delay_ms(5);
   	I2C_Stop();
 22e:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Stop>
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	97 e2       	ldi	r25, 0x27	; 39
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 23c:	00 00       	nop
   	 _delay_ms(5);
	///-----------------------------------	
	
	while (1)
	{
		transmitByte('A');
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	0e 94 cd 00 	call	0x19a	; 0x19a <transmitByte>
	// communication avec le Atmega328P Slave 1 Fenetres I2C -----------------------------------------------------------
		I2C_Start_Wait(Slave_Write_Address1);// Start I2C communication with SLA+W 
 244:	8c e3       	ldi	r24, 0x3C	; 60
 246:	0e 94 47 02 	call	0x48e	; 0x48e <I2C_Start_Wait>
 24a:	8f e0       	ldi	r24, 0x0F	; 15
 24c:	97 e2       	ldi	r25, 0x27	; 39
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
 254:	00 00       	nop
		_delay_ms(5);
			
		I2C_Write(0x25);					// Envoyer 0x25 code pour demander d'envoyer une données 
 256:	85 e2       	ldi	r24, 0x25	; 37
 258:	0e 94 83 02 	call	0x506	; 0x506 <I2C_Write>
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	20 e7       	ldi	r18, 0x70	; 112
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	91 50       	subi	r25, 0x01	; 1
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 26c:	00 00       	nop
		_delay_ms(100);
		
	
		I2C_Repeated_Start(Slave_Read_Address1);	// Repeated Start I2C communication with SLA+R 
 26e:	8d e3       	ldi	r24, 0x3D	; 61
 270:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Repeated_Start>
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	97 e2       	ldi	r25, 0x27	; 39
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
 27e:	00 00       	nop
		_delay_ms(5);
		
		valFenetre=I2C_Read_Nack(); //lire la donnée (1 seule) et envoyer sur le port D   vérifier l'état de PD0 
 280:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Read_Nack>
 284:	18 2f       	mov	r17, r24
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	97 e2       	ldi	r25, 0x27	; 39
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <__EEPROM_REGION_LENGTH__+0x8a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 290:	00 00       	nop
		_delay_ms(5);
		
		I2C_Stop();   // Stop I2C
 292:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Stop>
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	97 e2       	ldi	r25, 0x27	; 39
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 2a0:	00 00       	nop
		_delay_ms(5);
		
		//afficher l'état des fenetres
		//fenetre 1
		if ((valFenetre & 0b01000000)==0b00000000) { 
 2a2:	16 fd       	sbrc	r17, 6
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
		   PORTC |=(1<<PC1); //allumer temoin fenetre 1
 2a6:	41 9a       	sbi	0x08, 1	; 8
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
		}
		else {
		   
		   PORTC &=~(1<<PC1); //eteindre Temoin Fenetre 1
 2aa:	41 98       	cbi	0x08, 1	; 8
		}
		//fenetre 2
		if ((valFenetre & 0b10000000)==0b00000000) {
 2ac:	11 23       	and	r17, r17
 2ae:	14 f0       	brlt	.+4      	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			PORTC |=(1<<PC2); //allumer temoin fenetre 2
 2b0:	42 9a       	sbi	0x08, 2	; 8
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
		}
		else {
			
			PORTC &=~(1<<PC2); //eteindre Temoin Fenetre 2
 2b4:	42 98       	cbi	0x08, 2	; 8
 2b6:	9f ef       	ldi	r25, 0xFF	; 255
 2b8:	20 e7       	ldi	r18, 0x70	; 112
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	91 50       	subi	r25, 0x01	; 1
 2be:	20 40       	sbci	r18, 0x00	; 0
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
 2c6:	00 00       	nop
		_delay_ms(100);
		
		
		
	// communication avec le Atmega328P Slave 2 Porte I2C -----------------------------------------------------------
		I2C_Start_Wait(Slave_Write_Address2);// Start I2C communication with SLA+W
 2c8:	8a e5       	ldi	r24, 0x5A	; 90
 2ca:	0e 94 47 02 	call	0x48e	; 0x48e <I2C_Start_Wait>
 2ce:	8f e0       	ldi	r24, 0x0F	; 15
 2d0:	97 e2       	ldi	r25, 0x27	; 39
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <__EEPROM_REGION_LENGTH__+0xd8>
 2d8:	00 00       	nop
		_delay_ms(5);
		
		I2C_Write(0x35);					// Envoyer 0x25 code pour demander d'envoyer une données
 2da:	85 e3       	ldi	r24, 0x35	; 53
 2dc:	0e 94 83 02 	call	0x506	; 0x506 <I2C_Write>
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	20 e7       	ldi	r18, 0x70	; 112
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	91 50       	subi	r25, 0x01	; 1
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <__EEPROM_REGION_LENGTH__+0xf0>
 2f0:	00 00       	nop
		_delay_ms(100);
		
		
		I2C_Repeated_Start(Slave_Read_Address2);	// Repeated Start I2C communication with SLA+R
 2f2:	8b e5       	ldi	r24, 0x5B	; 91
 2f4:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Repeated_Start>
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	97 e2       	ldi	r25, 0x27	; 39
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
 302:	00 00       	nop
		_delay_ms(5);
		
		valPorte=I2C_Read_Nack(); //lire la donnée (1 seule) et envoyer sur le port D   vérifier l'état de PD0
 304:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Read_Nack>
 308:	18 2f       	mov	r17, r24
 30a:	8f e0       	ldi	r24, 0x0F	; 15
 30c:	97 e2       	ldi	r25, 0x27	; 39
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <__EEPROM_REGION_LENGTH__+0x10e>
 312:	00 c0       	rjmp	.+0      	; 0x314 <__EEPROM_REGION_LENGTH__+0x114>
 314:	00 00       	nop
		_delay_ms(5);
		I2C_Stop();   // Stop I2C
 316:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Stop>
 31a:	8f e0       	ldi	r24, 0x0F	; 15
 31c:	97 e2       	ldi	r25, 0x27	; 39
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <__EEPROM_REGION_LENGTH__+0x11e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <__EEPROM_REGION_LENGTH__+0x124>
 324:	00 00       	nop
		_delay_ms(5);
		//afficher l'état desporte
		//PORTE
		if ((valPorte & 0b10000000)==0b00000000) {
 326:	11 23       	and	r17, r17
 328:	14 f0       	brlt	.+4      	; 0x32e <__EEPROM_REGION_LENGTH__+0x12e>
			PORTC |=(1<<PC0); //allumer temoin PORTE
 32a:	40 9a       	sbi	0x08, 0	; 8
 32c:	01 c0       	rjmp	.+2      	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
		}
		else {
			
			PORTC &=~(1<<PC0); //eteindre Temoin Porte
 32e:	40 98       	cbi	0x08, 0	; 8
 330:	9f ef       	ldi	r25, 0xFF	; 255
 332:	20 e7       	ldi	r18, 0x70	; 112
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	91 50       	subi	r25, 0x01	; 1
 338:	20 40       	sbci	r18, 0x00	; 0
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <__EEPROM_REGION_LENGTH__+0x136>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
 340:	00 00       	nop
			
	//---------------------------------------------------------------------------------------------------------
	
	//communication avec le capteur de temperature i2c ds1621-------------------------------------------------
		// convertir une donnée,
			I2C_Start_Wait(TEMP_W);
 342:	80 e9       	ldi	r24, 0x90	; 144
 344:	0e 94 47 02 	call	0x48e	; 0x48e <I2C_Start_Wait>
 348:	8f e0       	ldi	r24, 0x0F	; 15
 34a:	97 e2       	ldi	r25, 0x27	; 39
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <__EEPROM_REGION_LENGTH__+0x14c>
 350:	00 c0       	rjmp	.+0      	; 0x352 <__EEPROM_REGION_LENGTH__+0x152>
 352:	00 00       	nop
			_delay_ms(5);
			I2C_Write(start_conversion);//ordre de conversion
 354:	8e ee       	ldi	r24, 0xEE	; 238
 356:	0e 94 83 02 	call	0x506	; 0x506 <I2C_Write>
 35a:	8f e0       	ldi	r24, 0x0F	; 15
 35c:	97 e2       	ldi	r25, 0x27	; 39
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <__EEPROM_REGION_LENGTH__+0x15e>
 362:	00 c0       	rjmp	.+0      	; 0x364 <__EEPROM_REGION_LENGTH__+0x164>
 364:	00 00       	nop
			_delay_ms(5);
			I2C_Stop();
 366:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Stop>
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	97 e2       	ldi	r25, 0x27	; 39
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <__EEPROM_REGION_LENGTH__+0x16e>
 372:	00 c0       	rjmp	.+0      	; 0x374 <__EEPROM_REGION_LENGTH__+0x174>
 374:	00 00       	nop
			_delay_ms(5);
	    // lire une temperature 	
			I2C_Start_Wait(TEMP_W);
 376:	80 e9       	ldi	r24, 0x90	; 144
 378:	0e 94 47 02 	call	0x48e	; 0x48e <I2C_Start_Wait>
 37c:	8f e0       	ldi	r24, 0x0F	; 15
 37e:	97 e2       	ldi	r25, 0x27	; 39
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <__EEPROM_REGION_LENGTH__+0x180>
 384:	00 c0       	rjmp	.+0      	; 0x386 <__EEPROM_REGION_LENGTH__+0x186>
 386:	00 00       	nop
			_delay_ms(5);
			I2C_Write(read_temperature);//code pour lire la temperature
 388:	8a ea       	ldi	r24, 0xAA	; 170
 38a:	0e 94 83 02 	call	0x506	; 0x506 <I2C_Write>
 38e:	8f e0       	ldi	r24, 0x0F	; 15
 390:	97 e2       	ldi	r25, 0x27	; 39
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <__EEPROM_REGION_LENGTH__+0x192>
 396:	00 c0       	rjmp	.+0      	; 0x398 <__EEPROM_REGION_LENGTH__+0x198>
 398:	00 00       	nop
			_delay_ms(5);
			I2C_Repeated_Start(TEMP_R);
 39a:	81 e9       	ldi	r24, 0x91	; 145
 39c:	0e 94 18 02 	call	0x430	; 0x430 <I2C_Repeated_Start>
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	97 e2       	ldi	r25, 0x27	; 39
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <__EEPROM_REGION_LENGTH__+0x1aa>
 3aa:	00 00       	nop
			_delay_ms(5);
			tmp_msb=I2C_Read_Ack();//lecture de la temperature
 3ac:	0e 94 9a 02 	call	0x534	; 0x534 <I2C_Read_Ack>
 3b0:	18 2f       	mov	r17, r24
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	97 e2       	ldi	r25, 0x27	; 39
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <__EEPROM_REGION_LENGTH__+0x1b6>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <__EEPROM_REGION_LENGTH__+0x1bc>
 3bc:	00 00       	nop
			_delay_ms(5);
			tmp_lsb=I2C_Read_Nack();//lecture de la partie decimale de la temperature
 3be:	0e 94 a5 02 	call	0x54a	; 0x54a <I2C_Read_Nack>
 3c2:	8f e0       	ldi	r24, 0x0F	; 15
 3c4:	97 e2       	ldi	r25, 0x27	; 39
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <__EEPROM_REGION_LENGTH__+0x1cc>
 3cc:	00 00       	nop
			_delay_ms(5);
			I2C_Stop();
 3ce:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Stop>
 3d2:	8f e0       	ldi	r24, 0x0F	; 15
 3d4:	97 e2       	ldi	r25, 0x27	; 39
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <__EEPROM_REGION_LENGTH__+0x1dc>
 3dc:	00 00       	nop
			temperature=tmp_msb; //Température pas de 1oC
			//Temperature=tmp_msb+0.5*(tmp_lsb/128); //Température pas de 0.5oC
		
		//convertir la valeur de la temperature en string et prêt a etre envoyer au ESP
		//temperature=25;
		dtostrf(temperature, 4, 0, aff);
 3de:	61 2f       	mov	r22, r17
 3e0:	11 0f       	add	r17, r17
 3e2:	77 0b       	sbc	r23, r23
 3e4:	88 0b       	sbc	r24, r24
 3e6:	99 0b       	sbc	r25, r25
 3e8:	0e 94 b2 02 	call	0x564	; 0x564 <__floatsisf>
 3ec:	8e 01       	movw	r16, r28
 3ee:	0f 5f       	subi	r16, 0xFF	; 255
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	44 e0       	ldi	r20, 0x04	; 4
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	0e 94 ed 02 	call	0x5da	; 0x5da <dtostrf>
		printString(aff);
 3fe:	c8 01       	movw	r24, r16
 400:	0e 94 d5 00 	call	0x1aa	; 0x1aa <printString>
		transmitByte('\n');
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	0e 94 cd 00 	call	0x19a	; 0x19a <transmitByte>
		transmitByte('A');
 40a:	81 e4       	ldi	r24, 0x41	; 65
 40c:	0e 94 cd 00 	call	0x19a	; 0x19a <transmitByte>
		transmitByte(0x0D);
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	0e 94 cd 00 	call	0x19a	; 0x19a <transmitByte>
		transmitByte(0x0A);
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	0e 94 cd 00 	call	0x19a	; 0x19a <transmitByte>
	//-----------------------------------------------------------------------------------------------------------
	};				
 41c:	10 cf       	rjmp	.-480    	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>

0000041e <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 41e:	80 e2       	ldi	r24, 0x20	; 32
 420:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fc0b8>
 424:	ec eb       	ldi	r30, 0xBC	; 188
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	84 60       	ori	r24, 0x04	; 4
 42c:	80 83       	st	Z, r24
 42e:	08 95       	ret

00000430 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 430:	94 ea       	ldi	r25, 0xA4	; 164
 432:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 436:	ec eb       	ldi	r30, 0xBC	; 188
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	90 81       	ld	r25, Z
 43c:	99 23       	and	r25, r25
 43e:	ec f7       	brge	.-6      	; 0x43a <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 440:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 444:	98 7f       	andi	r25, 0xF8	; 248
 446:	90 31       	cpi	r25, 0x10	; 16
 448:	99 f4       	brne	.+38     	; 0x470 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
 44a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 44e:	84 e8       	ldi	r24, 0x84	; 132
 450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 454:	ec eb       	ldi	r30, 0xBC	; 188
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	88 23       	and	r24, r24
 45c:	ec f7       	brge	.-6      	; 0x458 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 45e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 462:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 464:	80 34       	cpi	r24, 0x40	; 64
 466:	31 f0       	breq	.+12     	; 0x474 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 468:	80 32       	cpi	r24, 0x20	; 32
 46a:	31 f0       	breq	.+12     	; 0x478 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+R failed */
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	08 95       	ret
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
 478:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+R failed */
}
 47a:	08 95       	ret

0000047c <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 47c:	84 e9       	ldi	r24, 0x94	; 148
 47e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
 482:	ec eb       	ldi	r30, 0xBC	; 188
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	84 fd       	sbrc	r24, 4
 48a:	fd cf       	rjmp	.-6      	; 0x486 <I2C_Stop+0xa>
}
 48c:	08 95       	ret

0000048e <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 4a2:	cc eb       	ldi	r28, 0xBC	; 188
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	0f 2e       	mov	r0, r31
 4a8:	f4 ea       	ldi	r31, 0xA4	; 164
 4aa:	df 2e       	mov	r13, r31
 4ac:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 4ae:	09 eb       	ldi	r16, 0xB9	; 185
 4b0:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
 4b2:	0f 2e       	mov	r0, r31
 4b4:	fb eb       	ldi	r31, 0xBB	; 187
 4b6:	ef 2e       	mov	r14, r31
 4b8:	f1 2c       	mov	r15, r1
 4ba:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 4bc:	0f 2e       	mov	r0, r31
 4be:	f4 e8       	ldi	r31, 0x84	; 132
 4c0:	cf 2e       	mov	r12, r31
 4c2:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 4c4:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 4c6:	88 81       	ld	r24, Y
 4c8:	88 23       	and	r24, r24
 4ca:	ec f7       	brge	.-6      	; 0x4c6 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 4cc:	f8 01       	movw	r30, r16
 4ce:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 4d0:	88 7f       	andi	r24, 0xF8	; 248
 4d2:	88 30       	cpi	r24, 0x08	; 8
 4d4:	b9 f7       	brne	.-18     	; 0x4c4 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
 4d6:	f7 01       	movw	r30, r14
 4d8:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 4da:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 4dc:	88 81       	ld	r24, Y
 4de:	88 23       	and	r24, r24
 4e0:	ec f7       	brge	.-6      	; 0x4dc <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 4e2:	f8 01       	movw	r30, r16
 4e4:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 4e6:	88 7f       	andi	r24, 0xF8	; 248
 4e8:	88 31       	cpi	r24, 0x18	; 24
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
 4ec:	0e 94 3e 02 	call	0x47c	; 0x47c <I2C_Stop>
			continue;										/* continue with start loop again */
 4f0:	e9 cf       	rjmp	.-46     	; 0x4c4 <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	df 90       	pop	r13
 500:	cf 90       	pop	r12
 502:	bf 90       	pop	r11
 504:	08 95       	ret

00000506 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 506:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 50a:	84 e8       	ldi	r24, 0x84	; 132
 50c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 510:	ec eb       	ldi	r30, 0xBC	; 188
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	88 23       	and	r24, r24
 518:	ec f7       	brge	.-6      	; 0x514 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 51a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fc0b9>
 51e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 520:	88 32       	cpi	r24, 0x28	; 40
 522:	21 f0       	breq	.+8      	; 0x52c <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 524:	80 33       	cpi	r24, 0x30	; 48
 526:	21 f0       	breq	.+8      	; 0x530 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
 530:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 532:	08 95       	ret

00000534 <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 534:	84 ec       	ldi	r24, 0xC4	; 196
 536:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 53a:	ec eb       	ldi	r30, 0xBC	; 188
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	88 23       	and	r24, r24
 542:	ec f7       	brge	.-6      	; 0x53e <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
 544:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
}	
 548:	08 95       	ret

0000054a <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 54a:	84 e8       	ldi	r24, 0x84	; 132
 54c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 550:	ec eb       	ldi	r30, 0xBC	; 188
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	88 23       	and	r24, r24
 558:	ec f7       	brge	.-6      	; 0x554 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
 55a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
}	
 55e:	08 95       	ret

00000560 <__floatunsisf>:
 560:	e8 94       	clt
 562:	09 c0       	rjmp	.+18     	; 0x576 <__floatsisf+0x12>

00000564 <__floatsisf>:
 564:	97 fb       	bst	r25, 7
 566:	3e f4       	brtc	.+14     	; 0x576 <__floatsisf+0x12>
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	99 23       	and	r25, r25
 578:	a9 f0       	breq	.+42     	; 0x5a4 <__floatsisf+0x40>
 57a:	f9 2f       	mov	r31, r25
 57c:	96 e9       	ldi	r25, 0x96	; 150
 57e:	bb 27       	eor	r27, r27
 580:	93 95       	inc	r25
 582:	f6 95       	lsr	r31
 584:	87 95       	ror	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f1 11       	cpse	r31, r1
 58e:	f8 cf       	rjmp	.-16     	; 0x580 <__floatsisf+0x1c>
 590:	fa f4       	brpl	.+62     	; 0x5d0 <__floatsisf+0x6c>
 592:	bb 0f       	add	r27, r27
 594:	11 f4       	brne	.+4      	; 0x59a <__floatsisf+0x36>
 596:	60 ff       	sbrs	r22, 0
 598:	1b c0       	rjmp	.+54     	; 0x5d0 <__floatsisf+0x6c>
 59a:	6f 5f       	subi	r22, 0xFF	; 255
 59c:	7f 4f       	sbci	r23, 0xFF	; 255
 59e:	8f 4f       	sbci	r24, 0xFF	; 255
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	16 c0       	rjmp	.+44     	; 0x5d0 <__floatsisf+0x6c>
 5a4:	88 23       	and	r24, r24
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__floatsisf+0x48>
 5a8:	96 e9       	ldi	r25, 0x96	; 150
 5aa:	11 c0       	rjmp	.+34     	; 0x5ce <__floatsisf+0x6a>
 5ac:	77 23       	and	r23, r23
 5ae:	21 f0       	breq	.+8      	; 0x5b8 <__floatsisf+0x54>
 5b0:	9e e8       	ldi	r25, 0x8E	; 142
 5b2:	87 2f       	mov	r24, r23
 5b4:	76 2f       	mov	r23, r22
 5b6:	05 c0       	rjmp	.+10     	; 0x5c2 <__floatsisf+0x5e>
 5b8:	66 23       	and	r22, r22
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <__floatsisf+0x74>
 5bc:	96 e8       	ldi	r25, 0x86	; 134
 5be:	86 2f       	mov	r24, r22
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	2a f0       	brmi	.+10     	; 0x5d0 <__floatsisf+0x6c>
 5c6:	9a 95       	dec	r25
 5c8:	66 0f       	add	r22, r22
 5ca:	77 1f       	adc	r23, r23
 5cc:	88 1f       	adc	r24, r24
 5ce:	da f7       	brpl	.-10     	; 0x5c6 <__floatsisf+0x62>
 5d0:	88 0f       	add	r24, r24
 5d2:	96 95       	lsr	r25
 5d4:	87 95       	ror	r24
 5d6:	97 f9       	bld	r25, 7
 5d8:	08 95       	ret

000005da <dtostrf>:
 5da:	ef 92       	push	r14
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	e8 01       	movw	r28, r16
 5e6:	47 fd       	sbrc	r20, 7
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <dtostrf+0x14>
 5ea:	34 e0       	ldi	r19, 0x04	; 4
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <dtostrf+0x16>
 5ee:	34 e1       	ldi	r19, 0x14	; 20
 5f0:	04 2e       	mov	r0, r20
 5f2:	00 0c       	add	r0, r0
 5f4:	55 0b       	sbc	r21, r21
 5f6:	57 ff       	sbrs	r21, 7
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <dtostrf+0x26>
 5fa:	51 95       	neg	r21
 5fc:	41 95       	neg	r20
 5fe:	51 09       	sbc	r21, r1
 600:	e3 2e       	mov	r14, r19
 602:	02 2f       	mov	r16, r18
 604:	24 2f       	mov	r18, r20
 606:	ae 01       	movw	r20, r28
 608:	0e 94 0d 03 	call	0x61a	; 0x61a <dtoa_prf>
 60c:	ce 01       	movw	r24, r28
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ef 90       	pop	r14
 618:	08 95       	ret

0000061a <dtoa_prf>:
 61a:	a9 e0       	ldi	r26, 0x09	; 9
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e3 e1       	ldi	r30, 0x13	; 19
 620:	f3 e0       	ldi	r31, 0x03	; 3
 622:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <__prologue_saves__+0xc>
 626:	6a 01       	movw	r12, r20
 628:	12 2f       	mov	r17, r18
 62a:	b0 2e       	mov	r11, r16
 62c:	2b e3       	ldi	r18, 0x3B	; 59
 62e:	20 17       	cp	r18, r16
 630:	20 f0       	brcs	.+8      	; 0x63a <dtoa_prf+0x20>
 632:	ff 24       	eor	r15, r15
 634:	f3 94       	inc	r15
 636:	f0 0e       	add	r15, r16
 638:	02 c0       	rjmp	.+4      	; 0x63e <dtoa_prf+0x24>
 63a:	2c e3       	ldi	r18, 0x3C	; 60
 63c:	f2 2e       	mov	r15, r18
 63e:	0f 2d       	mov	r16, r15
 640:	27 e0       	ldi	r18, 0x07	; 7
 642:	ae 01       	movw	r20, r28
 644:	4f 5f       	subi	r20, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	0e 94 67 04 	call	0x8ce	; 0x8ce <__ftoa_engine>
 64c:	bc 01       	movw	r22, r24
 64e:	49 81       	ldd	r20, Y+1	; 0x01
 650:	84 2f       	mov	r24, r20
 652:	89 70       	andi	r24, 0x09	; 9
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	31 f0       	breq	.+12     	; 0x664 <dtoa_prf+0x4a>
 658:	e1 fc       	sbrc	r14, 1
 65a:	06 c0       	rjmp	.+12     	; 0x668 <dtoa_prf+0x4e>
 65c:	e0 fe       	sbrs	r14, 0
 65e:	06 c0       	rjmp	.+12     	; 0x66c <dtoa_prf+0x52>
 660:	90 e2       	ldi	r25, 0x20	; 32
 662:	05 c0       	rjmp	.+10     	; 0x66e <dtoa_prf+0x54>
 664:	9d e2       	ldi	r25, 0x2D	; 45
 666:	03 c0       	rjmp	.+6      	; 0x66e <dtoa_prf+0x54>
 668:	9b e2       	ldi	r25, 0x2B	; 43
 66a:	01 c0       	rjmp	.+2      	; 0x66e <dtoa_prf+0x54>
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	5e 2d       	mov	r21, r14
 670:	50 71       	andi	r21, 0x10	; 16
 672:	43 ff       	sbrs	r20, 3
 674:	3c c0       	rjmp	.+120    	; 0x6ee <dtoa_prf+0xd4>
 676:	91 11       	cpse	r25, r1
 678:	02 c0       	rjmp	.+4      	; 0x67e <dtoa_prf+0x64>
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	01 c0       	rjmp	.+2      	; 0x680 <dtoa_prf+0x66>
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	81 17       	cp	r24, r17
 682:	18 f4       	brcc	.+6      	; 0x68a <dtoa_prf+0x70>
 684:	21 2f       	mov	r18, r17
 686:	28 1b       	sub	r18, r24
 688:	01 c0       	rjmp	.+2      	; 0x68c <dtoa_prf+0x72>
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	51 11       	cpse	r21, r1
 68e:	0b c0       	rjmp	.+22     	; 0x6a6 <dtoa_prf+0x8c>
 690:	f6 01       	movw	r30, r12
 692:	82 2f       	mov	r24, r18
 694:	30 e2       	ldi	r19, 0x20	; 32
 696:	88 23       	and	r24, r24
 698:	19 f0       	breq	.+6      	; 0x6a0 <dtoa_prf+0x86>
 69a:	31 93       	st	Z+, r19
 69c:	81 50       	subi	r24, 0x01	; 1
 69e:	fb cf       	rjmp	.-10     	; 0x696 <dtoa_prf+0x7c>
 6a0:	c2 0e       	add	r12, r18
 6a2:	d1 1c       	adc	r13, r1
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	99 23       	and	r25, r25
 6a8:	29 f0       	breq	.+10     	; 0x6b4 <dtoa_prf+0x9a>
 6aa:	d6 01       	movw	r26, r12
 6ac:	9c 93       	st	X, r25
 6ae:	f6 01       	movw	r30, r12
 6b0:	31 96       	adiw	r30, 0x01	; 1
 6b2:	6f 01       	movw	r12, r30
 6b4:	c6 01       	movw	r24, r12
 6b6:	03 96       	adiw	r24, 0x03	; 3
 6b8:	e2 fe       	sbrs	r14, 2
 6ba:	0a c0       	rjmp	.+20     	; 0x6d0 <dtoa_prf+0xb6>
 6bc:	3e e4       	ldi	r19, 0x4E	; 78
 6be:	d6 01       	movw	r26, r12
 6c0:	3c 93       	st	X, r19
 6c2:	41 e4       	ldi	r20, 0x41	; 65
 6c4:	11 96       	adiw	r26, 0x01	; 1
 6c6:	4c 93       	st	X, r20
 6c8:	11 97       	sbiw	r26, 0x01	; 1
 6ca:	12 96       	adiw	r26, 0x02	; 2
 6cc:	3c 93       	st	X, r19
 6ce:	06 c0       	rjmp	.+12     	; 0x6dc <dtoa_prf+0xc2>
 6d0:	3e e6       	ldi	r19, 0x6E	; 110
 6d2:	f6 01       	movw	r30, r12
 6d4:	30 83       	st	Z, r19
 6d6:	41 e6       	ldi	r20, 0x61	; 97
 6d8:	41 83       	std	Z+1, r20	; 0x01
 6da:	32 83       	std	Z+2, r19	; 0x02
 6dc:	fc 01       	movw	r30, r24
 6de:	32 2f       	mov	r19, r18
 6e0:	40 e2       	ldi	r20, 0x20	; 32
 6e2:	33 23       	and	r19, r19
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <dtoa_prf+0xce>
 6e6:	42 c0       	rjmp	.+132    	; 0x76c <dtoa_prf+0x152>
 6e8:	41 93       	st	Z+, r20
 6ea:	31 50       	subi	r19, 0x01	; 1
 6ec:	fa cf       	rjmp	.-12     	; 0x6e2 <dtoa_prf+0xc8>
 6ee:	42 ff       	sbrs	r20, 2
 6f0:	44 c0       	rjmp	.+136    	; 0x77a <dtoa_prf+0x160>
 6f2:	91 11       	cpse	r25, r1
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <dtoa_prf+0xe0>
 6f6:	83 e0       	ldi	r24, 0x03	; 3
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <dtoa_prf+0xe2>
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	81 17       	cp	r24, r17
 6fe:	18 f4       	brcc	.+6      	; 0x706 <dtoa_prf+0xec>
 700:	21 2f       	mov	r18, r17
 702:	28 1b       	sub	r18, r24
 704:	01 c0       	rjmp	.+2      	; 0x708 <dtoa_prf+0xee>
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	51 11       	cpse	r21, r1
 70a:	0b c0       	rjmp	.+22     	; 0x722 <dtoa_prf+0x108>
 70c:	f6 01       	movw	r30, r12
 70e:	82 2f       	mov	r24, r18
 710:	30 e2       	ldi	r19, 0x20	; 32
 712:	88 23       	and	r24, r24
 714:	19 f0       	breq	.+6      	; 0x71c <dtoa_prf+0x102>
 716:	31 93       	st	Z+, r19
 718:	81 50       	subi	r24, 0x01	; 1
 71a:	fb cf       	rjmp	.-10     	; 0x712 <dtoa_prf+0xf8>
 71c:	c2 0e       	add	r12, r18
 71e:	d1 1c       	adc	r13, r1
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	99 23       	and	r25, r25
 724:	29 f0       	breq	.+10     	; 0x730 <dtoa_prf+0x116>
 726:	d6 01       	movw	r26, r12
 728:	9c 93       	st	X, r25
 72a:	f6 01       	movw	r30, r12
 72c:	31 96       	adiw	r30, 0x01	; 1
 72e:	6f 01       	movw	r12, r30
 730:	c6 01       	movw	r24, r12
 732:	03 96       	adiw	r24, 0x03	; 3
 734:	e2 fe       	sbrs	r14, 2
 736:	0b c0       	rjmp	.+22     	; 0x74e <dtoa_prf+0x134>
 738:	39 e4       	ldi	r19, 0x49	; 73
 73a:	d6 01       	movw	r26, r12
 73c:	3c 93       	st	X, r19
 73e:	3e e4       	ldi	r19, 0x4E	; 78
 740:	11 96       	adiw	r26, 0x01	; 1
 742:	3c 93       	st	X, r19
 744:	11 97       	sbiw	r26, 0x01	; 1
 746:	36 e4       	ldi	r19, 0x46	; 70
 748:	12 96       	adiw	r26, 0x02	; 2
 74a:	3c 93       	st	X, r19
 74c:	07 c0       	rjmp	.+14     	; 0x75c <dtoa_prf+0x142>
 74e:	39 e6       	ldi	r19, 0x69	; 105
 750:	f6 01       	movw	r30, r12
 752:	30 83       	st	Z, r19
 754:	3e e6       	ldi	r19, 0x6E	; 110
 756:	31 83       	std	Z+1, r19	; 0x01
 758:	36 e6       	ldi	r19, 0x66	; 102
 75a:	32 83       	std	Z+2, r19	; 0x02
 75c:	fc 01       	movw	r30, r24
 75e:	32 2f       	mov	r19, r18
 760:	40 e2       	ldi	r20, 0x20	; 32
 762:	33 23       	and	r19, r19
 764:	19 f0       	breq	.+6      	; 0x76c <dtoa_prf+0x152>
 766:	41 93       	st	Z+, r20
 768:	31 50       	subi	r19, 0x01	; 1
 76a:	fb cf       	rjmp	.-10     	; 0x762 <dtoa_prf+0x148>
 76c:	fc 01       	movw	r30, r24
 76e:	e2 0f       	add	r30, r18
 770:	f1 1d       	adc	r31, r1
 772:	10 82       	st	Z, r1
 774:	8e ef       	ldi	r24, 0xFE	; 254
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	a6 c0       	rjmp	.+332    	; 0x8c6 <dtoa_prf+0x2ac>
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	91 11       	cpse	r25, r1
 780:	02 c0       	rjmp	.+4      	; 0x786 <dtoa_prf+0x16c>
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	16 16       	cp	r1, r22
 788:	17 06       	cpc	r1, r23
 78a:	1c f4       	brge	.+6      	; 0x792 <dtoa_prf+0x178>
 78c:	fb 01       	movw	r30, r22
 78e:	31 96       	adiw	r30, 0x01	; 1
 790:	02 c0       	rjmp	.+4      	; 0x796 <dtoa_prf+0x17c>
 792:	e1 e0       	ldi	r30, 0x01	; 1
 794:	f0 e0       	ldi	r31, 0x00	; 0
 796:	2e 0f       	add	r18, r30
 798:	3f 1f       	adc	r19, r31
 79a:	bb 20       	and	r11, r11
 79c:	21 f0       	breq	.+8      	; 0x7a6 <dtoa_prf+0x18c>
 79e:	eb 2d       	mov	r30, r11
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	31 96       	adiw	r30, 0x01	; 1
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <dtoa_prf+0x190>
 7a6:	e0 e0       	ldi	r30, 0x00	; 0
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	2e 0f       	add	r18, r30
 7ac:	3f 1f       	adc	r19, r31
 7ae:	e1 2f       	mov	r30, r17
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	2e 17       	cp	r18, r30
 7b4:	3f 07       	cpc	r19, r31
 7b6:	1c f4       	brge	.+6      	; 0x7be <dtoa_prf+0x1a4>
 7b8:	12 1b       	sub	r17, r18
 7ba:	21 2f       	mov	r18, r17
 7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <dtoa_prf+0x1a6>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	8e 2d       	mov	r24, r14
 7c2:	88 71       	andi	r24, 0x18	; 24
 7c4:	59 f4       	brne	.+22     	; 0x7dc <dtoa_prf+0x1c2>
 7c6:	f6 01       	movw	r30, r12
 7c8:	82 2f       	mov	r24, r18
 7ca:	30 e2       	ldi	r19, 0x20	; 32
 7cc:	88 23       	and	r24, r24
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <dtoa_prf+0x1bc>
 7d0:	31 93       	st	Z+, r19
 7d2:	81 50       	subi	r24, 0x01	; 1
 7d4:	fb cf       	rjmp	.-10     	; 0x7cc <dtoa_prf+0x1b2>
 7d6:	c2 0e       	add	r12, r18
 7d8:	d1 1c       	adc	r13, r1
 7da:	20 e0       	ldi	r18, 0x00	; 0
 7dc:	99 23       	and	r25, r25
 7de:	29 f0       	breq	.+10     	; 0x7ea <dtoa_prf+0x1d0>
 7e0:	d6 01       	movw	r26, r12
 7e2:	9c 93       	st	X, r25
 7e4:	f6 01       	movw	r30, r12
 7e6:	31 96       	adiw	r30, 0x01	; 1
 7e8:	6f 01       	movw	r12, r30
 7ea:	51 11       	cpse	r21, r1
 7ec:	0b c0       	rjmp	.+22     	; 0x804 <dtoa_prf+0x1ea>
 7ee:	f6 01       	movw	r30, r12
 7f0:	82 2f       	mov	r24, r18
 7f2:	90 e3       	ldi	r25, 0x30	; 48
 7f4:	88 23       	and	r24, r24
 7f6:	19 f0       	breq	.+6      	; 0x7fe <dtoa_prf+0x1e4>
 7f8:	91 93       	st	Z+, r25
 7fa:	81 50       	subi	r24, 0x01	; 1
 7fc:	fb cf       	rjmp	.-10     	; 0x7f4 <dtoa_prf+0x1da>
 7fe:	c2 0e       	add	r12, r18
 800:	d1 1c       	adc	r13, r1
 802:	20 e0       	ldi	r18, 0x00	; 0
 804:	0f 2d       	mov	r16, r15
 806:	06 0f       	add	r16, r22
 808:	9a 81       	ldd	r25, Y+2	; 0x02
 80a:	34 2f       	mov	r19, r20
 80c:	30 71       	andi	r19, 0x10	; 16
 80e:	44 ff       	sbrs	r20, 4
 810:	03 c0       	rjmp	.+6      	; 0x818 <dtoa_prf+0x1fe>
 812:	91 33       	cpi	r25, 0x31	; 49
 814:	09 f4       	brne	.+2      	; 0x818 <dtoa_prf+0x1fe>
 816:	01 50       	subi	r16, 0x01	; 1
 818:	10 16       	cp	r1, r16
 81a:	24 f4       	brge	.+8      	; 0x824 <dtoa_prf+0x20a>
 81c:	09 30       	cpi	r16, 0x09	; 9
 81e:	18 f0       	brcs	.+6      	; 0x826 <dtoa_prf+0x20c>
 820:	08 e0       	ldi	r16, 0x08	; 8
 822:	01 c0       	rjmp	.+2      	; 0x826 <dtoa_prf+0x20c>
 824:	01 e0       	ldi	r16, 0x01	; 1
 826:	ab 01       	movw	r20, r22
 828:	77 ff       	sbrs	r23, 7
 82a:	02 c0       	rjmp	.+4      	; 0x830 <dtoa_prf+0x216>
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	fb 01       	movw	r30, r22
 832:	e4 1b       	sub	r30, r20
 834:	f5 0b       	sbc	r31, r21
 836:	a1 e0       	ldi	r26, 0x01	; 1
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	ac 0f       	add	r26, r28
 83c:	bd 1f       	adc	r27, r29
 83e:	ea 0f       	add	r30, r26
 840:	fb 1f       	adc	r31, r27
 842:	8e e2       	ldi	r24, 0x2E	; 46
 844:	a8 2e       	mov	r10, r24
 846:	4b 01       	movw	r8, r22
 848:	80 1a       	sub	r8, r16
 84a:	91 08       	sbc	r9, r1
 84c:	0b 2d       	mov	r16, r11
 84e:	10 e0       	ldi	r17, 0x00	; 0
 850:	11 95       	neg	r17
 852:	01 95       	neg	r16
 854:	11 09       	sbc	r17, r1
 856:	4f 3f       	cpi	r20, 0xFF	; 255
 858:	bf ef       	ldi	r27, 0xFF	; 255
 85a:	5b 07       	cpc	r21, r27
 85c:	21 f4       	brne	.+8      	; 0x866 <dtoa_prf+0x24c>
 85e:	d6 01       	movw	r26, r12
 860:	ac 92       	st	X, r10
 862:	11 96       	adiw	r26, 0x01	; 1
 864:	6d 01       	movw	r12, r26
 866:	64 17       	cp	r22, r20
 868:	75 07       	cpc	r23, r21
 86a:	2c f0       	brlt	.+10     	; 0x876 <dtoa_prf+0x25c>
 86c:	84 16       	cp	r8, r20
 86e:	95 06       	cpc	r9, r21
 870:	14 f4       	brge	.+4      	; 0x876 <dtoa_prf+0x25c>
 872:	81 81       	ldd	r24, Z+1	; 0x01
 874:	01 c0       	rjmp	.+2      	; 0x878 <dtoa_prf+0x25e>
 876:	80 e3       	ldi	r24, 0x30	; 48
 878:	41 50       	subi	r20, 0x01	; 1
 87a:	51 09       	sbc	r21, r1
 87c:	31 96       	adiw	r30, 0x01	; 1
 87e:	d6 01       	movw	r26, r12
 880:	11 96       	adiw	r26, 0x01	; 1
 882:	7d 01       	movw	r14, r26
 884:	40 17       	cp	r20, r16
 886:	51 07       	cpc	r21, r17
 888:	24 f0       	brlt	.+8      	; 0x892 <dtoa_prf+0x278>
 88a:	d6 01       	movw	r26, r12
 88c:	8c 93       	st	X, r24
 88e:	67 01       	movw	r12, r14
 890:	e2 cf       	rjmp	.-60     	; 0x856 <dtoa_prf+0x23c>
 892:	64 17       	cp	r22, r20
 894:	75 07       	cpc	r23, r21
 896:	39 f4       	brne	.+14     	; 0x8a6 <dtoa_prf+0x28c>
 898:	96 33       	cpi	r25, 0x36	; 54
 89a:	20 f4       	brcc	.+8      	; 0x8a4 <dtoa_prf+0x28a>
 89c:	95 33       	cpi	r25, 0x35	; 53
 89e:	19 f4       	brne	.+6      	; 0x8a6 <dtoa_prf+0x28c>
 8a0:	31 11       	cpse	r19, r1
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <dtoa_prf+0x28c>
 8a4:	81 e3       	ldi	r24, 0x31	; 49
 8a6:	f6 01       	movw	r30, r12
 8a8:	80 83       	st	Z, r24
 8aa:	f7 01       	movw	r30, r14
 8ac:	82 2f       	mov	r24, r18
 8ae:	90 e2       	ldi	r25, 0x20	; 32
 8b0:	88 23       	and	r24, r24
 8b2:	19 f0       	breq	.+6      	; 0x8ba <dtoa_prf+0x2a0>
 8b4:	91 93       	st	Z+, r25
 8b6:	81 50       	subi	r24, 0x01	; 1
 8b8:	fb cf       	rjmp	.-10     	; 0x8b0 <dtoa_prf+0x296>
 8ba:	f7 01       	movw	r30, r14
 8bc:	e2 0f       	add	r30, r18
 8be:	f1 1d       	adc	r31, r1
 8c0:	10 82       	st	Z, r1
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	29 96       	adiw	r28, 0x09	; 9
 8c8:	ec e0       	ldi	r30, 0x0C	; 12
 8ca:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__epilogue_restores__+0xc>

000008ce <__ftoa_engine>:
 8ce:	28 30       	cpi	r18, 0x08	; 8
 8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__ftoa_engine+0x6>
 8d2:	27 e0       	ldi	r18, 0x07	; 7
 8d4:	33 27       	eor	r19, r19
 8d6:	da 01       	movw	r26, r20
 8d8:	99 0f       	add	r25, r25
 8da:	31 1d       	adc	r19, r1
 8dc:	87 fd       	sbrc	r24, 7
 8de:	91 60       	ori	r25, 0x01	; 1
 8e0:	00 96       	adiw	r24, 0x00	; 0
 8e2:	61 05       	cpc	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	39 f4       	brne	.+14     	; 0x8f6 <__ftoa_engine+0x28>
 8e8:	32 60       	ori	r19, 0x02	; 2
 8ea:	2e 5f       	subi	r18, 0xFE	; 254
 8ec:	3d 93       	st	X+, r19
 8ee:	30 e3       	ldi	r19, 0x30	; 48
 8f0:	2a 95       	dec	r18
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <__ftoa_engine+0x1e>
 8f4:	08 95       	ret
 8f6:	9f 3f       	cpi	r25, 0xFF	; 255
 8f8:	30 f0       	brcs	.+12     	; 0x906 <__ftoa_engine+0x38>
 8fa:	80 38       	cpi	r24, 0x80	; 128
 8fc:	71 05       	cpc	r23, r1
 8fe:	61 05       	cpc	r22, r1
 900:	09 f0       	breq	.+2      	; 0x904 <__ftoa_engine+0x36>
 902:	3c 5f       	subi	r19, 0xFC	; 252
 904:	3c 5f       	subi	r19, 0xFC	; 252
 906:	3d 93       	st	X+, r19
 908:	91 30       	cpi	r25, 0x01	; 1
 90a:	08 f0       	brcs	.+2      	; 0x90e <__ftoa_engine+0x40>
 90c:	80 68       	ori	r24, 0x80	; 128
 90e:	91 1d       	adc	r25, r1
 910:	df 93       	push	r29
 912:	cf 93       	push	r28
 914:	1f 93       	push	r17
 916:	0f 93       	push	r16
 918:	ff 92       	push	r15
 91a:	ef 92       	push	r14
 91c:	19 2f       	mov	r17, r25
 91e:	98 7f       	andi	r25, 0xF8	; 248
 920:	96 95       	lsr	r25
 922:	e9 2f       	mov	r30, r25
 924:	96 95       	lsr	r25
 926:	96 95       	lsr	r25
 928:	e9 0f       	add	r30, r25
 92a:	ff 27       	eor	r31, r31
 92c:	ee 53       	subi	r30, 0x3E	; 62
 92e:	ff 4f       	sbci	r31, 0xFF	; 255
 930:	99 27       	eor	r25, r25
 932:	33 27       	eor	r19, r19
 934:	ee 24       	eor	r14, r14
 936:	ff 24       	eor	r15, r15
 938:	a7 01       	movw	r20, r14
 93a:	e7 01       	movw	r28, r14
 93c:	05 90       	lpm	r0, Z+
 93e:	08 94       	sec
 940:	07 94       	ror	r0
 942:	28 f4       	brcc	.+10     	; 0x94e <__ftoa_engine+0x80>
 944:	36 0f       	add	r19, r22
 946:	e7 1e       	adc	r14, r23
 948:	f8 1e       	adc	r15, r24
 94a:	49 1f       	adc	r20, r25
 94c:	51 1d       	adc	r21, r1
 94e:	66 0f       	add	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	06 94       	lsr	r0
 958:	a1 f7       	brne	.-24     	; 0x942 <__ftoa_engine+0x74>
 95a:	05 90       	lpm	r0, Z+
 95c:	07 94       	ror	r0
 95e:	28 f4       	brcc	.+10     	; 0x96a <__ftoa_engine+0x9c>
 960:	e7 0e       	add	r14, r23
 962:	f8 1e       	adc	r15, r24
 964:	49 1f       	adc	r20, r25
 966:	56 1f       	adc	r21, r22
 968:	c1 1d       	adc	r28, r1
 96a:	77 0f       	add	r23, r23
 96c:	88 1f       	adc	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	66 1f       	adc	r22, r22
 972:	06 94       	lsr	r0
 974:	a1 f7       	brne	.-24     	; 0x95e <__ftoa_engine+0x90>
 976:	05 90       	lpm	r0, Z+
 978:	07 94       	ror	r0
 97a:	28 f4       	brcc	.+10     	; 0x986 <__ftoa_engine+0xb8>
 97c:	f8 0e       	add	r15, r24
 97e:	49 1f       	adc	r20, r25
 980:	56 1f       	adc	r21, r22
 982:	c7 1f       	adc	r28, r23
 984:	d1 1d       	adc	r29, r1
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	66 1f       	adc	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	06 94       	lsr	r0
 990:	a1 f7       	brne	.-24     	; 0x97a <__ftoa_engine+0xac>
 992:	05 90       	lpm	r0, Z+
 994:	07 94       	ror	r0
 996:	20 f4       	brcc	.+8      	; 0x9a0 <__ftoa_engine+0xd2>
 998:	49 0f       	add	r20, r25
 99a:	56 1f       	adc	r21, r22
 99c:	c7 1f       	adc	r28, r23
 99e:	d8 1f       	adc	r29, r24
 9a0:	99 0f       	add	r25, r25
 9a2:	66 1f       	adc	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	06 94       	lsr	r0
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__ftoa_engine+0xc8>
 9ac:	84 91       	lpm	r24, Z
 9ae:	10 95       	com	r17
 9b0:	17 70       	andi	r17, 0x07	; 7
 9b2:	41 f0       	breq	.+16     	; 0x9c4 <__ftoa_engine+0xf6>
 9b4:	d6 95       	lsr	r29
 9b6:	c7 95       	ror	r28
 9b8:	57 95       	ror	r21
 9ba:	47 95       	ror	r20
 9bc:	f7 94       	ror	r15
 9be:	e7 94       	ror	r14
 9c0:	1a 95       	dec	r17
 9c2:	c1 f7       	brne	.-16     	; 0x9b4 <__ftoa_engine+0xe6>
 9c4:	e8 e6       	ldi	r30, 0x68	; 104
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	68 94       	set
 9ca:	15 90       	lpm	r1, Z+
 9cc:	15 91       	lpm	r17, Z+
 9ce:	35 91       	lpm	r19, Z+
 9d0:	65 91       	lpm	r22, Z+
 9d2:	95 91       	lpm	r25, Z+
 9d4:	05 90       	lpm	r0, Z+
 9d6:	7f e2       	ldi	r23, 0x2F	; 47
 9d8:	73 95       	inc	r23
 9da:	e1 18       	sub	r14, r1
 9dc:	f1 0a       	sbc	r15, r17
 9de:	43 0b       	sbc	r20, r19
 9e0:	56 0b       	sbc	r21, r22
 9e2:	c9 0b       	sbc	r28, r25
 9e4:	d0 09       	sbc	r29, r0
 9e6:	c0 f7       	brcc	.-16     	; 0x9d8 <__ftoa_engine+0x10a>
 9e8:	e1 0c       	add	r14, r1
 9ea:	f1 1e       	adc	r15, r17
 9ec:	43 1f       	adc	r20, r19
 9ee:	56 1f       	adc	r21, r22
 9f0:	c9 1f       	adc	r28, r25
 9f2:	d0 1d       	adc	r29, r0
 9f4:	7e f4       	brtc	.+30     	; 0xa14 <__ftoa_engine+0x146>
 9f6:	70 33       	cpi	r23, 0x30	; 48
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__ftoa_engine+0x130>
 9fa:	8a 95       	dec	r24
 9fc:	e6 cf       	rjmp	.-52     	; 0x9ca <__ftoa_engine+0xfc>
 9fe:	e8 94       	clt
 a00:	01 50       	subi	r16, 0x01	; 1
 a02:	30 f0       	brcs	.+12     	; 0xa10 <__ftoa_engine+0x142>
 a04:	08 0f       	add	r16, r24
 a06:	0a f4       	brpl	.+2      	; 0xa0a <__ftoa_engine+0x13c>
 a08:	00 27       	eor	r16, r16
 a0a:	02 17       	cp	r16, r18
 a0c:	08 f4       	brcc	.+2      	; 0xa10 <__ftoa_engine+0x142>
 a0e:	20 2f       	mov	r18, r16
 a10:	23 95       	inc	r18
 a12:	02 2f       	mov	r16, r18
 a14:	7a 33       	cpi	r23, 0x3A	; 58
 a16:	28 f0       	brcs	.+10     	; 0xa22 <__ftoa_engine+0x154>
 a18:	79 e3       	ldi	r23, 0x39	; 57
 a1a:	7d 93       	st	X+, r23
 a1c:	2a 95       	dec	r18
 a1e:	e9 f7       	brne	.-6      	; 0xa1a <__ftoa_engine+0x14c>
 a20:	10 c0       	rjmp	.+32     	; 0xa42 <__ftoa_engine+0x174>
 a22:	7d 93       	st	X+, r23
 a24:	2a 95       	dec	r18
 a26:	89 f6       	brne	.-94     	; 0x9ca <__ftoa_engine+0xfc>
 a28:	06 94       	lsr	r0
 a2a:	97 95       	ror	r25
 a2c:	67 95       	ror	r22
 a2e:	37 95       	ror	r19
 a30:	17 95       	ror	r17
 a32:	17 94       	ror	r1
 a34:	e1 18       	sub	r14, r1
 a36:	f1 0a       	sbc	r15, r17
 a38:	43 0b       	sbc	r20, r19
 a3a:	56 0b       	sbc	r21, r22
 a3c:	c9 0b       	sbc	r28, r25
 a3e:	d0 09       	sbc	r29, r0
 a40:	98 f0       	brcs	.+38     	; 0xa68 <__ftoa_engine+0x19a>
 a42:	23 95       	inc	r18
 a44:	7e 91       	ld	r23, -X
 a46:	73 95       	inc	r23
 a48:	7a 33       	cpi	r23, 0x3A	; 58
 a4a:	08 f0       	brcs	.+2      	; 0xa4e <__ftoa_engine+0x180>
 a4c:	70 e3       	ldi	r23, 0x30	; 48
 a4e:	7c 93       	st	X, r23
 a50:	20 13       	cpse	r18, r16
 a52:	b8 f7       	brcc	.-18     	; 0xa42 <__ftoa_engine+0x174>
 a54:	7e 91       	ld	r23, -X
 a56:	70 61       	ori	r23, 0x10	; 16
 a58:	7d 93       	st	X+, r23
 a5a:	30 f0       	brcs	.+12     	; 0xa68 <__ftoa_engine+0x19a>
 a5c:	83 95       	inc	r24
 a5e:	71 e3       	ldi	r23, 0x31	; 49
 a60:	7d 93       	st	X+, r23
 a62:	70 e3       	ldi	r23, 0x30	; 48
 a64:	2a 95       	dec	r18
 a66:	e1 f7       	brne	.-8      	; 0xa60 <__ftoa_engine+0x192>
 a68:	11 24       	eor	r1, r1
 a6a:	ef 90       	pop	r14
 a6c:	ff 90       	pop	r15
 a6e:	0f 91       	pop	r16
 a70:	1f 91       	pop	r17
 a72:	cf 91       	pop	r28
 a74:	df 91       	pop	r29
 a76:	99 27       	eor	r25, r25
 a78:	87 fd       	sbrc	r24, 7
 a7a:	90 95       	com	r25
 a7c:	08 95       	ret

00000a7e <__prologue_saves__>:
 a7e:	2f 92       	push	r2
 a80:	3f 92       	push	r3
 a82:	4f 92       	push	r4
 a84:	5f 92       	push	r5
 a86:	6f 92       	push	r6
 a88:	7f 92       	push	r7
 a8a:	8f 92       	push	r8
 a8c:	9f 92       	push	r9
 a8e:	af 92       	push	r10
 a90:	bf 92       	push	r11
 a92:	cf 92       	push	r12
 a94:	df 92       	push	r13
 a96:	ef 92       	push	r14
 a98:	ff 92       	push	r15
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
 aa6:	ca 1b       	sub	r28, r26
 aa8:	db 0b       	sbc	r29, r27
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	09 94       	ijmp

00000ab6 <__epilogue_restores__>:
 ab6:	2a 88       	ldd	r2, Y+18	; 0x12
 ab8:	39 88       	ldd	r3, Y+17	; 0x11
 aba:	48 88       	ldd	r4, Y+16	; 0x10
 abc:	5f 84       	ldd	r5, Y+15	; 0x0f
 abe:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ac4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ac6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ac8:	b9 84       	ldd	r11, Y+9	; 0x09
 aca:	c8 84       	ldd	r12, Y+8	; 0x08
 acc:	df 80       	ldd	r13, Y+7	; 0x07
 ace:	ee 80       	ldd	r14, Y+6	; 0x06
 ad0:	fd 80       	ldd	r15, Y+5	; 0x05
 ad2:	0c 81       	ldd	r16, Y+4	; 0x04
 ad4:	1b 81       	ldd	r17, Y+3	; 0x03
 ad6:	aa 81       	ldd	r26, Y+2	; 0x02
 ad8:	b9 81       	ldd	r27, Y+1	; 0x01
 ada:	ce 0f       	add	r28, r30
 adc:	d1 1d       	adc	r29, r1
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
 ae8:	ed 01       	movw	r28, r26
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
