
U1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000022b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000987  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069f  00000000  00000000  00000bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  00001279  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000014c  0000014c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.initIOports 0000001a  0000011c  0000011c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    0000005a  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.window2  00000002  00800100  00800100  000001ee  2**0
                  ALLOC
 16 .bss.window1  00000002  00800102  00800102  000001ee  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000156  00000156  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000136  00000136  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000150  00000150  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 9b 00 	jmp	0x136	; 0x136 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initIOports:

0000011c <initIOports>:
unsigned int window2 = 0;

void initIOports(){

	// Set PC4 and PC5 as output pin for debug
	DDRC |= (1 << 5);
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << 4);
 122:	87 b1       	in	r24, 0x07	; 7
 124:	80 61       	ori	r24, 0x10	; 16
 126:	87 b9       	out	0x07, r24	; 7

	// Set PD3 and PD4 as input pins
    DDRD &= ~(1 << 3);
 128:	8a b1       	in	r24, 0x0a	; 10
 12a:	87 7f       	andi	r24, 0xF7	; 247
 12c:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << 4);
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	8f 7e       	andi	r24, 0xEF	; 239
 132:	8a b9       	out	0x0a, r24	; 10
 134:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
    //PORTD |= (1 << 4);
}

// changement de stratÃ©gie nous laissons tomber les interrupts pour simplement faire un polling
int main(void){
	initIOports();
  c2:	0e 94 8e 00 	call	0x11c	; 0x11c <initIOports>
	while(1){
		//read the state of the doors at pin 3 and 4
		window1 = PIND & (1 << 3);
  c6:	89 b1       	in	r24, 0x09	; 9
  c8:	88 70       	andi	r24, 0x08	; 8
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <window1+0x1>
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <window1>
		window2 = PIND & (1 << 4);
  d4:	29 b1       	in	r18, 0x09	; 9
  d6:	20 71       	andi	r18, 0x10	; 16
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		//if the door1 is open set PC5 pin to high otherwise set it to low
		if(window1 == 0){
  e2:	89 2b       	or	r24, r25
  e4:	21 f4       	brne	.+8      	; 0xee <main+0x2c>
			PORTC |= (1 << 5);
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <main+0x32>
		}else{
			PORTC &= ~(1 << 5);
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	88 b9       	out	0x08, r24	; 8
		}
		if(window2 == 0){
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fc:	89 2b       	or	r24, r25
  fe:	21 f4       	brne	.+8      	; 0x108 <main+0x46>
			PORTC |= (1 << 4);
 100:	88 b1       	in	r24, 0x08	; 8
 102:	80 61       	ori	r24, 0x10	; 16
 104:	88 b9       	out	0x08, r24	; 8
 106:	03 c0       	rjmp	.+6      	; 0x10e <main+0x4c>
		}else{
			PORTC &= ~(1 << 4);
 108:	88 b1       	in	r24, 0x08	; 8
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	87 ea       	ldi	r24, 0xA7	; 167
 110:	91 e6       	ldi	r25, 0x61	; 97
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x50>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x56>
 118:	00 00       	nop
 11a:	d5 cf       	rjmp	.-86     	; 0xc6 <main+0x4>

Disassembly of section .text.__dummy_fini:

00000154 <_fini>:
 154:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000156 <__funcs_on_exit>:
 156:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000158 <__simulator_exit>:
 158:	08 95       	ret

Disassembly of section .text.exit:

00000136 <exit>:
 136:	ec 01       	movw	r28, r24
 138:	0e 94 ab 00 	call	0x156	; 0x156 <__funcs_on_exit>
 13c:	0e 94 aa 00 	call	0x154	; 0x154 <_fini>
 140:	ce 01       	movw	r24, r28
 142:	0e 94 ac 00 	call	0x158	; 0x158 <__simulator_exit>
 146:	ce 01       	movw	r24, r28
 148:	0e 94 a8 00 	call	0x150	; 0x150 <_Exit>

Disassembly of section .text._Exit:

00000150 <_Exit>:
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
