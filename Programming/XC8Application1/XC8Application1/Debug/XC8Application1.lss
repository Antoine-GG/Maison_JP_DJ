
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000240  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000901  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025c  00000000  00000000  000011ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initInterrupts 00000022  00000166  00000166  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000028  0000013e  0000013e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 0000003e  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 0000003e  00000100  00000100  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.door2    00000002  00800100  00800100  00000240  2**0
                  ALLOC
 19 .bss.door1    00000002  00800102  00800102  00000240  2**0
                  ALLOC
 20 .text.__dummy_fini 00000002  000001a6  000001a6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001a8  000001a8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001aa  000001aa  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  00000188  00000188  0000021c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001a2  000001a2  00000236  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_2>
   c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  10:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  14:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  1c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  20:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  24:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  28:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  2c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  30:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  38:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  3c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  40:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  44:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  4c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  50:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  54:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  58:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  5c:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>
  64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  ba:	0c 94 c4 00 	jmp	0x188	; 0x188 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

0000019e <__bad_interrupt>:
 19e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initInterrupts:

00000166 <initInterrupts>:
	return 0;
}

void initInterrupts() {
	// Configure PD2 (INT0) and PD3 (INT1) as inputs
	DDRD &= ~((1 << PD2) | (1 << PD3));
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	83 7f       	andi	r24, 0xF3	; 243
 16a:	8a b9       	out	0x0a, r24	; 10
	//input pullup
	 PORTD |= (1 << PD2);  // Enable pull-up resistor (set the
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	8b b9       	out	0x0b, r24	; 11

	// Enable external interrupts for INT0 and INT1
	EIMSK |= (1 << INT0) | (1 << INT1);
 172:	8d b3       	in	r24, 0x1d	; 29
 174:	83 60       	ori	r24, 0x03	; 3
 176:	8d bb       	out	0x1d, r24	; 29
	
	// For example, to trigger on falling edges:
	//EICRA |= (1 << ISC01) | (1 << ISC11);
	
	// Configure interrupt triggering logic for status changes (both edges)
	EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11);
 178:	e9 e6       	ldi	r30, 0x69	; 105
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8f 60       	ori	r24, 0x0F	; 15
 180:	80 83       	st	Z, r24

	// Clear any pending interrupts
	EIFR = (1 << INTF0) | (1 << INTF1);
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	8c bb       	out	0x1c, r24	; 28
 186:	08 95       	ret

Disassembly of section .text.main:

0000013e <main>:
void initInterrupts();

int main(void) {
	
	// Configure PC5 as a debug output
	DDRC |= (1 << PC5);
 13e:	87 b1       	in	r24, 0x07	; 7
 140:	80 62       	ori	r24, 0x20	; 32
 142:	87 b9       	out	0x07, r24	; 7
	
	// Initialize external interrupts
	initInterrupts();
 144:	0e 94 b3 00 	call	0x166	; 0x166 <initInterrupts>

	// Enable global interrupts
	sei();
 148:	78 94       	sei

	// Main loop
	while (1) {
		
		if(door1 == 1){
 14a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <door1>
 14e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <door1+0x1>
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	21 f4       	brne	.+8      	; 0x15e <main+0x20>
			// Turn on the LED (set PD2 high)
			PORTC |= (1 << PC5);
 156:	88 b1       	in	r24, 0x08	; 8
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	88 b9       	out	0x08, r24	; 8
 15c:	f6 cf       	rjmp	.-20     	; 0x14a <main+0xc>
		}
		else{
			// Turn off the LED (clear PD2)
			PORTC &= ~(1 << PC5);			
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	8f 7d       	andi	r24, 0xDF	; 223
 162:	88 b9       	out	0x08, r24	; 8
 164:	f2 cf       	rjmp	.-28     	; 0x14a <main+0xc>

Disassembly of section .text.__vector_1:

000000c2 <__vector_1>:
	// Clear any pending interrupts
	EIFR = (1 << INTF0) | (1 << INTF1);
}

// Interrupt service routines
ISR(INT0_vect) {
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	// This code executes when INT0 (PD2) is triggered
	// Handle the door detector on PD2 here
	
	//flip the boolean value of door1
	if(door1 ==1){
  d0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <door1>
  d4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <door1+0x1>
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	29 f4       	brne	.+10     	; 0xe6 <__vector_1+0x24>
		door1 = 0;
  dc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <door1+0x1>
  e0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <door1>
  e4:	06 c0       	rjmp	.+12     	; 0xf2 <__vector_1+0x30>
	}
	else
	{
		door1 = 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <door1+0x1>
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <door1>
	}
	
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

Disassembly of section .text.__vector_2:

00000100 <__vector_2>:

ISR(INT1_vect) {
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	// This code executes when INT1 (PD3) is triggered
	// Handle the door detector on PD3 here
	
	//flip the boolean value of door1
	if(door1 ==1){
 10e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <door1>
 112:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <door1+0x1>
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	29 f4       	brne	.+10     	; 0x124 <__vector_2+0x24>
		door2 = 0;
 11a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 11e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	06 c0       	rjmp	.+12     	; 0x130 <__vector_2+0x30>
	}
	else
	{
		door2 = 1;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000001a6 <_fini>:
 1a6:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001a8 <__funcs_on_exit>:
 1a8:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001aa <__simulator_exit>:
 1aa:	08 95       	ret

Disassembly of section .text.exit:

00000188 <exit>:
 188:	ec 01       	movw	r28, r24
 18a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <__funcs_on_exit>
 18e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_fini>
 192:	ce 01       	movw	r24, r28
 194:	0e 94 d5 00 	call	0x1aa	; 0x1aa <__simulator_exit>
 198:	ce 01       	movw	r24, r28
 19a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Exit>

Disassembly of section .text._Exit:

000001a2 <_Exit>:
 1a2:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
