
UARTtester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001a9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a30  00000000  00000000  000001f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000729  00000000  00000000  00000c27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010b  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.initUSART 0000002a  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.transmitByte 0000000e  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000002a  000000aa  000000aa  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000100  00000100  00000174  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000102  00000102  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.initUSART:

00000080 <initUSART>:
	uint8_t i = 0;
	while (myString[i]) {
		transmitByte(myString[i]);
		i++;
	}
}
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  8a:	e0 ec       	ldi	r30, 0xC0	; 192
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	82 60       	ori	r24, 0x02	; 2
  92:	80 83       	st	Z, r24
  94:	e1 ec       	ldi	r30, 0xC1	; 193
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	80 83       	st	Z, r24
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	86 60       	ori	r24, 0x06	; 6
  a6:	80 83       	st	Z, r24
  a8:	08 95       	ret

Disassembly of section .text.transmitByte:

000000ea <transmitByte>:
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
}

void transmitByte(uint8_t data) {
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Attendre que le buffer de transmission soit vide */  	UDR0 = data;                      /* envoyer la donnée */
  ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ee:	95 ff       	sbrs	r25, 5
  f0:	fc cf       	rjmp	.-8      	; 0xea <transmitByte>
  f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f6:	08 95       	ret

Disassembly of section .text.main:

000000aa <main>:


int main(void)
{	
	uint8_t character = 30;
	initUSART();
  aa:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
}


int main(void)
{	
	uint8_t character = 30;
  ae:	ce e1       	ldi	r28, 0x1E	; 30
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0xa>
    {
		transmitByte('character');
		_delay_ms(250);
		character++;
		if(character >= 0xFF){
			character = 30;
  b2:	ce e1       	ldi	r28, 0x1E	; 30
{	
	uint8_t character = 30;
	initUSART();
    while(1)
    {
		transmitByte('character');
  b4:	82 e7       	ldi	r24, 0x72	; 114
  b6:	0e 94 75 00 	call	0xea	; 0xea <transmitByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e7       	ldi	r18, 0x7F	; 127
  bc:	8a e1       	ldi	r24, 0x1A	; 26
  be:	96 e0       	ldi	r25, 0x06	; 6
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x16>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x20>
  ca:	00 00       	nop
		_delay_ms(250);
		character++;
  cc:	cf 5f       	subi	r28, 0xFF	; 255
		if(character >= 0xFF){
  ce:	cf 3f       	cpi	r28, 0xFF	; 255
  d0:	89 f7       	brne	.-30     	; 0xb4 <main+0xa>
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <main+0x8>

Disassembly of section .text.__dummy_fini:

00000100 <_fini>:
 100:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000102 <__funcs_on_exit>:
 102:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000104 <__simulator_exit>:
 104:	08 95       	ret

Disassembly of section .text.exit:

000000d4 <exit>:
  d4:	ec 01       	movw	r28, r24
  d6:	0e 94 81 00 	call	0x102	; 0x102 <__funcs_on_exit>
  da:	0e 94 80 00 	call	0x100	; 0x100 <_fini>
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 82 00 	call	0x104	; 0x104 <__simulator_exit>
  e4:	ce 01       	movw	r24, r28
  e6:	0e 94 7e 00 	call	0xfc	; 0xfc <_Exit>

Disassembly of section .text._Exit:

000000fc <_Exit>:
  fc:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
