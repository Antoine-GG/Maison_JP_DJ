
U5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f6  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000008e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000541  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000140f  00000000  00000000  000005e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000914  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b9  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000253  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000087b  00000000  00000000  00002f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  000037aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000474  00000474  000004e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000038ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.playTone 000001b2  0000008e  0000008e  00000102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sound_success 00000014  0000042e  0000042e  000004a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.sound_input 00000008  00000466  00000466  000004da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sound_fail 0000000e  00000442  00000442  000004b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initIOports 00000038  000003e0  000003e0  00000454  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SPI_SlaveInit 00000006  0000046e  0000046e  000004e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_SlaveReceive 0000000a  0000045c  0000045c  000004d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.readShiftRegisters 00000064  0000037c  0000037c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    0000013c  00000240  00000240  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc  0000000c  00000450  00000450  000004c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_fini 00000002  0000047c  0000047c  000004f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  0000047e  0000047e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  00000480  00000480  000004f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  00000418  00000418  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  00000478  00000478  000004ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
   8:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
   c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  10:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  14:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  18:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  1c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  20:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  24:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  28:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  2c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  30:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  34:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  38:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  3c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  40:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  44:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  48:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  4c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  50:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  54:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  58:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  5c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  60:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  64:	0c 94 3a 02 	jmp	0x474	; 0x474 <__bad_interrupt>
  68:	64 00       	.word	0x0064	; ????
  6a:	83 00       	.word	0x0083	; ????
  6c:	9e 00       	.word	0x009e	; ????
  6e:	b9 00       	.word	0x00b9	; ????
  70:	d8 00       	.word	0x00d8	; ????
  72:	f7 00       	.word	0x00f7	; ????
  74:	16 01       	movw	r2, r12

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d4 e0       	ldi	r29, 0x04	; 4
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61
  82:	0e 94 20 01 	call	0x240	; 0x240 <main>
  86:	0c 94 0c 02 	jmp	0x418	; 0x418 <exit>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>

Disassembly of section .text:

00000474 <__bad_interrupt>:
 474:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.playTone:

0000008e <playTone>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	e1 56       	subi	r30, 0x61	; 97
  94:	f1 09       	sbc	r31, r1
  96:	e7 30       	cpi	r30, 0x07	; 7
  98:	f1 05       	cpc	r31, r1
  9a:	08 f0       	brcs	.+2      	; 0x9e <playTone+0x10>
  9c:	d0 c0       	rjmp	.+416    	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 28 02 	jmp	0x450	; 0x450 <__tablejump2__>
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
		{
			PORTB |= (1 << PB1);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	84 e2       	ldi	r24, 0x24	; 36
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <playTone+0x20>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <playTone+0x26>
			_delay_us(110);
			PORTB &= ~(1 << PB1);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	94 e2       	ldi	r25, 0x24	; 36
  bc:	9a 95       	dec	r25
  be:	f1 f7       	brne	.-4      	; 0xbc <playTone+0x2e>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <playTone+0x34>

void playTone(char note){
	switch (note)
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
  c2:	2e 5f       	subi	r18, 0xFE	; 254
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	02 c0       	rjmp	.+4      	; 0xcc <playTone+0x3e>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
  cc:	29 3e       	cpi	r18, 0xE9	; 233
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	38 07       	cpc	r19, r24
  d2:	4c f3       	brlt	.-46     	; 0xa6 <playTone+0x18>
			PORTB |= (1 << PB1);
			_delay_us(110);
			PORTB &= ~(1 << PB1);
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 b9       	out	0x05, r24	; 5
		break;
  da:	08 95       	ret
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
		{
			PORTB |= (1 << PB1);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <playTone+0x58>
  ea:	00 c0       	rjmp	.+0      	; 0xec <playTone+0x5e>
  ec:	00 00       	nop
			_delay_us(1024);
			PORTB &= ~(1 << PB1);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <playTone+0x6a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <playTone+0x70>
  fe:	00 00       	nop
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
 100:	20 5f       	subi	r18, 0xF0	; 240
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	02 c0       	rjmp	.+4      	; 0x10a <playTone+0x7c>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
 10a:	29 3e       	cpi	r18, 0xE9	; 233
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	39 07       	cpc	r19, r25
 110:	2c f3       	brlt	.-54     	; 0xdc <playTone+0x4e>
			PORTB |= (1 << PB1);
			_delay_us(1024);
			PORTB &= ~(1 << PB1);
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	85 b9       	out	0x05, r24	; 5
		break;
 118:	08 95       	ret
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
		{
			PORTB |= (1 << PB1);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	85 b9       	out	0x05, r24	; 5
 120:	8a ea       	ldi	r24, 0xAA	; 170
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <playTone+0x94>
 126:	00 c0       	rjmp	.+0      	; 0x128 <playTone+0x9a>
			_delay_us(512);
			PORTB &= ~(1 << PB1);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	9a ea       	ldi	r25, 0xAA	; 170
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <playTone+0xa2>
 134:	00 c0       	rjmp	.+0      	; 0x136 <playTone+0xa8>
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
 136:	28 5f       	subi	r18, 0xF8	; 248
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	02 c0       	rjmp	.+4      	; 0x140 <playTone+0xb2>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
 140:	29 3e       	cpi	r18, 0xE9	; 233
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	38 07       	cpc	r19, r24
 146:	4c f3       	brlt	.-46     	; 0x11a <playTone+0x8c>
			PORTB |= (1 << PB1);
			_delay_us(512);
			PORTB &= ~(1 << PB1);
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	85 b9       	out	0x05, r24	; 5
		break;
 14e:	08 95       	ret
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
		{
			PORTB |= (1 << PB1);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	82 60       	ori	r24, 0x02	; 2
 154:	85 b9       	out	0x05, r24	; 5
 156:	92 e9       	ldi	r25, 0x92	; 146
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <playTone+0xca>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <playTone+0xd0>
			_delay_us(440);
			PORTB &= ~(1 << PB1);
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	85 b9       	out	0x05, r24	; 5
 164:	82 e9       	ldi	r24, 0x92	; 146
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <playTone+0xd8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <playTone+0xde>
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
 16c:	24 5f       	subi	r18, 0xF4	; 244
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	02 c0       	rjmp	.+4      	; 0x176 <playTone+0xe8>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
 176:	29 3e       	cpi	r18, 0xE9	; 233
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	39 07       	cpc	r19, r25
 17c:	4c f3       	brlt	.-46     	; 0x150 <playTone+0xc2>
			PORTB |= (1 << PB1);
			_delay_us(440);
			PORTB &= ~(1 << PB1);
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	85 b9       	out	0x05, r24	; 5
		break;
 184:	08 95       	ret
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
		{
			PORTB |= (1 << PB1);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	85 e2       	ldi	r24, 0x25	; 37
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <playTone+0x102>
 194:	00 c0       	rjmp	.+0      	; 0x196 <playTone+0x108>
 196:	00 00       	nop
			_delay_us(2200);
			PORTB &= ~(1 << PB1);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	8d 7f       	andi	r24, 0xFD	; 253
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <playTone+0x114>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <playTone+0x11a>
 1a8:	00 00       	nop
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
 1aa:	26 5f       	subi	r18, 0xF6	; 246
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <playTone+0x126>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
 1b4:	29 3e       	cpi	r18, 0xE9	; 233
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	39 07       	cpc	r19, r25
 1ba:	2c f3       	brlt	.-54     	; 0x186 <playTone+0xf8>
			PORTB |= (1 << PB1);
			_delay_us(2200);
			PORTB &= ~(1 << PB1);
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	85 b9       	out	0x05, r24	; 5
		break;
 1c2:	08 95       	ret
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
		{
			PORTB |= (1 << PB1);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	83 e5       	ldi	r24, 0x53	; 83
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <playTone+0x140>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <playTone+0x146>
 1d4:	00 00       	nop
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	8d 7f       	andi	r24, 0xFD	; 253
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	83 e5       	ldi	r24, 0x53	; 83
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <playTone+0x152>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <playTone+0x158>
 1e6:	00 00       	nop
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
 1e8:	28 5f       	subi	r18, 0xF8	; 248
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <playTone+0x164>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
 1f2:	29 3e       	cpi	r18, 0xE9	; 233
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	39 07       	cpc	r19, r25
 1f8:	2c f3       	brlt	.-54     	; 0x1c4 <playTone+0x136>
			PORTB |= (1 << PB1);
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	85 b9       	out	0x05, r24	; 5
		break;
 200:	08 95       	ret
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
		{
			PORTB |= (1 << PB1);
 202:	85 b1       	in	r24, 0x05	; 5
 204:	82 60       	ori	r24, 0x02	; 2
 206:	85 b9       	out	0x05, r24	; 5
 208:	83 e5       	ldi	r24, 0x53	; 83
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 210:	00 c0       	rjmp	.+0      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 212:	00 00       	nop
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
 214:	85 b1       	in	r24, 0x05	; 5
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	85 b9       	out	0x05, r24	; 5
 21a:	83 e5       	ldi	r24, 0x53	; 83
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
 226:	24 52       	subi	r18, 0x24	; 36
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	02 c0       	rjmp	.+4      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
 230:	29 3e       	cpi	r18, 0xE9	; 233
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	39 07       	cpc	r19, r25
 236:	2c f3       	brlt	.-54     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
			PORTB |= (1 << PB1);
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	08 95       	ret

Disassembly of section .text.sound_success:

0000042e <sound_success>:
	}
	
	
}
void sound_success(){
	playTone('b');
 42e:	82 e6       	ldi	r24, 0x62	; 98
 430:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
	playTone('c');
 434:	83 e6       	ldi	r24, 0x63	; 99
 436:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
	playTone('a');
 43a:	81 e6       	ldi	r24, 0x61	; 97
 43c:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
 440:	08 95       	ret

Disassembly of section .text.sound_input:

00000466 <sound_input>:
}
void sound_input(){
	playTone('d');
 466:	84 e6       	ldi	r24, 0x64	; 100
 468:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
 46c:	08 95       	ret

Disassembly of section .text.sound_fail:

00000442 <sound_fail>:
}
void sound_fail(){
	playTone('f');
 442:	86 e6       	ldi	r24, 0x66	; 102
 444:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
	playTone('e');
 448:	85 e6       	ldi	r24, 0x65	; 101
 44a:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
 44e:	08 95       	ret

Disassembly of section .text.initIOports:

000003e0 <initIOports>:
#define KEY_6     0x4000
#define KEY_3     0x8000

void initIOports(){
	// Initialize I/O pins
	DDRB |= (1 << PB1); // Buzzer pin as output
 3e0:	84 b1       	in	r24, 0x04	; 4
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << LATCH_PIN); // Latch pin as output
 3e6:	87 b1       	in	r24, 0x07	; 7
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << CLOCK_PIN); // Clock pin as output
 3ec:	87 b1       	in	r24, 0x07	; 7
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DATA_PIN); // Data pin as input
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	87 b9       	out	0x07, r24	; 7
	//MISO as output, all others input
	DDRB |= (1 << MISO_PIN);
 3f8:	84 b1       	in	r24, 0x04	; 4
 3fa:	80 61       	ori	r24, 0x10	; 16
 3fc:	84 b9       	out	0x04, r24	; 4
	//SPI inputs
	DDRB &= ~(1 << SS_PIN);
 3fe:	84 b1       	in	r24, 0x04	; 4
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MOSI_PIN);
 404:	84 b1       	in	r24, 0x04	; 4
 406:	87 7f       	andi	r24, 0xF7	; 247
 408:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << SCK_PIN);
 40a:	84 b1       	in	r24, 0x04	; 4
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	84 b9       	out	0x04, r24	; 4
	
	// Enable pull-up resistor for data pin
	PORTC |= (1 << DATA_PIN);
 410:	88 b1       	in	r24, 0x08	; 8
 412:	84 60       	ori	r24, 0x04	; 4
 414:	88 b9       	out	0x08, r24	; 8
 416:	08 95       	ret

Disassembly of section .text.SPI_SlaveInit:

0000046e <SPI_SlaveInit>:
		
}
void SPI_SlaveInit(void)
{
	/* Enable SPI */
	SPCR = (1<<SPE);
 46e:	80 e4       	ldi	r24, 0x40	; 64
 470:	8c bd       	out	0x2c, r24	; 44
 472:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

0000045c <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void)
{	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 45c:	0d b4       	in	r0, 0x2d	; 45
 45e:	07 fe       	sbrs	r0, 7
 460:	fd cf       	rjmp	.-6      	; 0x45c <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 462:	8e b5       	in	r24, 0x2e	; 46
}
 464:	08 95       	ret

Disassembly of section .text.readShiftRegisters:

0000037c <readShiftRegisters>:
// Function to read data from the shift registers
uint16_t readShiftRegisters() {
	uint16_t data = 0;
	
	// Latch low, fin de la dompe parallele precedente
	PORTC |= (1 << LATCH_PIN);
 37c:	88 b1       	in	r24, 0x08	; 8
 37e:	81 60       	ori	r24, 0x01	; 1
 380:	88 b9       	out	0x08, r24	; 8
 382:	85 e0       	ldi	r24, 0x05	; 5
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <readShiftRegisters+0x8>
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
 388:	88 b1       	in	r24, 0x08	; 8
 38a:	8e 7f       	andi	r24, 0xFE	; 254
 38c:	88 b9       	out	0x08, r24	; 8
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <readShiftRegisters+0x14>
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
 394:	88 b1       	in	r24, 0x08	; 8
 396:	8e 7f       	andi	r24, 0xFE	; 254
 398:	88 b9       	out	0x08, r24	; 8
 39a:	85 e0       	ldi	r24, 0x05	; 5
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <readShiftRegisters+0x20>
	_delay_us(15);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	50 e0       	ldi	r21, 0x00	; 0
//SPI CALLS


// Function to read data from the shift registers
uint16_t readShiftRegisters() {
	uint16_t data = 0;
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 3a8:	16 c0       	rjmp	.+44     	; 0x3d6 <readShiftRegisters+0x5a>
		// Pulse the clock pin to shift in the next bit
		PORTC |= (1 << CLOCK_PIN);
 3aa:	98 b1       	in	r25, 0x08	; 8
 3ac:	92 60       	ori	r25, 0x02	; 2
 3ae:	98 b9       	out	0x08, r25	; 8
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	8a 95       	dec	r24
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <readShiftRegisters+0x36>
		_delay_us(15); // Adjust delay as needed based on your clock frequency
		PORTC &= ~(1 << CLOCK_PIN);
 3b6:	98 b1       	in	r25, 0x08	; 8
 3b8:	9d 7f       	andi	r25, 0xFD	; 253
 3ba:	98 b9       	out	0x08, r25	; 8
		
		// Read the data pin and store the bit
		data |= (PINC & (1 << DATA_PIN)) << i;
 3bc:	26 b1       	in	r18, 0x06	; 6
 3be:	24 70       	andi	r18, 0x04	; 4
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	04 2e       	mov	r0, r20
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <readShiftRegisters+0x4e>
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <readShiftRegisters+0x4a>
 3ce:	62 2b       	or	r22, r18
 3d0:	73 2b       	or	r23, r19
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	40 31       	cpi	r20, 0x10	; 16
 3d8:	51 05       	cpc	r21, r1
 3da:	3c f3       	brlt	.-50     	; 0x3aa <readShiftRegisters+0x2e>
		
		// Read the data pin and store the bit
		data |= (PINC & (1 << DATA_PIN)) << i;
	}
	return data;
}
 3dc:	cb 01       	movw	r24, r22
 3de:	08 95       	ret

Disassembly of section .text.main:

00000240 <main>:
	uint8_t i = 0;
	while (myString[i]) {
		SPI_SlaveTransmit(myString[i]);
		i++;
	}
}
 240:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <initIOports>
 244:	0e 94 37 02 	call	0x46e	; 0x46e <SPI_SlaveInit>
 248:	0e 94 be 01 	call	0x37c	; 0x37c <readShiftRegisters>
 24c:	80 38       	cpi	r24, 0x80	; 128
 24e:	91 05       	cpc	r25, r1
 250:	09 f4       	brne	.+2      	; 0x254 <main+0x14>
 252:	62 c0       	rjmp	.+196    	; 0x318 <main+0xd8>
 254:	b0 f4       	brcc	.+44     	; 0x282 <main+0x42>
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	91 05       	cpc	r25, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <main+0x1e>
 25c:	69 c0       	rjmp	.+210    	; 0x330 <main+0xf0>
 25e:	38 f4       	brcc	.+14     	; 0x26e <main+0x2e>
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	09 f4       	brne	.+2      	; 0x266 <main+0x26>
 264:	73 c0       	rjmp	.+230    	; 0x34c <main+0x10c>
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	09 f4       	brne	.+2      	; 0x26c <main+0x2c>
 26a:	50 c0       	rjmp	.+160    	; 0x30c <main+0xcc>
 26c:	6d c0       	rjmp	.+218    	; 0x348 <main+0x108>
 26e:	80 32       	cpi	r24, 0x20	; 32
 270:	91 05       	cpc	r25, r1
 272:	41 f1       	breq	.+80     	; 0x2c4 <main+0x84>
 274:	80 34       	cpi	r24, 0x40	; 64
 276:	91 05       	cpc	r25, r1
 278:	f9 f0       	breq	.+62     	; 0x2b8 <main+0x78>
 27a:	40 97       	sbiw	r24, 0x10	; 16
 27c:	09 f0       	breq	.+2      	; 0x280 <main+0x40>
 27e:	64 c0       	rjmp	.+200    	; 0x348 <main+0x108>
 280:	33 c0       	rjmp	.+102    	; 0x2e8 <main+0xa8>
 282:	81 15       	cp	r24, r1
 284:	20 e1       	ldi	r18, 0x10	; 16
 286:	92 07       	cpc	r25, r18
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x4c>
 28a:	58 c0       	rjmp	.+176    	; 0x33c <main+0xfc>
 28c:	40 f4       	brcc	.+16     	; 0x29e <main+0x5e>
 28e:	81 15       	cp	r24, r1
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	92 07       	cpc	r25, r18
 294:	e9 f0       	breq	.+58     	; 0x2d0 <main+0x90>
 296:	81 15       	cp	r24, r1
 298:	98 40       	sbci	r25, 0x08	; 8
 29a:	61 f1       	breq	.+88     	; 0x2f4 <main+0xb4>
 29c:	55 c0       	rjmp	.+170    	; 0x348 <main+0x108>
 29e:	81 15       	cp	r24, r1
 2a0:	20 e4       	ldi	r18, 0x40	; 64
 2a2:	92 07       	cpc	r25, r18
 2a4:	69 f1       	breq	.+90     	; 0x300 <main+0xc0>
 2a6:	81 15       	cp	r24, r1
 2a8:	20 e8       	ldi	r18, 0x80	; 128
 2aa:	92 07       	cpc	r25, r18
 2ac:	b9 f0       	breq	.+46     	; 0x2dc <main+0x9c>
 2ae:	81 15       	cp	r24, r1
 2b0:	90 42       	sbci	r25, 0x20	; 32
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <main+0x76>
 2b4:	49 c0       	rjmp	.+146    	; 0x348 <main+0x108>
 2b6:	36 c0       	rjmp	.+108    	; 0x324 <main+0xe4>
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	85 b9       	out	0x05, r24	; 5
 2be:	80 e3       	ldi	r24, 0x30	; 48
 2c0:	8e bd       	out	0x2e, r24	; 46
 2c2:	44 c0       	rjmp	.+136    	; 0x34c <main+0x10c>
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	85 b9       	out	0x05, r24	; 5
 2ca:	81 e3       	ldi	r24, 0x31	; 49
 2cc:	8e bd       	out	0x2e, r24	; 46
 2ce:	3e c0       	rjmp	.+124    	; 0x34c <main+0x10c>
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	85 b9       	out	0x05, r24	; 5
 2d6:	82 e3       	ldi	r24, 0x32	; 50
 2d8:	8e bd       	out	0x2e, r24	; 46
 2da:	38 c0       	rjmp	.+112    	; 0x34c <main+0x10c>
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	85 b9       	out	0x05, r24	; 5
 2e2:	83 e3       	ldi	r24, 0x33	; 51
 2e4:	8e bd       	out	0x2e, r24	; 46
 2e6:	32 c0       	rjmp	.+100    	; 0x34c <main+0x10c>
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	85 b9       	out	0x05, r24	; 5
 2ee:	84 e3       	ldi	r24, 0x34	; 52
 2f0:	8e bd       	out	0x2e, r24	; 46
 2f2:	2c c0       	rjmp	.+88     	; 0x34c <main+0x10c>
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	85 b9       	out	0x05, r24	; 5
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	8e bd       	out	0x2e, r24	; 46
 2fe:	26 c0       	rjmp	.+76     	; 0x34c <main+0x10c>
 300:	85 b1       	in	r24, 0x05	; 5
 302:	81 60       	ori	r24, 0x01	; 1
 304:	85 b9       	out	0x05, r24	; 5
 306:	86 e3       	ldi	r24, 0x36	; 54
 308:	8e bd       	out	0x2e, r24	; 46
 30a:	20 c0       	rjmp	.+64     	; 0x34c <main+0x10c>
 30c:	85 b1       	in	r24, 0x05	; 5
 30e:	8e 7f       	andi	r24, 0xFE	; 254
 310:	85 b9       	out	0x05, r24	; 5
 312:	87 e3       	ldi	r24, 0x37	; 55
 314:	8e bd       	out	0x2e, r24	; 46
 316:	1a c0       	rjmp	.+52     	; 0x34c <main+0x10c>
 318:	85 b1       	in	r24, 0x05	; 5
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	85 b9       	out	0x05, r24	; 5
 31e:	88 e3       	ldi	r24, 0x38	; 56
 320:	8e bd       	out	0x2e, r24	; 46
 322:	14 c0       	rjmp	.+40     	; 0x34c <main+0x10c>
 324:	85 b1       	in	r24, 0x05	; 5
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	85 b9       	out	0x05, r24	; 5
 32a:	89 e3       	ldi	r24, 0x39	; 57
 32c:	8e bd       	out	0x2e, r24	; 46
 32e:	0e c0       	rjmp	.+28     	; 0x34c <main+0x10c>
 330:	85 b1       	in	r24, 0x05	; 5
 332:	81 60       	ori	r24, 0x01	; 1
 334:	85 b9       	out	0x05, r24	; 5
 336:	81 e4       	ldi	r24, 0x41	; 65
 338:	8e bd       	out	0x2e, r24	; 46
 33a:	08 c0       	rjmp	.+16     	; 0x34c <main+0x10c>
 33c:	85 b1       	in	r24, 0x05	; 5
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	85 b9       	out	0x05, r24	; 5
 342:	82 e4       	ldi	r24, 0x42	; 66
 344:	8e bd       	out	0x2e, r24	; 46
 346:	02 c0       	rjmp	.+4      	; 0x34c <main+0x10c>
 348:	88 e5       	ldi	r24, 0x58	; 88
 34a:	8e bd       	out	0x2e, r24	; 46
 34c:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_SlaveReceive>
 350:	80 3e       	cpi	r24, 0xE0	; 224
 352:	41 f0       	breq	.+16     	; 0x364 <main+0x124>
 354:	80 3f       	cpi	r24, 0xF0	; 240
 356:	19 f0       	breq	.+6      	; 0x35e <main+0x11e>
 358:	80 3d       	cpi	r24, 0xD0	; 208
 35a:	49 f4       	brne	.+18     	; 0x36e <main+0x12e>
 35c:	06 c0       	rjmp	.+12     	; 0x36a <main+0x12a>
 35e:	0e 94 33 02 	call	0x466	; 0x466 <sound_input>
 362:	05 c0       	rjmp	.+10     	; 0x36e <main+0x12e>
 364:	0e 94 21 02 	call	0x442	; 0x442 <sound_fail>
 368:	02 c0       	rjmp	.+4      	; 0x36e <main+0x12e>
 36a:	0e 94 17 02 	call	0x42e	; 0x42e <sound_success>
 36e:	89 ef       	ldi	r24, 0xF9	; 249
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x132>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x138>
 378:	00 00       	nop
 37a:	66 cf       	rjmp	.-308    	; 0x248 <main+0x8>

Disassembly of section .text.libgcc:

00000450 <__tablejump2__>:
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	05 90       	lpm	r0, Z+
 456:	f4 91       	lpm	r31, Z
 458:	e0 2d       	mov	r30, r0
 45a:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

0000047c <_fini>:
 47c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000047e <__funcs_on_exit>:
 47e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000480 <__simulator_exit>:
 480:	08 95       	ret

Disassembly of section .text.exit:

00000418 <exit>:
 418:	ec 01       	movw	r28, r24
 41a:	0e 94 3f 02 	call	0x47e	; 0x47e <__funcs_on_exit>
 41e:	0e 94 3e 02 	call	0x47c	; 0x47c <_fini>
 422:	ce 01       	movw	r24, r28
 424:	0e 94 40 02 	call	0x480	; 0x480 <__simulator_exit>
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 3c 02 	call	0x478	; 0x478 <_Exit>

Disassembly of section .text._Exit:

00000478 <_Exit>:
 478:	0e 94 45 00 	call	0x8a	; 0x8a <_exit>
