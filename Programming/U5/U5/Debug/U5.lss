
U5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000059c  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000008e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000005e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000148c  00000000  00000000  00000687  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000945  00000000  00000000  00001b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000914  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000265  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000807  00000000  00000000  000030ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000051a  0000051a  0000058e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.playTone 000001b2  0000008e  0000008e  00000102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sound_success 00000014  000004c6  000004c6  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.sound_input 00000008  0000050c  0000050c  00000580  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sound_fail 0000000e  000004da  000004da  0000054e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initIOports 00000038  0000044e  0000044e  000004c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SPI_SlaveInit 00000006  00000514  00000514  00000588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_SlaveReceive 0000000a  00000502  00000502  00000576  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.initUSART 0000002a  00000486  00000486  000004fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.uartByteTransmit 0000000e  000004e8  000004e8  0000055c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.readShiftRegisters 00000064  000003ea  000003ea  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    000001aa  00000240  00000240  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc  0000000c  000004f6  000004f6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_fini 00000002  00000522  00000522  00000596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  00000524  00000524  00000598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  00000526  00000526  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    00000016  000004b0  000004b0  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._Exit   00000004  0000051e  0000051e  00000592  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
   8:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
   c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  10:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  14:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  18:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  1c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  20:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  24:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  28:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  2c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  30:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  34:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  38:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  3c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  40:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  44:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  48:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  4c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  50:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  54:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  58:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  5c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  60:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  64:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__bad_interrupt>
  68:	64 00       	.word	0x0064	; ????
  6a:	83 00       	.word	0x0083	; ????
  6c:	9e 00       	.word	0x009e	; ????
  6e:	b9 00       	.word	0x00b9	; ????
  70:	d8 00       	.word	0x00d8	; ????
  72:	f7 00       	.word	0x00f7	; ????
  74:	16 01       	movw	r2, r12

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d4 e0       	ldi	r29, 0x04	; 4
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61
  82:	0e 94 20 01 	call	0x240	; 0x240 <main>
  86:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <exit>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>

Disassembly of section .text:

0000051a <__bad_interrupt>:
 51a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.playTone:

0000008e <playTone>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	e1 56       	subi	r30, 0x61	; 97
  94:	f1 09       	sbc	r31, r1
  96:	e7 30       	cpi	r30, 0x07	; 7
  98:	f1 05       	cpc	r31, r1
  9a:	08 f0       	brcs	.+2      	; 0x9e <playTone+0x10>
  9c:	d0 c0       	rjmp	.+416    	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__tablejump2__>
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
		{
			PORTB |= (1 << PB1);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	84 e2       	ldi	r24, 0x24	; 36
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <playTone+0x20>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <playTone+0x26>
			_delay_us(110);
			PORTB &= ~(1 << PB1);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	94 e2       	ldi	r25, 0x24	; 36
  bc:	9a 95       	dec	r25
  be:	f1 f7       	brne	.-4      	; 0xbc <playTone+0x2e>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <playTone+0x34>

void playTone(char note){
	switch (note)
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
  c2:	2e 5f       	subi	r18, 0xFE	; 254
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
  c6:	02 c0       	rjmp	.+4      	; 0xcc <playTone+0x3e>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
  cc:	29 3e       	cpi	r18, 0xE9	; 233
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	38 07       	cpc	r19, r24
  d2:	4c f3       	brlt	.-46     	; 0xa6 <playTone+0x18>
			PORTB |= (1 << PB1);
			_delay_us(110);
			PORTB &= ~(1 << PB1);
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	85 b9       	out	0x05, r24	; 5
		break;
  da:	08 95       	ret
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
		{
			PORTB |= (1 << PB1);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <playTone+0x58>
  ea:	00 c0       	rjmp	.+0      	; 0xec <playTone+0x5e>
  ec:	00 00       	nop
			_delay_us(1024);
			PORTB &= ~(1 << PB1);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <playTone+0x6a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <playTone+0x70>
  fe:	00 00       	nop
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
 100:	20 5f       	subi	r18, 0xF0	; 240
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	02 c0       	rjmp	.+4      	; 0x10a <playTone+0x7c>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
 10a:	29 3e       	cpi	r18, 0xE9	; 233
 10c:	93 e0       	ldi	r25, 0x03	; 3
 10e:	39 07       	cpc	r19, r25
 110:	2c f3       	brlt	.-54     	; 0xdc <playTone+0x4e>
			PORTB |= (1 << PB1);
			_delay_us(1024);
			PORTB &= ~(1 << PB1);
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
 112:	85 b1       	in	r24, 0x05	; 5
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	85 b9       	out	0x05, r24	; 5
		break;
 118:	08 95       	ret
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
		{
			PORTB |= (1 << PB1);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	85 b9       	out	0x05, r24	; 5
 120:	8a ea       	ldi	r24, 0xAA	; 170
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <playTone+0x94>
 126:	00 c0       	rjmp	.+0      	; 0x128 <playTone+0x9a>
			_delay_us(512);
			PORTB &= ~(1 << PB1);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	9a ea       	ldi	r25, 0xAA	; 170
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <playTone+0xa2>
 134:	00 c0       	rjmp	.+0      	; 0x136 <playTone+0xa8>
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
 136:	28 5f       	subi	r18, 0xF8	; 248
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	02 c0       	rjmp	.+4      	; 0x140 <playTone+0xb2>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
 140:	29 3e       	cpi	r18, 0xE9	; 233
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	38 07       	cpc	r19, r24
 146:	4c f3       	brlt	.-46     	; 0x11a <playTone+0x8c>
			PORTB |= (1 << PB1);
			_delay_us(512);
			PORTB &= ~(1 << PB1);
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8d 7f       	andi	r24, 0xFD	; 253
 14c:	85 b9       	out	0x05, r24	; 5
		break;
 14e:	08 95       	ret
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
		{
			PORTB |= (1 << PB1);
 150:	85 b1       	in	r24, 0x05	; 5
 152:	82 60       	ori	r24, 0x02	; 2
 154:	85 b9       	out	0x05, r24	; 5
 156:	92 e9       	ldi	r25, 0x92	; 146
 158:	9a 95       	dec	r25
 15a:	f1 f7       	brne	.-4      	; 0x158 <playTone+0xca>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <playTone+0xd0>
			_delay_us(440);
			PORTB &= ~(1 << PB1);
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	85 b9       	out	0x05, r24	; 5
 164:	82 e9       	ldi	r24, 0x92	; 146
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <playTone+0xd8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <playTone+0xde>
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
 16c:	24 5f       	subi	r18, 0xF4	; 244
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	02 c0       	rjmp	.+4      	; 0x176 <playTone+0xe8>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
 176:	29 3e       	cpi	r18, 0xE9	; 233
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	39 07       	cpc	r19, r25
 17c:	4c f3       	brlt	.-46     	; 0x150 <playTone+0xc2>
			PORTB |= (1 << PB1);
			_delay_us(440);
			PORTB &= ~(1 << PB1);
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	85 b9       	out	0x05, r24	; 5
		break;
 184:	08 95       	ret
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
		{
			PORTB |= (1 << PB1);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	85 b9       	out	0x05, r24	; 5
 18c:	85 e2       	ldi	r24, 0x25	; 37
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <playTone+0x102>
 194:	00 c0       	rjmp	.+0      	; 0x196 <playTone+0x108>
 196:	00 00       	nop
			_delay_us(2200);
			PORTB &= ~(1 << PB1);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	8d 7f       	andi	r24, 0xFD	; 253
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <playTone+0x114>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <playTone+0x11a>
 1a8:	00 00       	nop
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
 1aa:	26 5f       	subi	r18, 0xF6	; 246
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <playTone+0x126>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
 1b4:	29 3e       	cpi	r18, 0xE9	; 233
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	39 07       	cpc	r19, r25
 1ba:	2c f3       	brlt	.-54     	; 0x186 <playTone+0xf8>
			PORTB |= (1 << PB1);
			_delay_us(2200);
			PORTB &= ~(1 << PB1);
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	85 b9       	out	0x05, r24	; 5
		break;
 1c2:	08 95       	ret
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
		{
			PORTB |= (1 << PB1);
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	83 e5       	ldi	r24, 0x53	; 83
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <playTone+0x140>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <playTone+0x146>
 1d4:	00 00       	nop
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	8d 7f       	andi	r24, 0xFD	; 253
 1da:	85 b9       	out	0x05, r24	; 5
 1dc:	83 e5       	ldi	r24, 0x53	; 83
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <playTone+0x152>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <playTone+0x158>
 1e6:	00 00       	nop
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
 1e8:	28 5f       	subi	r18, 0xF8	; 248
 1ea:	3f 4f       	sbci	r19, 0xFF	; 255
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <playTone+0x164>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
 1f2:	29 3e       	cpi	r18, 0xE9	; 233
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	39 07       	cpc	r19, r25
 1f8:	2c f3       	brlt	.-54     	; 0x1c4 <playTone+0x136>
			PORTB |= (1 << PB1);
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	8d 7f       	andi	r24, 0xFD	; 253
 1fe:	85 b9       	out	0x05, r24	; 5
		break;
 200:	08 95       	ret
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
		{
			PORTB |= (1 << PB1);
 202:	85 b1       	in	r24, 0x05	; 5
 204:	82 60       	ori	r24, 0x02	; 2
 206:	85 b9       	out	0x05, r24	; 5
 208:	83 e5       	ldi	r24, 0x53	; 83
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 210:	00 c0       	rjmp	.+0      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 212:	00 00       	nop
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
 214:	85 b1       	in	r24, 0x05	; 5
 216:	8d 7f       	andi	r24, 0xFD	; 253
 218:	85 b9       	out	0x05, r24	; 5
 21a:	83 e5       	ldi	r24, 0x53	; 83
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
 226:	24 52       	subi	r18, 0x24	; 36
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	02 c0       	rjmp	.+4      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
 230:	29 3e       	cpi	r18, 0xE9	; 233
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	39 07       	cpc	r19, r25
 236:	2c f3       	brlt	.-54     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
			PORTB |= (1 << PB1);
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	85 b9       	out	0x05, r24	; 5
 23e:	08 95       	ret

Disassembly of section .text.sound_success:

000004c6 <sound_success>:
	}
	
	
}
void sound_success(){
	playTone('b');
 4c6:	82 e6       	ldi	r24, 0x62	; 98
 4c8:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
	playTone('c');
 4cc:	83 e6       	ldi	r24, 0x63	; 99
 4ce:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
	playTone('a');
 4d2:	81 e6       	ldi	r24, 0x61	; 97
 4d4:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
 4d8:	08 95       	ret

Disassembly of section .text.sound_input:

0000050c <sound_input>:
}
void sound_input(){
	playTone('d');
 50c:	84 e6       	ldi	r24, 0x64	; 100
 50e:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
 512:	08 95       	ret

Disassembly of section .text.sound_fail:

000004da <sound_fail>:
}
void sound_fail(){
	playTone('f');
 4da:	86 e6       	ldi	r24, 0x66	; 102
 4dc:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
	playTone('e');
 4e0:	85 e6       	ldi	r24, 0x65	; 101
 4e2:	0e 94 47 00 	call	0x8e	; 0x8e <__data_load_end>
 4e6:	08 95       	ret

Disassembly of section .text.initIOports:

0000044e <initIOports>:
#define KEY_6     0x4000
#define KEY_3     0x8000

void initIOports(){
	// Initialize I/O pins
	DDRB |= (1 << PB1); // Buzzer pin as output
 44e:	84 b1       	in	r24, 0x04	; 4
 450:	82 60       	ori	r24, 0x02	; 2
 452:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << LATCH_PIN); // Latch pin as output
 454:	87 b1       	in	r24, 0x07	; 7
 456:	81 60       	ori	r24, 0x01	; 1
 458:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << CLOCK_PIN); // Clock pin as output
 45a:	87 b1       	in	r24, 0x07	; 7
 45c:	82 60       	ori	r24, 0x02	; 2
 45e:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DATA_PIN); // Data pin as input
 460:	87 b1       	in	r24, 0x07	; 7
 462:	8b 7f       	andi	r24, 0xFB	; 251
 464:	87 b9       	out	0x07, r24	; 7
	//MISO as output, all others input
	DDRB |= (1 << MISO_PIN);
 466:	84 b1       	in	r24, 0x04	; 4
 468:	80 61       	ori	r24, 0x10	; 16
 46a:	84 b9       	out	0x04, r24	; 4
	//SPI inputs
	DDRB &= ~(1 << SS_PIN);
 46c:	84 b1       	in	r24, 0x04	; 4
 46e:	8b 7f       	andi	r24, 0xFB	; 251
 470:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MOSI_PIN);
 472:	84 b1       	in	r24, 0x04	; 4
 474:	87 7f       	andi	r24, 0xF7	; 247
 476:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << SCK_PIN);
 478:	84 b1       	in	r24, 0x04	; 4
 47a:	8f 7d       	andi	r24, 0xDF	; 223
 47c:	84 b9       	out	0x04, r24	; 4
	
	// Enable pull-up resistor for data pin
	PORTC |= (1 << DATA_PIN);
 47e:	88 b1       	in	r24, 0x08	; 8
 480:	84 60       	ori	r24, 0x04	; 4
 482:	88 b9       	out	0x08, r24	; 8
 484:	08 95       	ret

Disassembly of section .text.SPI_SlaveInit:

00000514 <SPI_SlaveInit>:
		
}
void SPI_SlaveInit(void)
{
	/* Enable SPI */
	SPCR = (1<<SPE);
 514:	80 e4       	ldi	r24, 0x40	; 64
 516:	8c bd       	out	0x2c, r24	; 44
 518:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

00000502 <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void)
{	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 502:	0d b4       	in	r0, 0x2d	; 45
 504:	07 fe       	sbrs	r0, 7
 506:	fd cf       	rjmp	.-6      	; 0x502 <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 508:	8e b5       	in	r24, 0x2e	; 46
}
 50a:	08 95       	ret

Disassembly of section .text.initUSART:

00000486 <initUSART>:


//initialiser UART
void initUSART(void) {
	UBRR0H = 0;              /* baud rate  */
 486:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = 0x0C;           /* 9600 */
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0A |= (1 << U2X0);      /* mode asynchrone double vitesse */
 490:	e0 ec       	ldi	r30, 0xC0	; 192
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	82 60       	ori	r24, 0x02	; 2
 498:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
 49a:	e1 ec       	ldi	r30, 0xC1	; 193
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	88 61       	ori	r24, 0x18	; 24
 4a2:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
 4a4:	e2 ec       	ldi	r30, 0xC2	; 194
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	86 60       	ori	r24, 0x06	; 6
 4ac:	80 83       	st	Z, r24
 4ae:	08 95       	ret

Disassembly of section .text.uartByteTransmit:

000004e8 <uartByteTransmit>:
}

//transmettre un caract�re
void uartByteTransmit(uint8_t data) {
	while ( !( UCSR0A & (1<<UDRE0)) ); /* Attendre que le buffer de transmission soit vide */
 4e8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 4ec:	95 ff       	sbrs	r25, 5
 4ee:	fc cf       	rjmp	.-8      	; 0x4e8 <uartByteTransmit>
	UDR0 = data;                      /* envoyer la donn�e */
 4f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 4f4:	08 95       	ret

Disassembly of section .text.readShiftRegisters:

000003ea <readShiftRegisters>:
// Function to read data from the shift registers
uint16_t readShiftRegisters() {
	uint16_t data = 0;
	
	// Latch low, fin de la dompe parallele precedente
	PORTC |= (1 << LATCH_PIN);
 3ea:	88 b1       	in	r24, 0x08	; 8
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	88 b9       	out	0x08, r24	; 8
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	8a 95       	dec	r24
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <readShiftRegisters+0x8>
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
 3f6:	88 b1       	in	r24, 0x08	; 8
 3f8:	8e 7f       	andi	r24, 0xFE	; 254
 3fa:	88 b9       	out	0x08, r24	; 8
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	8a 95       	dec	r24
 400:	f1 f7       	brne	.-4      	; 0x3fe <readShiftRegisters+0x14>
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
 402:	88 b1       	in	r24, 0x08	; 8
 404:	8e 7f       	andi	r24, 0xFE	; 254
 406:	88 b9       	out	0x08, r24	; 8
 408:	85 e0       	ldi	r24, 0x05	; 5
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
	_delay_us(15);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
//SPI CALLS


// Function to read data from the shift registers
uint16_t readShiftRegisters() {
	uint16_t data = 0;
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 416:	16 c0       	rjmp	.+44     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
		// Pulse the clock pin to shift in the next bit
		PORTC |= (1 << CLOCK_PIN);
 418:	98 b1       	in	r25, 0x08	; 8
 41a:	92 60       	ori	r25, 0x02	; 2
 41c:	98 b9       	out	0x08, r25	; 8
 41e:	85 e0       	ldi	r24, 0x05	; 5
 420:	8a 95       	dec	r24
 422:	f1 f7       	brne	.-4      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		_delay_us(15); // Adjust delay as needed based on your clock frequency
		PORTC &= ~(1 << CLOCK_PIN);
 424:	98 b1       	in	r25, 0x08	; 8
 426:	9d 7f       	andi	r25, 0xFD	; 253
 428:	98 b9       	out	0x08, r25	; 8
		
		// Read the data pin and store the bit
		data |= (PINC & (1 << DATA_PIN)) << i;
 42a:	26 b1       	in	r18, 0x06	; 6
 42c:	24 70       	andi	r18, 0x04	; 4
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	04 2e       	mov	r0, r20
 432:	02 c0       	rjmp	.+4      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 434:	22 0f       	add	r18, r18
 436:	33 1f       	adc	r19, r19
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__DATA_REGION_LENGTH__+0x34>
 43c:	62 2b       	or	r22, r18
 43e:	73 2b       	or	r23, r19
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(15);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 440:	4f 5f       	subi	r20, 0xFF	; 255
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	40 31       	cpi	r20, 0x10	; 16
 446:	51 05       	cpc	r21, r1
 448:	3c f3       	brlt	.-50     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
		
		// Read the data pin and store the bit
		data |= (PINC & (1 << DATA_PIN)) << i;
	}
	return data;
}
 44a:	cb 01       	movw	r24, r22
 44c:	08 95       	ret

Disassembly of section .text.main:

00000240 <main>:
	uint8_t i = 0;
	while (myString[i]) {
		SPI_SlaveTransmit(myString[i]);
		i++;
	}
}
 240:	0e 94 27 02 	call	0x44e	; 0x44e <initIOports>
 244:	0e 94 8a 02 	call	0x514	; 0x514 <SPI_SlaveInit>
 248:	0e 94 43 02 	call	0x486	; 0x486 <initUSART>
 24c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <readShiftRegisters>
 250:	ec 01       	movw	r28, r24
 252:	8d 2f       	mov	r24, r29
 254:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uartByteTransmit>
 258:	8c 2f       	mov	r24, r28
 25a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <uartByteTransmit>
 25e:	c0 38       	cpi	r28, 0x80	; 128
 260:	d1 05       	cpc	r29, r1
 262:	09 f4       	brne	.+2      	; 0x266 <main+0x26>
 264:	90 c0       	rjmp	.+288    	; 0x386 <main+0x146>
 266:	00 f5       	brcc	.+64     	; 0x2a8 <main+0x68>
 268:	c4 30       	cpi	r28, 0x04	; 4
 26a:	d1 05       	cpc	r29, r1
 26c:	09 f4       	brne	.+2      	; 0x270 <main+0x30>
 26e:	49 c0       	rjmp	.+146    	; 0x302 <main+0xc2>
 270:	48 f4       	brcc	.+18     	; 0x284 <main+0x44>
 272:	c1 30       	cpi	r28, 0x01	; 1
 274:	d1 05       	cpc	r29, r1
 276:	09 f4       	brne	.+2      	; 0x27a <main+0x3a>
 278:	80 c0       	rjmp	.+256    	; 0x37a <main+0x13a>
 27a:	08 f4       	brcc	.+2      	; 0x27e <main+0x3e>
 27c:	9e c0       	rjmp	.+316    	; 0x3ba <main+0x17a>
 27e:	22 97       	sbiw	r28, 0x02	; 2
 280:	d1 f1       	breq	.+116    	; 0x2f6 <main+0xb6>
 282:	99 c0       	rjmp	.+306    	; 0x3b6 <main+0x176>
 284:	c0 31       	cpi	r28, 0x10	; 16
 286:	d1 05       	cpc	r29, r1
 288:	09 f4       	brne	.+2      	; 0x28c <main+0x4c>
 28a:	65 c0       	rjmp	.+202    	; 0x356 <main+0x116>
 28c:	20 f4       	brcc	.+8      	; 0x296 <main+0x56>
 28e:	28 97       	sbiw	r28, 0x08	; 8
 290:	09 f4       	brne	.+2      	; 0x294 <main+0x54>
 292:	85 c0       	rjmp	.+266    	; 0x39e <main+0x15e>
 294:	90 c0       	rjmp	.+288    	; 0x3b6 <main+0x176>
 296:	c0 32       	cpi	r28, 0x20	; 32
 298:	d1 05       	cpc	r29, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <main+0x5e>
 29c:	4a c0       	rjmp	.+148    	; 0x332 <main+0xf2>
 29e:	c0 34       	cpi	r28, 0x40	; 64
 2a0:	d1 05       	cpc	r29, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <main+0x66>
 2a4:	40 c0       	rjmp	.+128    	; 0x326 <main+0xe6>
 2a6:	87 c0       	rjmp	.+270    	; 0x3b6 <main+0x176>
 2a8:	c1 15       	cp	r28, r1
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	d8 07       	cpc	r29, r24
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <main+0x72>
 2b0:	58 c0       	rjmp	.+176    	; 0x362 <main+0x122>
 2b2:	68 f4       	brcc	.+26     	; 0x2ce <main+0x8e>
 2b4:	c1 15       	cp	r28, r1
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	d8 07       	cpc	r29, r24
 2ba:	49 f1       	breq	.+82     	; 0x30e <main+0xce>
 2bc:	c1 15       	cp	r28, r1
 2be:	94 e0       	ldi	r25, 0x04	; 4
 2c0:	d9 07       	cpc	r29, r25
 2c2:	59 f1       	breq	.+86     	; 0x31a <main+0xda>
 2c4:	c1 15       	cp	r28, r1
 2c6:	d1 40       	sbci	r29, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <main+0x8c>
 2ca:	75 c0       	rjmp	.+234    	; 0x3b6 <main+0x176>
 2cc:	38 c0       	rjmp	.+112    	; 0x33e <main+0xfe>
 2ce:	c1 15       	cp	r28, r1
 2d0:	90 e2       	ldi	r25, 0x20	; 32
 2d2:	d9 07       	cpc	r29, r25
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <main+0x98>
 2d6:	5d c0       	rjmp	.+186    	; 0x392 <main+0x152>
 2d8:	28 f4       	brcc	.+10     	; 0x2e4 <main+0xa4>
 2da:	c1 15       	cp	r28, r1
 2dc:	d0 41       	sbci	r29, 0x10	; 16
 2de:	09 f4       	brne	.+2      	; 0x2e2 <main+0xa2>
 2e0:	64 c0       	rjmp	.+200    	; 0x3aa <main+0x16a>
 2e2:	69 c0       	rjmp	.+210    	; 0x3b6 <main+0x176>
 2e4:	c1 15       	cp	r28, r1
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	d8 07       	cpc	r29, r24
 2ea:	09 f4       	brne	.+2      	; 0x2ee <main+0xae>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <main+0x12e>
 2ee:	c1 15       	cp	r28, r1
 2f0:	d0 48       	sbci	r29, 0x80	; 128
 2f2:	59 f1       	breq	.+86     	; 0x34a <main+0x10a>
 2f4:	60 c0       	rjmp	.+192    	; 0x3b6 <main+0x176>
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	81 60       	ori	r24, 0x01	; 1
 2fa:	85 b9       	out	0x05, r24	; 5
 2fc:	87 e5       	ldi	r24, 0x57	; 87
 2fe:	8e bd       	out	0x2e, r24	; 46
 300:	5c c0       	rjmp	.+184    	; 0x3ba <main+0x17a>
 302:	85 b1       	in	r24, 0x05	; 5
 304:	81 60       	ori	r24, 0x01	; 1
 306:	85 b9       	out	0x05, r24	; 5
 308:	85 e4       	ldi	r24, 0x45	; 69
 30a:	8e bd       	out	0x2e, r24	; 46
 30c:	56 c0       	rjmp	.+172    	; 0x3ba <main+0x17a>
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	81 60       	ori	r24, 0x01	; 1
 312:	85 b9       	out	0x05, r24	; 5
 314:	82 e5       	ldi	r24, 0x52	; 82
 316:	8e bd       	out	0x2e, r24	; 46
 318:	50 c0       	rjmp	.+160    	; 0x3ba <main+0x17a>
 31a:	85 b1       	in	r24, 0x05	; 5
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	85 b9       	out	0x05, r24	; 5
 320:	84 e5       	ldi	r24, 0x54	; 84
 322:	8e bd       	out	0x2e, r24	; 46
 324:	4a c0       	rjmp	.+148    	; 0x3ba <main+0x17a>
 326:	85 b1       	in	r24, 0x05	; 5
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	85 b9       	out	0x05, r24	; 5
 32c:	80 e3       	ldi	r24, 0x30	; 48
 32e:	8e bd       	out	0x2e, r24	; 46
 330:	44 c0       	rjmp	.+136    	; 0x3ba <main+0x17a>
 332:	85 b1       	in	r24, 0x05	; 5
 334:	8e 7f       	andi	r24, 0xFE	; 254
 336:	85 b9       	out	0x05, r24	; 5
 338:	81 e3       	ldi	r24, 0x31	; 49
 33a:	8e bd       	out	0x2e, r24	; 46
 33c:	3e c0       	rjmp	.+124    	; 0x3ba <main+0x17a>
 33e:	85 b1       	in	r24, 0x05	; 5
 340:	81 60       	ori	r24, 0x01	; 1
 342:	85 b9       	out	0x05, r24	; 5
 344:	82 e3       	ldi	r24, 0x32	; 50
 346:	8e bd       	out	0x2e, r24	; 46
 348:	38 c0       	rjmp	.+112    	; 0x3ba <main+0x17a>
 34a:	85 b1       	in	r24, 0x05	; 5
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	85 b9       	out	0x05, r24	; 5
 350:	83 e3       	ldi	r24, 0x33	; 51
 352:	8e bd       	out	0x2e, r24	; 46
 354:	32 c0       	rjmp	.+100    	; 0x3ba <main+0x17a>
 356:	85 b1       	in	r24, 0x05	; 5
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	85 b9       	out	0x05, r24	; 5
 35c:	84 e3       	ldi	r24, 0x34	; 52
 35e:	8e bd       	out	0x2e, r24	; 46
 360:	2c c0       	rjmp	.+88     	; 0x3ba <main+0x17a>
 362:	85 b1       	in	r24, 0x05	; 5
 364:	8e 7f       	andi	r24, 0xFE	; 254
 366:	85 b9       	out	0x05, r24	; 5
 368:	85 e3       	ldi	r24, 0x35	; 53
 36a:	8e bd       	out	0x2e, r24	; 46
 36c:	26 c0       	rjmp	.+76     	; 0x3ba <main+0x17a>
 36e:	85 b1       	in	r24, 0x05	; 5
 370:	81 60       	ori	r24, 0x01	; 1
 372:	85 b9       	out	0x05, r24	; 5
 374:	86 e3       	ldi	r24, 0x36	; 54
 376:	8e bd       	out	0x2e, r24	; 46
 378:	20 c0       	rjmp	.+64     	; 0x3ba <main+0x17a>
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	8e 7f       	andi	r24, 0xFE	; 254
 37e:	85 b9       	out	0x05, r24	; 5
 380:	87 e3       	ldi	r24, 0x37	; 55
 382:	8e bd       	out	0x2e, r24	; 46
 384:	1a c0       	rjmp	.+52     	; 0x3ba <main+0x17a>
 386:	85 b1       	in	r24, 0x05	; 5
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	85 b9       	out	0x05, r24	; 5
 38c:	88 e3       	ldi	r24, 0x38	; 56
 38e:	8e bd       	out	0x2e, r24	; 46
 390:	14 c0       	rjmp	.+40     	; 0x3ba <main+0x17a>
 392:	85 b1       	in	r24, 0x05	; 5
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	85 b9       	out	0x05, r24	; 5
 398:	89 e3       	ldi	r24, 0x39	; 57
 39a:	8e bd       	out	0x2e, r24	; 46
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <main+0x17a>
 39e:	85 b1       	in	r24, 0x05	; 5
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	85 b9       	out	0x05, r24	; 5
 3a4:	81 e4       	ldi	r24, 0x41	; 65
 3a6:	8e bd       	out	0x2e, r24	; 46
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <main+0x17a>
 3aa:	85 b1       	in	r24, 0x05	; 5
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	85 b9       	out	0x05, r24	; 5
 3b0:	82 e4       	ldi	r24, 0x42	; 66
 3b2:	8e bd       	out	0x2e, r24	; 46
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <main+0x17a>
 3b6:	88 e5       	ldi	r24, 0x58	; 88
 3b8:	8e bd       	out	0x2e, r24	; 46
 3ba:	0e 94 81 02 	call	0x502	; 0x502 <SPI_SlaveReceive>
 3be:	80 3e       	cpi	r24, 0xE0	; 224
 3c0:	41 f0       	breq	.+16     	; 0x3d2 <main+0x192>
 3c2:	80 3f       	cpi	r24, 0xF0	; 240
 3c4:	19 f0       	breq	.+6      	; 0x3cc <main+0x18c>
 3c6:	80 3d       	cpi	r24, 0xD0	; 208
 3c8:	49 f4       	brne	.+18     	; 0x3dc <main+0x19c>
 3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <main+0x198>
 3cc:	0e 94 86 02 	call	0x50c	; 0x50c <sound_input>
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <main+0x19c>
 3d2:	0e 94 6d 02 	call	0x4da	; 0x4da <sound_fail>
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <main+0x19c>
 3d8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <sound_success>
 3dc:	89 ef       	ldi	r24, 0xF9	; 249
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0x1a0>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x1a6>
 3e6:	00 00       	nop
 3e8:	31 cf       	rjmp	.-414    	; 0x24c <main+0xc>

Disassembly of section .text.libgcc:

000004f6 <__tablejump2__>:
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	05 90       	lpm	r0, Z+
 4fc:	f4 91       	lpm	r31, Z
 4fe:	e0 2d       	mov	r30, r0
 500:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00000522 <_fini>:
 522:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000524 <__funcs_on_exit>:
 524:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000526 <__simulator_exit>:
 526:	08 95       	ret

Disassembly of section .text.exit:

000004b0 <exit>:
 4b0:	ec 01       	movw	r28, r24
 4b2:	0e 94 92 02 	call	0x524	; 0x524 <__funcs_on_exit>
 4b6:	0e 94 91 02 	call	0x522	; 0x522 <_fini>
 4ba:	ce 01       	movw	r24, r28
 4bc:	0e 94 93 02 	call	0x526	; 0x526 <__simulator_exit>
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 8f 02 	call	0x51e	; 0x51e <_Exit>

Disassembly of section .text._Exit:

0000051e <_Exit>:
 51e:	0e 94 45 00 	call	0x8a	; 0x8a <_exit>
