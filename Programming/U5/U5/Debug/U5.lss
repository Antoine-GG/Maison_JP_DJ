
U5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000524  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000553  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000056f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001481  00000000  00000000  0000060f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000937  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000899  00000000  00000000  000023c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000253  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008cf  00000000  00000000  00002fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  0000389e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004a2  000004a2  00000516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000039e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.playTone 000001b2  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.sound_success 00000014  0000045c  0000045c  000004d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.sound_input 00000008  00000494  00000494  00000508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.sound_fail 0000000e  00000470  00000470  000004e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.initIOports 00000038  000003e4  000003e4  00000458  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.SPI_SlaveInit 00000006  0000049c  0000049c  00000510  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.SPI_SlaveReceive 0000000a  0000048a  0000048a  000004fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.initUSART 0000002a  0000041c  0000041c  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.readShiftRegisters 00000072  00000372  00000372  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    000000f6  0000027c  0000027c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.libgcc  0000000c  0000047e  0000047e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_fini 00000002  000004aa  000004aa  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  000004ac  000004ac  00000520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  000004ae  000004ae  00000522  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  00000446  00000446  000004ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  000004a6  000004a6  0000051a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
   8:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
   c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  10:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  14:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  18:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  1c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  20:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  24:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  28:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  2c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  30:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  34:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  38:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  3c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  40:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  44:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  48:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  4c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  50:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  54:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  58:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  5c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  60:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  64:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__bad_interrupt>
  68:	82 00       	.word	0x0082	; ????
  6a:	a1 00       	.word	0x00a1	; ????
  6c:	bc 00       	.word	0x00bc	; ????
  6e:	d7 00       	.word	0x00d7	; ????
  70:	f6 00       	.word	0x00f6	; ????
  72:	15 01       	movw	r2, r10
  74:	34 01       	movw	r6, r8

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d4 e0       	ldi	r29, 0x04	; 4
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	e6 e7       	ldi	r30, 0x76	; 118
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	17 c0       	rjmp	.+46     	; 0xb8 <__do_clear_bss+0x8>
  8a:	b5 91       	lpm	r27, Z+
  8c:	a5 91       	lpm	r26, Z+
  8e:	35 91       	lpm	r19, Z+
  90:	25 91       	lpm	r18, Z+
  92:	05 91       	lpm	r16, Z+
  94:	07 fd       	sbrc	r16, 7
  96:	0c c0       	rjmp	.+24     	; 0xb0 <__do_clear_bss>
  98:	95 91       	lpm	r25, Z+
  9a:	85 91       	lpm	r24, Z+
  9c:	ef 01       	movw	r28, r30
  9e:	f9 2f       	mov	r31, r25
  a0:	e8 2f       	mov	r30, r24
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a2 17       	cp	r26, r18
  a8:	b3 07       	cpc	r27, r19
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0x20>
  ac:	fe 01       	movw	r30, r28
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <__do_clear_bss+0x8>

000000b0 <__do_clear_bss>:
  b0:	1d 92       	st	X+, r1
  b2:	a2 17       	cp	r26, r18
  b4:	b3 07       	cpc	r27, r19
  b6:	e1 f7       	brne	.-8      	; 0xb0 <__do_clear_bss>
  b8:	e6 37       	cpi	r30, 0x76	; 118
  ba:	f4 07       	cpc	r31, r20
  bc:	31 f7       	brne	.-52     	; 0x8a <__do_copy_data+0x8>
  be:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  c2:	0c 94 23 02 	jmp	0x446	; 0x446 <exit>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>

Disassembly of section .text:

000004a2 <__bad_interrupt>:
 4a2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.playTone:

000000ca <playTone>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	fc 01       	movw	r30, r24
  ce:	e1 56       	subi	r30, 0x61	; 97
  d0:	f1 09       	sbc	r31, r1
  d2:	e7 30       	cpi	r30, 0x07	; 7
  d4:	f1 05       	cpc	r31, r1
  d6:	08 f0       	brcs	.+2      	; 0xda <playTone+0x10>
  d8:	d0 c0       	rjmp	.+416    	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
  da:	ec 5c       	subi	r30, 0xCC	; 204
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__tablejump2__>
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
		{
			PORTB |= (1 << PB1);
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	84 e2       	ldi	r24, 0x24	; 36
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <playTone+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <playTone+0x26>
			_delay_us(110);
			PORTB &= ~(1 << PB1);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	94 e2       	ldi	r25, 0x24	; 36
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <playTone+0x2e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <playTone+0x34>

void playTone(char note){
	switch (note)
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
  fe:	2e 5f       	subi	r18, 0xFE	; 254
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	02 c0       	rjmp	.+4      	; 0x108 <playTone+0x3e>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
	{
		case 'a':
		for(int i = 0; i <= 1000; i += 2)
 108:	29 3e       	cpi	r18, 0xE9	; 233
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	38 07       	cpc	r19, r24
 10e:	4c f3       	brlt	.-46     	; 0xe2 <playTone+0x18>
			PORTB |= (1 << PB1);
			_delay_us(110);
			PORTB &= ~(1 << PB1);
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
 110:	85 b1       	in	r24, 0x05	; 5
 112:	8d 7f       	andi	r24, 0xFD	; 253
 114:	85 b9       	out	0x05, r24	; 5
		break;
 116:	08 95       	ret
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
		{
			PORTB |= (1 << PB1);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <playTone+0x58>
 126:	00 c0       	rjmp	.+0      	; 0x128 <playTone+0x5e>
 128:	00 00       	nop
			_delay_us(1024);
			PORTB &= ~(1 << PB1);
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	85 b9       	out	0x05, r24	; 5
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <playTone+0x6a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <playTone+0x70>
 13a:	00 00       	nop
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
 13c:	20 5f       	subi	r18, 0xF0	; 240
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	02 c0       	rjmp	.+4      	; 0x146 <playTone+0x7c>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(110);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'b':
		for(int i = 0; i <= 1000; i += 16)
 146:	29 3e       	cpi	r18, 0xE9	; 233
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	39 07       	cpc	r19, r25
 14c:	2c f3       	brlt	.-54     	; 0x118 <playTone+0x4e>
			PORTB |= (1 << PB1);
			_delay_us(1024);
			PORTB &= ~(1 << PB1);
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	85 b9       	out	0x05, r24	; 5
		break;
 154:	08 95       	ret
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
		{
			PORTB |= (1 << PB1);
 156:	85 b1       	in	r24, 0x05	; 5
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	85 b9       	out	0x05, r24	; 5
 15c:	8a ea       	ldi	r24, 0xAA	; 170
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <playTone+0x94>
 162:	00 c0       	rjmp	.+0      	; 0x164 <playTone+0x9a>
			_delay_us(512);
			PORTB &= ~(1 << PB1);
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
 16a:	9a ea       	ldi	r25, 0xAA	; 170
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <playTone+0xa2>
 170:	00 c0       	rjmp	.+0      	; 0x172 <playTone+0xa8>
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
 172:	28 5f       	subi	r18, 0xF8	; 248
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	02 c0       	rjmp	.+4      	; 0x17c <playTone+0xb2>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(1024);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'c':
		for(int i = 0; i <= 1000; i += 8)
 17c:	29 3e       	cpi	r18, 0xE9	; 233
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	38 07       	cpc	r19, r24
 182:	4c f3       	brlt	.-46     	; 0x156 <playTone+0x8c>
			PORTB |= (1 << PB1);
			_delay_us(512);
			PORTB &= ~(1 << PB1);
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	8d 7f       	andi	r24, 0xFD	; 253
 188:	85 b9       	out	0x05, r24	; 5
		break;
 18a:	08 95       	ret
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
		{
			PORTB |= (1 << PB1);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	85 b9       	out	0x05, r24	; 5
 192:	92 e9       	ldi	r25, 0x92	; 146
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <playTone+0xca>
 198:	00 c0       	rjmp	.+0      	; 0x19a <playTone+0xd0>
			_delay_us(440);
			PORTB &= ~(1 << PB1);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	82 e9       	ldi	r24, 0x92	; 146
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <playTone+0xd8>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <playTone+0xde>
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
 1a8:	24 5f       	subi	r18, 0xF4	; 244
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <playTone+0xe8>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(512);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'd':
		for(int i = 0; i <= 1000; i += 12)
 1b2:	29 3e       	cpi	r18, 0xE9	; 233
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	39 07       	cpc	r19, r25
 1b8:	4c f3       	brlt	.-46     	; 0x18c <playTone+0xc2>
			PORTB |= (1 << PB1);
			_delay_us(440);
			PORTB &= ~(1 << PB1);
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	8d 7f       	andi	r24, 0xFD	; 253
 1be:	85 b9       	out	0x05, r24	; 5
		break;
 1c0:	08 95       	ret
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
		{
			PORTB |= (1 << PB1);
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	85 b9       	out	0x05, r24	; 5
 1c8:	85 e2       	ldi	r24, 0x25	; 37
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <playTone+0x102>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <playTone+0x108>
 1d2:	00 00       	nop
			_delay_us(2200);
			PORTB &= ~(1 << PB1);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	85 b9       	out	0x05, r24	; 5
 1da:	85 e2       	ldi	r24, 0x25	; 37
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <playTone+0x114>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <playTone+0x11a>
 1e4:	00 00       	nop
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
 1e6:	26 5f       	subi	r18, 0xF6	; 246
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <playTone+0x126>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(440);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'e':
		for(int i = 0; i <= 1000; i += 10)
 1f0:	29 3e       	cpi	r18, 0xE9	; 233
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	39 07       	cpc	r19, r25
 1f6:	2c f3       	brlt	.-54     	; 0x1c2 <playTone+0xf8>
			PORTB |= (1 << PB1);
			_delay_us(2200);
			PORTB &= ~(1 << PB1);
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	85 b9       	out	0x05, r24	; 5
		break;
 1fe:	08 95       	ret
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
		{
			PORTB |= (1 << PB1);
 200:	85 b1       	in	r24, 0x05	; 5
 202:	82 60       	ori	r24, 0x02	; 2
 204:	85 b9       	out	0x05, r24	; 5
 206:	83 e5       	ldi	r24, 0x53	; 83
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 210:	00 00       	nop
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	85 b9       	out	0x05, r24	; 5
 218:	83 e5       	ldi	r24, 0x53	; 83
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 222:	00 00       	nop
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
 224:	28 5f       	subi	r18, 0xF8	; 248
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	02 c0       	rjmp	.+4      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(2200);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'f':
		for(int i = 0; i <= 1000; i += 8)
 22e:	29 3e       	cpi	r18, 0xE9	; 233
 230:	93 e0       	ldi	r25, 0x03	; 3
 232:	39 07       	cpc	r19, r25
 234:	2c f3       	brlt	.-54     	; 0x200 <__EEPROM_REGION_LENGTH__>
			PORTB |= (1 << PB1);
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	8d 7f       	andi	r24, 0xFD	; 253
 23a:	85 b9       	out	0x05, r24	; 5
		break;
 23c:	08 95       	ret
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
		{
			PORTB |= (1 << PB1);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	82 60       	ori	r24, 0x02	; 2
 242:	85 b9       	out	0x05, r24	; 5
 244:	83 e5       	ldi	r24, 0x53	; 83
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 24e:	00 00       	nop
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
 250:	85 b1       	in	r24, 0x05	; 5
 252:	8d 7f       	andi	r24, 0xFD	; 253
 254:	85 b9       	out	0x05, r24	; 5
 256:	83 e5       	ldi	r24, 0x53	; 83
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 260:	00 00       	nop
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
 262:	24 52       	subi	r18, 0x24	; 36
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	02 c0       	rjmp	.+4      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>

void playTone(char note){
	switch (note)
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	30 e0       	ldi	r19, 0x00	; 0
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
		break;
		case 'g':
		for(int i = 0; i <= 1000; i += 220)
 26c:	29 3e       	cpi	r18, 0xE9	; 233
 26e:	93 e0       	ldi	r25, 0x03	; 3
 270:	39 07       	cpc	r19, r25
 272:	2c f3       	brlt	.-54     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			PORTB |= (1 << PB1);
			_delay_us(1360);
			PORTB &= ~(1 << PB1);
			_delay_us(1360);
		}
		PORTB &= ~(1 << PB1);
 274:	85 b1       	in	r24, 0x05	; 5
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	85 b9       	out	0x05, r24	; 5
 27a:	08 95       	ret

Disassembly of section .text.sound_success:

0000045c <sound_success>:
	}
	
	
}
void sound_success(){
	playTone('b');
 45c:	82 e6       	ldi	r24, 0x62	; 98
 45e:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
	playTone('c');
 462:	83 e6       	ldi	r24, 0x63	; 99
 464:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
	playTone('a');
 468:	81 e6       	ldi	r24, 0x61	; 97
 46a:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
 46e:	08 95       	ret

Disassembly of section .text.sound_input:

00000494 <sound_input>:
}
void sound_input(){
	playTone('d');
 494:	84 e6       	ldi	r24, 0x64	; 100
 496:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
 49a:	08 95       	ret

Disassembly of section .text.sound_fail:

00000470 <sound_fail>:
}
void sound_fail(){
	playTone('f');
 470:	86 e6       	ldi	r24, 0x66	; 102
 472:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
	playTone('e');
 476:	85 e6       	ldi	r24, 0x65	; 101
 478:	0e 94 65 00 	call	0xca	; 0xca <__data_load_end>
 47c:	08 95       	ret

Disassembly of section .text.initIOports:

000003e4 <initIOports>:

char buffer[16];

void initIOports(){
	// Initialize I/O pins
	DDRB |= (1 << PB1); // Buzzer pin as output
 3e4:	84 b1       	in	r24, 0x04	; 4
 3e6:	82 60       	ori	r24, 0x02	; 2
 3e8:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << LATCH_PIN); // Latch pin as output
 3ea:	87 b1       	in	r24, 0x07	; 7
 3ec:	81 60       	ori	r24, 0x01	; 1
 3ee:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << CLOCK_PIN); // Clock pin as output
 3f0:	87 b1       	in	r24, 0x07	; 7
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~(1 << DATA_PIN); // Data pin as input
 3f6:	87 b1       	in	r24, 0x07	; 7
 3f8:	8b 7f       	andi	r24, 0xFB	; 251
 3fa:	87 b9       	out	0x07, r24	; 7
	//MISO as output, all others input
	DDRB |= (1 << MISO_PIN);
 3fc:	84 b1       	in	r24, 0x04	; 4
 3fe:	80 61       	ori	r24, 0x10	; 16
 400:	84 b9       	out	0x04, r24	; 4
	//SPI inputs
	DDRB &= ~(1 << SS_PIN);
 402:	84 b1       	in	r24, 0x04	; 4
 404:	8b 7f       	andi	r24, 0xFB	; 251
 406:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << MOSI_PIN);
 408:	84 b1       	in	r24, 0x04	; 4
 40a:	87 7f       	andi	r24, 0xF7	; 247
 40c:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << SCK_PIN);
 40e:	84 b1       	in	r24, 0x04	; 4
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	84 b9       	out	0x04, r24	; 4
	
	// Enable pull-up resistor for data pin
	PORTC |= (1 << DATA_PIN);
 414:	88 b1       	in	r24, 0x08	; 8
 416:	84 60       	ori	r24, 0x04	; 4
 418:	88 b9       	out	0x08, r24	; 8
 41a:	08 95       	ret

Disassembly of section .text.SPI_SlaveInit:

0000049c <SPI_SlaveInit>:
		
}
void SPI_SlaveInit(void)
{
	/* Enable SPI */
	SPCR = (1<<SPE);
 49c:	80 e4       	ldi	r24, 0x40	; 64
 49e:	8c bd       	out	0x2c, r24	; 44
 4a0:	08 95       	ret

Disassembly of section .text.SPI_SlaveReceive:

0000048a <SPI_SlaveReceive>:
}

char SPI_SlaveReceive(void)
{	
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
 48a:	0d b4       	in	r0, 0x2d	; 45
 48c:	07 fe       	sbrs	r0, 7
 48e:	fd cf       	rjmp	.-6      	; 0x48a <SPI_SlaveReceive>
	;
	/* Return Data Register */
	return SPDR;
 490:	8e b5       	in	r24, 0x2e	; 46
}
 492:	08 95       	ret

Disassembly of section .text.initUSART:

0000041c <initUSART>:

//initialiser UART
void initUSART(void) {
	UBRR0H = 0;              /* baud rate  */
 41c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = 0x0C;           /* 9600 */
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	UCSR0A |= (1 << U2X0);      /* mode asynchrone double vitesse */
 426:	e0 ec       	ldi	r30, 0xC0	; 192
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);    /* Activer emission et reception  USART */
 430:	e1 ec       	ldi	r30, 0xC1	; 193
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	88 61       	ori	r24, 0x18	; 24
 438:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit, valeur au reset*/
 43a:	e2 ec       	ldi	r30, 0xC2	; 194
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	86 60       	ori	r24, 0x06	; 6
 442:	80 83       	st	Z, r24
 444:	08 95       	ret

Disassembly of section .text.readShiftRegisters:

00000372 <readShiftRegisters>:
// Function to read data from the shift registers
uint16_t readShiftRegisters() {
	uint16_t data = 0;
	
	// Latch low, fin de la dompe parallele precedente
	PORTC |= (1 << LATCH_PIN);
 372:	88 b1       	in	r24, 0x08	; 8
 374:	81 60       	ori	r24, 0x01	; 1
 376:	88 b9       	out	0x08, r24	; 8
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <readShiftRegisters+0x8>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <readShiftRegisters+0xe>
	_delay_us(20);
	PORTC &= ~(1 << LATCH_PIN);
 380:	88 b1       	in	r24, 0x08	; 8
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	88 b9       	out	0x08, r24	; 8
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	8a 95       	dec	r24
 38a:	f1 f7       	brne	.-4      	; 0x388 <readShiftRegisters+0x16>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <readShiftRegisters+0x1c>
	_delay_us(20);
	PORTC &= ~(1 << LATCH_PIN);
 38e:	88 b1       	in	r24, 0x08	; 8
 390:	8e 7f       	andi	r24, 0xFE	; 254
 392:	88 b9       	out	0x08, r24	; 8
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	8a 95       	dec	r24
 398:	f1 f7       	brne	.-4      	; 0x396 <readShiftRegisters+0x24>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <readShiftRegisters+0x2a>
	_delay_us(20);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
}

//SPI CALLS
// Function to read data from the shift registers
uint16_t readShiftRegisters() {
	uint16_t data = 0;
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e0       	ldi	r23, 0x00	; 0
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(20);
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(20);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 3a4:	1a c0       	rjmp	.+52     	; 0x3da <readShiftRegisters+0x68>
 3a6:	8a e0       	ldi	r24, 0x0A	; 10
 3a8:	8a 95       	dec	r24
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <readShiftRegisters+0x36>
		// Pulse the clock pin to shift in the next bit
		_delay_us(30);
		if((PINC & (1 << PC2))) data |= (1 << i);
 3ac:	32 9b       	sbis	0x06, 2	; 6
 3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <readShiftRegisters+0x52>
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	02 2e       	mov	r0, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <readShiftRegisters+0x4a>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <readShiftRegisters+0x46>
 3c0:	64 2b       	or	r22, r20
 3c2:	75 2b       	or	r23, r21
		PORTC |= (1 << CLOCK_PIN);
 3c4:	98 b1       	in	r25, 0x08	; 8
 3c6:	92 60       	ori	r25, 0x02	; 2
 3c8:	98 b9       	out	0x08, r25	; 8
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <readShiftRegisters+0x5a>
		_delay_us(30);
		PORTC &= ~(1 << CLOCK_PIN);
 3d0:	98 b1       	in	r25, 0x08	; 8
 3d2:	9d 7f       	andi	r25, 0xFD	; 253
 3d4:	98 b9       	out	0x08, r25	; 8
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(20);
	PORTC &= ~(1 << LATCH_PIN);
	_delay_us(20);
	// 16 clocks pour acheminer 16bits serial vers notre pin data
	for (int i = 0; i < 16; i++) {
 3d6:	2f 5f       	subi	r18, 0xFF	; 255
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 3da:	20 31       	cpi	r18, 0x10	; 16
 3dc:	31 05       	cpc	r19, r1
 3de:	1c f3       	brlt	.-58     	; 0x3a6 <readShiftRegisters+0x34>
		// Read the data pin and store the bit
		//data |= (PINC & (1 << DATA_PIN)) << i;
		
	}
	return data;
}
 3e0:	cb 01       	movw	r24, r22
 3e2:	08 95       	ret

Disassembly of section .text.main:

0000027c <main>:
	uint8_t i = 0;
	while (myString[i]) {
		uartByteTransmit(myString[i]);
		i++;
	}
}
 27c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <initIOports>
 280:	0e 94 4e 02 	call	0x49c	; 0x49c <SPI_SlaveInit>
 284:	0e 94 0e 02 	call	0x41c	; 0x41c <initUSART>
 288:	0e 94 b9 01 	call	0x372	; 0x372 <readShiftRegisters>
 28c:	80 38       	cpi	r24, 0x80	; 128
 28e:	91 05       	cpc	r25, r1
 290:	09 f4       	brne	.+2      	; 0x294 <main+0x18>
 292:	49 c0       	rjmp	.+146    	; 0x326 <main+0xaa>
 294:	a0 f4       	brcc	.+40     	; 0x2be <main+0x42>
 296:	88 30       	cpi	r24, 0x08	; 8
 298:	91 05       	cpc	r25, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <main+0x22>
 29c:	4a c0       	rjmp	.+148    	; 0x332 <main+0xb6>
 29e:	28 f4       	brcc	.+10     	; 0x2aa <main+0x2e>
 2a0:	00 97       	sbiw	r24, 0x00	; 0
 2a2:	31 f1       	breq	.+76     	; 0x2f0 <main+0x74>
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	e1 f1       	breq	.+120    	; 0x320 <main+0xa4>
 2a8:	4a c0       	rjmp	.+148    	; 0x33e <main+0xc2>
 2aa:	80 32       	cpi	r24, 0x20	; 32
 2ac:	91 05       	cpc	r25, r1
 2ae:	31 f1       	breq	.+76     	; 0x2fc <main+0x80>
 2b0:	80 34       	cpi	r24, 0x40	; 64
 2b2:	91 05       	cpc	r25, r1
 2b4:	01 f1       	breq	.+64     	; 0x2f6 <main+0x7a>
 2b6:	40 97       	sbiw	r24, 0x10	; 16
 2b8:	09 f0       	breq	.+2      	; 0x2bc <main+0x40>
 2ba:	41 c0       	rjmp	.+130    	; 0x33e <main+0xc2>
 2bc:	28 c0       	rjmp	.+80     	; 0x30e <main+0x92>
 2be:	81 15       	cp	r24, r1
 2c0:	20 e1       	ldi	r18, 0x10	; 16
 2c2:	92 07       	cpc	r25, r18
 2c4:	c9 f1       	breq	.+114    	; 0x338 <main+0xbc>
 2c6:	40 f4       	brcc	.+16     	; 0x2d8 <main+0x5c>
 2c8:	81 15       	cp	r24, r1
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	92 07       	cpc	r25, r18
 2ce:	c9 f0       	breq	.+50     	; 0x302 <main+0x86>
 2d0:	81 15       	cp	r24, r1
 2d2:	98 40       	sbci	r25, 0x08	; 8
 2d4:	f9 f0       	breq	.+62     	; 0x314 <main+0x98>
 2d6:	33 c0       	rjmp	.+102    	; 0x33e <main+0xc2>
 2d8:	81 15       	cp	r24, r1
 2da:	20 e4       	ldi	r18, 0x40	; 64
 2dc:	92 07       	cpc	r25, r18
 2de:	e9 f0       	breq	.+58     	; 0x31a <main+0x9e>
 2e0:	81 15       	cp	r24, r1
 2e2:	20 e8       	ldi	r18, 0x80	; 128
 2e4:	92 07       	cpc	r25, r18
 2e6:	81 f0       	breq	.+32     	; 0x308 <main+0x8c>
 2e8:	81 15       	cp	r24, r1
 2ea:	90 42       	sbci	r25, 0x20	; 32
 2ec:	41 f5       	brne	.+80     	; 0x33e <main+0xc2>
 2ee:	1e c0       	rjmp	.+60     	; 0x32c <main+0xb0>
 2f0:	8c e3       	ldi	r24, 0x3C	; 60
 2f2:	8e bd       	out	0x2e, r24	; 46
 2f4:	26 c0       	rjmp	.+76     	; 0x342 <main+0xc6>
 2f6:	80 e3       	ldi	r24, 0x30	; 48
 2f8:	8e bd       	out	0x2e, r24	; 46
 2fa:	23 c0       	rjmp	.+70     	; 0x342 <main+0xc6>
 2fc:	81 e3       	ldi	r24, 0x31	; 49
 2fe:	8e bd       	out	0x2e, r24	; 46
 300:	20 c0       	rjmp	.+64     	; 0x342 <main+0xc6>
 302:	82 e3       	ldi	r24, 0x32	; 50
 304:	8e bd       	out	0x2e, r24	; 46
 306:	1d c0       	rjmp	.+58     	; 0x342 <main+0xc6>
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	8e bd       	out	0x2e, r24	; 46
 30c:	1a c0       	rjmp	.+52     	; 0x342 <main+0xc6>
 30e:	84 e3       	ldi	r24, 0x34	; 52
 310:	8e bd       	out	0x2e, r24	; 46
 312:	17 c0       	rjmp	.+46     	; 0x342 <main+0xc6>
 314:	85 e3       	ldi	r24, 0x35	; 53
 316:	8e bd       	out	0x2e, r24	; 46
 318:	14 c0       	rjmp	.+40     	; 0x342 <main+0xc6>
 31a:	86 e3       	ldi	r24, 0x36	; 54
 31c:	8e bd       	out	0x2e, r24	; 46
 31e:	11 c0       	rjmp	.+34     	; 0x342 <main+0xc6>
 320:	87 e3       	ldi	r24, 0x37	; 55
 322:	8e bd       	out	0x2e, r24	; 46
 324:	0e c0       	rjmp	.+28     	; 0x342 <main+0xc6>
 326:	88 e3       	ldi	r24, 0x38	; 56
 328:	8e bd       	out	0x2e, r24	; 46
 32a:	0b c0       	rjmp	.+22     	; 0x342 <main+0xc6>
 32c:	89 e3       	ldi	r24, 0x39	; 57
 32e:	8e bd       	out	0x2e, r24	; 46
 330:	08 c0       	rjmp	.+16     	; 0x342 <main+0xc6>
 332:	8a e3       	ldi	r24, 0x3A	; 58
 334:	8e bd       	out	0x2e, r24	; 46
 336:	05 c0       	rjmp	.+10     	; 0x342 <main+0xc6>
 338:	8b e3       	ldi	r24, 0x3B	; 59
 33a:	8e bd       	out	0x2e, r24	; 46
 33c:	02 c0       	rjmp	.+4      	; 0x342 <main+0xc6>
 33e:	8c e3       	ldi	r24, 0x3C	; 60
 340:	8e bd       	out	0x2e, r24	; 46
 342:	0e 94 45 02 	call	0x48a	; 0x48a <SPI_SlaveReceive>
 346:	80 3e       	cpi	r24, 0xE0	; 224
 348:	41 f0       	breq	.+16     	; 0x35a <main+0xde>
 34a:	80 3f       	cpi	r24, 0xF0	; 240
 34c:	19 f0       	breq	.+6      	; 0x354 <main+0xd8>
 34e:	80 3d       	cpi	r24, 0xD0	; 208
 350:	49 f4       	brne	.+18     	; 0x364 <main+0xe8>
 352:	06 c0       	rjmp	.+12     	; 0x360 <main+0xe4>
 354:	0e 94 4a 02 	call	0x494	; 0x494 <sound_input>
 358:	05 c0       	rjmp	.+10     	; 0x364 <main+0xe8>
 35a:	0e 94 38 02 	call	0x470	; 0x470 <sound_fail>
 35e:	02 c0       	rjmp	.+4      	; 0x364 <main+0xe8>
 360:	0e 94 2e 02 	call	0x45c	; 0x45c <sound_success>
 364:	89 ef       	ldi	r24, 0xF9	; 249
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0xec>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0xf2>
 36e:	00 00       	nop
 370:	8b cf       	rjmp	.-234    	; 0x288 <main+0xc>

Disassembly of section .text.libgcc:

0000047e <__tablejump2__>:
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	05 90       	lpm	r0, Z+
 484:	f4 91       	lpm	r31, Z
 486:	e0 2d       	mov	r30, r0
 488:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000004aa <_fini>:
 4aa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004ac <__funcs_on_exit>:
 4ac:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004ae <__simulator_exit>:
 4ae:	08 95       	ret

Disassembly of section .text.exit:

00000446 <exit>:
 446:	ec 01       	movw	r28, r24
 448:	0e 94 56 02 	call	0x4ac	; 0x4ac <__funcs_on_exit>
 44c:	0e 94 55 02 	call	0x4aa	; 0x4aa <_fini>
 450:	ce 01       	movw	r24, r28
 452:	0e 94 57 02 	call	0x4ae	; 0x4ae <__simulator_exit>
 456:	ce 01       	movw	r24, r28
 458:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_Exit>

Disassembly of section .text._Exit:

000004a6 <_Exit>:
 4a6:	0e 94 63 00 	call	0xc6	; 0xc6 <_exit>
